// Decompiled with JetBrains decompiler
// Type: AMS.TempDataSet
// Assembly: AMS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99EBC956-E2B8-4955-9E76-E3E000435543
// Assembly location: C:\Users\Administrator\Desktop\birchridge\AMS 2017\AMS.exe

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace AMS
{
  [HelpKeyword("vs.data.DataSet")]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
  [ToolboxItem(true)]
  [XmlRoot("TempDataSet")]
  [DesignerCategory("code")]
  [Serializable]
  public class TempDataSet : DataSet
  {
    private TempDataSet.AccBonusEntitleListDataTable tableAccBonusEntitleList;
    private TempDataSet.AccCurrentGByFloorNoDataTable tableAccCurrentGByFloorNo;
    private TempDataSet.AccCurrentGInfoDataTable tableAccCurrentGInfo;
    private TempDataSet.AccErrorRecordsDataTable tableAccErrorRecords;
    private TempDataSet.AccExtraDataTable tableAccExtra;
    private TempDataSet.AccGInfo_TempDataTable tableAccGInfo_Temp;
    private TempDataSet.AccGracePeriodListDataTable tableAccGracePeriodList;
    private TempDataSet.AccGuestAccountDataTable tableAccGuestAccount;
    private TempDataSet.AccGuestHistoryDataTable tableAccGuestHistory;
    private TempDataSet.AccGuestListDataTable tableAccGuestList;
    private TempDataSet.AccGuestRecordDateDataTable tableAccGuestRecordDate;
    private TempDataSet.AccReservationListDataTable tableAccReservationList;
    private TempDataSet.AccRoomDetailDataTable tableAccRoomDetail;
    private TempDataSet.AccRoomInformationDataTable tableAccRoomInformation;
    private TempDataSet.AccSalesDataTable tableAccSales;
    private TempDataSet.AccTransDataTable tableAccTrans;
    private TempDataSet.AvailableRoom_TempDataTable tableAvailableRoom_Temp;
    private TempDataSet.Banking_TempDataTable tableBanking_Temp;
    private TempDataSet.BonusEntitleListDataTable tableBonusEntitleList;
    private TempDataSet.BonusTempDataTable tableBonusTemp;
    private TempDataSet.CheckRoom_TempDataTable tableCheckRoom_Temp;
    private TempDataSet.CurrentGByFloorNoDataTable tableCurrentGByFloorNo;
    private TempDataSet.CurrentGInfoDataTable tableCurrentGInfo;
    private TempDataSet.DetailGuestIssuedDataTable tableDetailGuestIssued;
    private TempDataSet.DisplayRooms_TempDataTable tableDisplayRooms_Temp;
    private TempDataSet.DLogDataTable tableDLog;
    private TempDataSet.DTransactionsDataTable tableDTransactions;
    private TempDataSet.ErrorRecordsDataTable tableErrorRecords;
    private TempDataSet.ExtraDataTable tableExtra;
    private TempDataSet.ExtraCardDataTable tableExtraCard;
    private TempDataSet.ExtraCharge_TempDataTable tableExtraCharge_Temp;
    private TempDataSet.GData_TempDataTable tableGData_Temp;
    private TempDataSet.GDSalesDataTable tableGDSales;
    private TempDataSet.GInfo_TempDataTable tableGInfo_Temp;
    private TempDataSet.GracePeriodListDataTable tableGracePeriodList;
    private TempDataSet.GTransactions_TempDataTable tableGTransactions_Temp;
    private TempDataSet.GuestAccountDataTable tableGuestAccount;
    private TempDataSet.GuestHistoryDataTable tableGuestHistory;
    private TempDataSet.GuestIssuedByBldNoDataTable tableGuestIssuedByBldNo;
    private TempDataSet.GuestIssuedByFloorNoDataTable tableGuestIssuedByFloorNo;
    private TempDataSet.GuestIssuedByGuestIDDataTable tableGuestIssuedByGuestID;
    private TempDataSet.GuestIssuedByRoomNoDataTable tableGuestIssuedByRoomNo;
    private TempDataSet.GuestListDataTable tableGuestList;
    private TempDataSet.GuestRecordDateDataTable tableGuestRecordDate;
    private TempDataSet.GViewRoom_TempDataTable tableGViewRoom_Temp;
    private TempDataSet.IssueCardHistoryDataTable tableIssueCardHistory;
    private TempDataSet.KeyChargesTempDataTable tableKeyChargesTemp;
    private TempDataSet.LossCardDataTable tableLossCard;
    private TempDataSet.MLogDataTable tableMLog;
    private TempDataSet.ReceiptDataTable tableReceipt;
    private TempDataSet.ReservationListDataTable tableReservationList;
    private TempDataSet.RoomDetailDataTable tableRoomDetail;
    private TempDataSet.RoomHistoryDataTable tableRoomHistory;
    private TempDataSet.RoomInformationDataTable tableRoomInformation;
    private TempDataSet.RoomTypeTempDataTable tableRoomTypeTemp;
    private TempDataSet.StaffTempDataTable tableStaffTemp;
    private TempDataSet.SystemSetTempDataTable tableSystemSetTemp;
    private TempDataSet.UnLockDoorByRoomNoDataTable tableUnLockDoorByRoomNo;
    private TempDataSet.UnlockDoorHistoryDataTable tableUnlockDoorHistory;
    private TempDataSet.UploadDataDataTable tableUploadData;
    private TempDataSet.VacantStatus_TempDataTable tableVacantStatus_Temp;
    private TempDataSet.ZoneTempDataTable tableZoneTemp;
    private TempDataSet.AccIssuedCardHistoryDataTable tableAccIssuedCardHistory;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    public TempDataSet()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    protected TempDataSet(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (AccBonusEntitleList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccBonusEntitleListDataTable(dataSet.Tables[nameof (AccBonusEntitleList)]));
          if (dataSet.Tables[nameof (AccCurrentGByFloorNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccCurrentGByFloorNoDataTable(dataSet.Tables[nameof (AccCurrentGByFloorNo)]));
          if (dataSet.Tables[nameof (AccCurrentGInfo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccCurrentGInfoDataTable(dataSet.Tables[nameof (AccCurrentGInfo)]));
          if (dataSet.Tables[nameof (AccErrorRecords)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccErrorRecordsDataTable(dataSet.Tables[nameof (AccErrorRecords)]));
          if (dataSet.Tables[nameof (AccExtra)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccExtraDataTable(dataSet.Tables[nameof (AccExtra)]));
          if (dataSet.Tables[nameof (AccGInfo_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGInfo_TempDataTable(dataSet.Tables[nameof (AccGInfo_Temp)]));
          if (dataSet.Tables[nameof (AccGracePeriodList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGracePeriodListDataTable(dataSet.Tables[nameof (AccGracePeriodList)]));
          if (dataSet.Tables[nameof (AccGuestAccount)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGuestAccountDataTable(dataSet.Tables[nameof (AccGuestAccount)]));
          if (dataSet.Tables[nameof (AccGuestHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGuestHistoryDataTable(dataSet.Tables[nameof (AccGuestHistory)]));
          if (dataSet.Tables[nameof (AccGuestList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGuestListDataTable(dataSet.Tables[nameof (AccGuestList)]));
          if (dataSet.Tables[nameof (AccGuestRecordDate)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccGuestRecordDateDataTable(dataSet.Tables[nameof (AccGuestRecordDate)]));
          if (dataSet.Tables[nameof (AccReservationList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccReservationListDataTable(dataSet.Tables[nameof (AccReservationList)]));
          if (dataSet.Tables[nameof (AccRoomDetail)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccRoomDetailDataTable(dataSet.Tables[nameof (AccRoomDetail)]));
          if (dataSet.Tables[nameof (AccRoomInformation)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccRoomInformationDataTable(dataSet.Tables[nameof (AccRoomInformation)]));
          if (dataSet.Tables[nameof (AccSales)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccSalesDataTable(dataSet.Tables[nameof (AccSales)]));
          if (dataSet.Tables[nameof (AccTrans)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccTransDataTable(dataSet.Tables[nameof (AccTrans)]));
          if (dataSet.Tables[nameof (AvailableRoom_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AvailableRoom_TempDataTable(dataSet.Tables[nameof (AvailableRoom_Temp)]));
          if (dataSet.Tables[nameof (Banking_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.Banking_TempDataTable(dataSet.Tables[nameof (Banking_Temp)]));
          if (dataSet.Tables[nameof (BonusEntitleList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.BonusEntitleListDataTable(dataSet.Tables[nameof (BonusEntitleList)]));
          if (dataSet.Tables[nameof (BonusTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.BonusTempDataTable(dataSet.Tables[nameof (BonusTemp)]));
          if (dataSet.Tables[nameof (CheckRoom_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.CheckRoom_TempDataTable(dataSet.Tables[nameof (CheckRoom_Temp)]));
          if (dataSet.Tables[nameof (CurrentGByFloorNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.CurrentGByFloorNoDataTable(dataSet.Tables[nameof (CurrentGByFloorNo)]));
          if (dataSet.Tables[nameof (CurrentGInfo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.CurrentGInfoDataTable(dataSet.Tables[nameof (CurrentGInfo)]));
          if (dataSet.Tables[nameof (DetailGuestIssued)] != null)
            base.Tables.Add((DataTable) new TempDataSet.DetailGuestIssuedDataTable(dataSet.Tables[nameof (DetailGuestIssued)]));
          if (dataSet.Tables[nameof (DisplayRooms_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.DisplayRooms_TempDataTable(dataSet.Tables[nameof (DisplayRooms_Temp)]));
          if (dataSet.Tables[nameof (DLog)] != null)
            base.Tables.Add((DataTable) new TempDataSet.DLogDataTable(dataSet.Tables[nameof (DLog)]));
          if (dataSet.Tables[nameof (DTransactions)] != null)
            base.Tables.Add((DataTable) new TempDataSet.DTransactionsDataTable(dataSet.Tables[nameof (DTransactions)]));
          if (dataSet.Tables[nameof (ErrorRecords)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ErrorRecordsDataTable(dataSet.Tables[nameof (ErrorRecords)]));
          if (dataSet.Tables[nameof (Extra)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ExtraDataTable(dataSet.Tables[nameof (Extra)]));
          if (dataSet.Tables[nameof (ExtraCard)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ExtraCardDataTable(dataSet.Tables[nameof (ExtraCard)]));
          if (dataSet.Tables[nameof (ExtraCharge_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ExtraCharge_TempDataTable(dataSet.Tables[nameof (ExtraCharge_Temp)]));
          if (dataSet.Tables[nameof (GData_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GData_TempDataTable(dataSet.Tables[nameof (GData_Temp)]));
          if (dataSet.Tables[nameof (GDSales)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GDSalesDataTable(dataSet.Tables[nameof (GDSales)]));
          if (dataSet.Tables[nameof (GInfo_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GInfo_TempDataTable(dataSet.Tables[nameof (GInfo_Temp)]));
          if (dataSet.Tables[nameof (GracePeriodList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GracePeriodListDataTable(dataSet.Tables[nameof (GracePeriodList)]));
          if (dataSet.Tables[nameof (GTransactions_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GTransactions_TempDataTable(dataSet.Tables[nameof (GTransactions_Temp)]));
          if (dataSet.Tables[nameof (GuestAccount)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestAccountDataTable(dataSet.Tables[nameof (GuestAccount)]));
          if (dataSet.Tables[nameof (GuestHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestHistoryDataTable(dataSet.Tables[nameof (GuestHistory)]));
          if (dataSet.Tables[nameof (GuestIssuedByBldNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByBldNoDataTable(dataSet.Tables[nameof (GuestIssuedByBldNo)]));
          if (dataSet.Tables[nameof (GuestIssuedByFloorNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByFloorNoDataTable(dataSet.Tables[nameof (GuestIssuedByFloorNo)]));
          if (dataSet.Tables[nameof (GuestIssuedByGuestID)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByGuestIDDataTable(dataSet.Tables[nameof (GuestIssuedByGuestID)]));
          if (dataSet.Tables[nameof (GuestIssuedByRoomNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByRoomNoDataTable(dataSet.Tables[nameof (GuestIssuedByRoomNo)]));
          if (dataSet.Tables[nameof (GuestList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestListDataTable(dataSet.Tables[nameof (GuestList)]));
          if (dataSet.Tables[nameof (GuestRecordDate)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GuestRecordDateDataTable(dataSet.Tables[nameof (GuestRecordDate)]));
          if (dataSet.Tables[nameof (GViewRoom_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.GViewRoom_TempDataTable(dataSet.Tables[nameof (GViewRoom_Temp)]));
          if (dataSet.Tables[nameof (IssueCardHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.IssueCardHistoryDataTable(dataSet.Tables[nameof (IssueCardHistory)]));
          if (dataSet.Tables[nameof (KeyChargesTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.KeyChargesTempDataTable(dataSet.Tables[nameof (KeyChargesTemp)]));
          if (dataSet.Tables[nameof (LossCard)] != null)
            base.Tables.Add((DataTable) new TempDataSet.LossCardDataTable(dataSet.Tables[nameof (LossCard)]));
          if (dataSet.Tables[nameof (MLog)] != null)
            base.Tables.Add((DataTable) new TempDataSet.MLogDataTable(dataSet.Tables[nameof (MLog)]));
          if (dataSet.Tables[nameof (Receipt)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ReceiptDataTable(dataSet.Tables[nameof (Receipt)]));
          if (dataSet.Tables[nameof (ReservationList)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ReservationListDataTable(dataSet.Tables[nameof (ReservationList)]));
          if (dataSet.Tables[nameof (RoomDetail)] != null)
            base.Tables.Add((DataTable) new TempDataSet.RoomDetailDataTable(dataSet.Tables[nameof (RoomDetail)]));
          if (dataSet.Tables[nameof (RoomHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.RoomHistoryDataTable(dataSet.Tables[nameof (RoomHistory)]));
          if (dataSet.Tables[nameof (RoomInformation)] != null)
            base.Tables.Add((DataTable) new TempDataSet.RoomInformationDataTable(dataSet.Tables[nameof (RoomInformation)]));
          if (dataSet.Tables[nameof (RoomTypeTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.RoomTypeTempDataTable(dataSet.Tables[nameof (RoomTypeTemp)]));
          if (dataSet.Tables[nameof (StaffTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.StaffTempDataTable(dataSet.Tables[nameof (StaffTemp)]));
          if (dataSet.Tables[nameof (SystemSetTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.SystemSetTempDataTable(dataSet.Tables[nameof (SystemSetTemp)]));
          if (dataSet.Tables[nameof (UnLockDoorByRoomNo)] != null)
            base.Tables.Add((DataTable) new TempDataSet.UnLockDoorByRoomNoDataTable(dataSet.Tables[nameof (UnLockDoorByRoomNo)]));
          if (dataSet.Tables[nameof (UnlockDoorHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.UnlockDoorHistoryDataTable(dataSet.Tables[nameof (UnlockDoorHistory)]));
          if (dataSet.Tables[nameof (UploadData)] != null)
            base.Tables.Add((DataTable) new TempDataSet.UploadDataDataTable(dataSet.Tables[nameof (UploadData)]));
          if (dataSet.Tables[nameof (VacantStatus_Temp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.VacantStatus_TempDataTable(dataSet.Tables[nameof (VacantStatus_Temp)]));
          if (dataSet.Tables[nameof (ZoneTemp)] != null)
            base.Tables.Add((DataTable) new TempDataSet.ZoneTempDataTable(dataSet.Tables[nameof (ZoneTemp)]));
          if (dataSet.Tables[nameof (AccIssuedCardHistory)] != null)
            base.Tables.Add((DataTable) new TempDataSet.AccIssuedCardHistoryDataTable(dataSet.Tables[nameof (AccIssuedCardHistory)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccBonusEntitleListDataTable AccBonusEntitleList
    {
      get => this.tableAccBonusEntitleList;
    }

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.AccCurrentGByFloorNoDataTable AccCurrentGByFloorNo
    {
      get => this.tableAccCurrentGByFloorNo;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccCurrentGInfoDataTable AccCurrentGInfo => this.tableAccCurrentGInfo;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.AccErrorRecordsDataTable AccErrorRecords => this.tableAccErrorRecords;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccExtraDataTable AccExtra => this.tableAccExtra;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccGInfo_TempDataTable AccGInfo_Temp => this.tableAccGInfo_Temp;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.AccGracePeriodListDataTable AccGracePeriodList
    {
      get => this.tableAccGracePeriodList;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccGuestAccountDataTable AccGuestAccount => this.tableAccGuestAccount;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccGuestHistoryDataTable AccGuestHistory => this.tableAccGuestHistory;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.AccGuestListDataTable AccGuestList => this.tableAccGuestList;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccGuestRecordDateDataTable AccGuestRecordDate
    {
      get => this.tableAccGuestRecordDate;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccReservationListDataTable AccReservationList
    {
      get => this.tableAccReservationList;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccRoomDetailDataTable AccRoomDetail => this.tableAccRoomDetail;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccRoomInformationDataTable AccRoomInformation
    {
      get => this.tableAccRoomInformation;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccSalesDataTable AccSales => this.tableAccSales;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.AccTransDataTable AccTrans => this.tableAccTrans;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.AvailableRoom_TempDataTable AvailableRoom_Temp
    {
      get => this.tableAvailableRoom_Temp;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.Banking_TempDataTable Banking_Temp => this.tableBanking_Temp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.BonusEntitleListDataTable BonusEntitleList => this.tableBonusEntitleList;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.BonusTempDataTable BonusTemp => this.tableBonusTemp;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.CheckRoom_TempDataTable CheckRoom_Temp => this.tableCheckRoom_Temp;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.CurrentGByFloorNoDataTable CurrentGByFloorNo => this.tableCurrentGByFloorNo;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.CurrentGInfoDataTable CurrentGInfo => this.tableCurrentGInfo;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.DetailGuestIssuedDataTable DetailGuestIssued => this.tableDetailGuestIssued;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.DisplayRooms_TempDataTable DisplayRooms_Temp => this.tableDisplayRooms_Temp;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.DLogDataTable DLog => this.tableDLog;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.DTransactionsDataTable DTransactions => this.tableDTransactions;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.ErrorRecordsDataTable ErrorRecords => this.tableErrorRecords;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.ExtraDataTable Extra => this.tableExtra;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.ExtraCardDataTable ExtraCard => this.tableExtraCard;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.ExtraCharge_TempDataTable ExtraCharge_Temp => this.tableExtraCharge_Temp;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.GData_TempDataTable GData_Temp => this.tableGData_Temp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GDSalesDataTable GDSales => this.tableGDSales;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GInfo_TempDataTable GInfo_Temp => this.tableGInfo_Temp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.GracePeriodListDataTable GracePeriodList => this.tableGracePeriodList;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.GTransactions_TempDataTable GTransactions_Temp
    {
      get => this.tableGTransactions_Temp;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GuestAccountDataTable GuestAccount => this.tableGuestAccount;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.GuestHistoryDataTable GuestHistory => this.tableGuestHistory;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GuestIssuedByBldNoDataTable GuestIssuedByBldNo
    {
      get => this.tableGuestIssuedByBldNo;
    }

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.GuestIssuedByFloorNoDataTable GuestIssuedByFloorNo
    {
      get => this.tableGuestIssuedByFloorNo;
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.GuestIssuedByGuestIDDataTable GuestIssuedByGuestID
    {
      get => this.tableGuestIssuedByGuestID;
    }

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.GuestIssuedByRoomNoDataTable GuestIssuedByRoomNo
    {
      get => this.tableGuestIssuedByRoomNo;
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.GuestListDataTable GuestList => this.tableGuestList;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GuestRecordDateDataTable GuestRecordDate => this.tableGuestRecordDate;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.GViewRoom_TempDataTable GViewRoom_Temp => this.tableGViewRoom_Temp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.IssueCardHistoryDataTable IssueCardHistory => this.tableIssueCardHistory;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.KeyChargesTempDataTable KeyChargesTemp => this.tableKeyChargesTemp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.LossCardDataTable LossCard => this.tableLossCard;

    [Browsable(false)]
    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.MLogDataTable MLog => this.tableMLog;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.ReceiptDataTable Receipt => this.tableReceipt;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.ReservationListDataTable ReservationList => this.tableReservationList;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.RoomDetailDataTable RoomDetail => this.tableRoomDetail;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.RoomHistoryDataTable RoomHistory => this.tableRoomHistory;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    public TempDataSet.RoomInformationDataTable RoomInformation => this.tableRoomInformation;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.RoomTypeTempDataTable RoomTypeTemp => this.tableRoomTypeTemp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.StaffTempDataTable StaffTemp => this.tableStaffTemp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    [Browsable(false)]
    public TempDataSet.SystemSetTempDataTable SystemSetTemp => this.tableSystemSetTemp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.UnLockDoorByRoomNoDataTable UnLockDoorByRoomNo
    {
      get => this.tableUnLockDoorByRoomNo;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.UnlockDoorHistoryDataTable UnlockDoorHistory => this.tableUnlockDoorHistory;

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [DebuggerNonUserCode]
    public TempDataSet.UploadDataDataTable UploadData => this.tableUploadData;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.VacantStatus_TempDataTable VacantStatus_Temp => this.tableVacantStatus_Temp;

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [Browsable(false)]
    [DebuggerNonUserCode]
    public TempDataSet.ZoneTempDataTable ZoneTemp => this.tableZoneTemp;

    [DebuggerNonUserCode]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TempDataSet.AccIssuedCardHistoryDataTable AccIssuedCardHistory
    {
      get => this.tableAccIssuedCardHistory;
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [DebuggerNonUserCode]
    [Browsable(true)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    public override DataSet Clone()
    {
      TempDataSet tempDataSet = (TempDataSet) base.Clone();
      tempDataSet.InitVars();
      tempDataSet.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) tempDataSet;
    }

    [DebuggerNonUserCode]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["AccBonusEntitleList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccBonusEntitleListDataTable(dataSet.Tables["AccBonusEntitleList"]));
        if (dataSet.Tables["AccCurrentGByFloorNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccCurrentGByFloorNoDataTable(dataSet.Tables["AccCurrentGByFloorNo"]));
        if (dataSet.Tables["AccCurrentGInfo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccCurrentGInfoDataTable(dataSet.Tables["AccCurrentGInfo"]));
        if (dataSet.Tables["AccErrorRecords"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccErrorRecordsDataTable(dataSet.Tables["AccErrorRecords"]));
        if (dataSet.Tables["AccExtra"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccExtraDataTable(dataSet.Tables["AccExtra"]));
        if (dataSet.Tables["AccGInfo_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGInfo_TempDataTable(dataSet.Tables["AccGInfo_Temp"]));
        if (dataSet.Tables["AccGracePeriodList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGracePeriodListDataTable(dataSet.Tables["AccGracePeriodList"]));
        if (dataSet.Tables["AccGuestAccount"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGuestAccountDataTable(dataSet.Tables["AccGuestAccount"]));
        if (dataSet.Tables["AccGuestHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGuestHistoryDataTable(dataSet.Tables["AccGuestHistory"]));
        if (dataSet.Tables["AccGuestList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGuestListDataTable(dataSet.Tables["AccGuestList"]));
        if (dataSet.Tables["AccGuestRecordDate"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccGuestRecordDateDataTable(dataSet.Tables["AccGuestRecordDate"]));
        if (dataSet.Tables["AccReservationList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccReservationListDataTable(dataSet.Tables["AccReservationList"]));
        if (dataSet.Tables["AccRoomDetail"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccRoomDetailDataTable(dataSet.Tables["AccRoomDetail"]));
        if (dataSet.Tables["AccRoomInformation"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccRoomInformationDataTable(dataSet.Tables["AccRoomInformation"]));
        if (dataSet.Tables["AccSales"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccSalesDataTable(dataSet.Tables["AccSales"]));
        if (dataSet.Tables["AccTrans"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccTransDataTable(dataSet.Tables["AccTrans"]));
        if (dataSet.Tables["AvailableRoom_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AvailableRoom_TempDataTable(dataSet.Tables["AvailableRoom_Temp"]));
        if (dataSet.Tables["Banking_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.Banking_TempDataTable(dataSet.Tables["Banking_Temp"]));
        if (dataSet.Tables["BonusEntitleList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.BonusEntitleListDataTable(dataSet.Tables["BonusEntitleList"]));
        if (dataSet.Tables["BonusTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.BonusTempDataTable(dataSet.Tables["BonusTemp"]));
        if (dataSet.Tables["CheckRoom_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.CheckRoom_TempDataTable(dataSet.Tables["CheckRoom_Temp"]));
        if (dataSet.Tables["CurrentGByFloorNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.CurrentGByFloorNoDataTable(dataSet.Tables["CurrentGByFloorNo"]));
        if (dataSet.Tables["CurrentGInfo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.CurrentGInfoDataTable(dataSet.Tables["CurrentGInfo"]));
        if (dataSet.Tables["DetailGuestIssued"] != null)
          base.Tables.Add((DataTable) new TempDataSet.DetailGuestIssuedDataTable(dataSet.Tables["DetailGuestIssued"]));
        if (dataSet.Tables["DisplayRooms_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.DisplayRooms_TempDataTable(dataSet.Tables["DisplayRooms_Temp"]));
        if (dataSet.Tables["DLog"] != null)
          base.Tables.Add((DataTable) new TempDataSet.DLogDataTable(dataSet.Tables["DLog"]));
        if (dataSet.Tables["DTransactions"] != null)
          base.Tables.Add((DataTable) new TempDataSet.DTransactionsDataTable(dataSet.Tables["DTransactions"]));
        if (dataSet.Tables["ErrorRecords"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ErrorRecordsDataTable(dataSet.Tables["ErrorRecords"]));
        if (dataSet.Tables["Extra"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ExtraDataTable(dataSet.Tables["Extra"]));
        if (dataSet.Tables["ExtraCard"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ExtraCardDataTable(dataSet.Tables["ExtraCard"]));
        if (dataSet.Tables["ExtraCharge_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ExtraCharge_TempDataTable(dataSet.Tables["ExtraCharge_Temp"]));
        if (dataSet.Tables["GData_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GData_TempDataTable(dataSet.Tables["GData_Temp"]));
        if (dataSet.Tables["GDSales"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GDSalesDataTable(dataSet.Tables["GDSales"]));
        if (dataSet.Tables["GInfo_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GInfo_TempDataTable(dataSet.Tables["GInfo_Temp"]));
        if (dataSet.Tables["GracePeriodList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GracePeriodListDataTable(dataSet.Tables["GracePeriodList"]));
        if (dataSet.Tables["GTransactions_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GTransactions_TempDataTable(dataSet.Tables["GTransactions_Temp"]));
        if (dataSet.Tables["GuestAccount"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestAccountDataTable(dataSet.Tables["GuestAccount"]));
        if (dataSet.Tables["GuestHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestHistoryDataTable(dataSet.Tables["GuestHistory"]));
        if (dataSet.Tables["GuestIssuedByBldNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByBldNoDataTable(dataSet.Tables["GuestIssuedByBldNo"]));
        if (dataSet.Tables["GuestIssuedByFloorNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByFloorNoDataTable(dataSet.Tables["GuestIssuedByFloorNo"]));
        if (dataSet.Tables["GuestIssuedByGuestID"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByGuestIDDataTable(dataSet.Tables["GuestIssuedByGuestID"]));
        if (dataSet.Tables["GuestIssuedByRoomNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestIssuedByRoomNoDataTable(dataSet.Tables["GuestIssuedByRoomNo"]));
        if (dataSet.Tables["GuestList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestListDataTable(dataSet.Tables["GuestList"]));
        if (dataSet.Tables["GuestRecordDate"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GuestRecordDateDataTable(dataSet.Tables["GuestRecordDate"]));
        if (dataSet.Tables["GViewRoom_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.GViewRoom_TempDataTable(dataSet.Tables["GViewRoom_Temp"]));
        if (dataSet.Tables["IssueCardHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.IssueCardHistoryDataTable(dataSet.Tables["IssueCardHistory"]));
        if (dataSet.Tables["KeyChargesTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.KeyChargesTempDataTable(dataSet.Tables["KeyChargesTemp"]));
        if (dataSet.Tables["LossCard"] != null)
          base.Tables.Add((DataTable) new TempDataSet.LossCardDataTable(dataSet.Tables["LossCard"]));
        if (dataSet.Tables["MLog"] != null)
          base.Tables.Add((DataTable) new TempDataSet.MLogDataTable(dataSet.Tables["MLog"]));
        if (dataSet.Tables["Receipt"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ReceiptDataTable(dataSet.Tables["Receipt"]));
        if (dataSet.Tables["ReservationList"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ReservationListDataTable(dataSet.Tables["ReservationList"]));
        if (dataSet.Tables["RoomDetail"] != null)
          base.Tables.Add((DataTable) new TempDataSet.RoomDetailDataTable(dataSet.Tables["RoomDetail"]));
        if (dataSet.Tables["RoomHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.RoomHistoryDataTable(dataSet.Tables["RoomHistory"]));
        if (dataSet.Tables["RoomInformation"] != null)
          base.Tables.Add((DataTable) new TempDataSet.RoomInformationDataTable(dataSet.Tables["RoomInformation"]));
        if (dataSet.Tables["RoomTypeTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.RoomTypeTempDataTable(dataSet.Tables["RoomTypeTemp"]));
        if (dataSet.Tables["StaffTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.StaffTempDataTable(dataSet.Tables["StaffTemp"]));
        if (dataSet.Tables["SystemSetTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.SystemSetTempDataTable(dataSet.Tables["SystemSetTemp"]));
        if (dataSet.Tables["UnLockDoorByRoomNo"] != null)
          base.Tables.Add((DataTable) new TempDataSet.UnLockDoorByRoomNoDataTable(dataSet.Tables["UnLockDoorByRoomNo"]));
        if (dataSet.Tables["UnlockDoorHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.UnlockDoorHistoryDataTable(dataSet.Tables["UnlockDoorHistory"]));
        if (dataSet.Tables["UploadData"] != null)
          base.Tables.Add((DataTable) new TempDataSet.UploadDataDataTable(dataSet.Tables["UploadData"]));
        if (dataSet.Tables["VacantStatus_Temp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.VacantStatus_TempDataTable(dataSet.Tables["VacantStatus_Temp"]));
        if (dataSet.Tables["ZoneTemp"] != null)
          base.Tables.Add((DataTable) new TempDataSet.ZoneTempDataTable(dataSet.Tables["ZoneTemp"]));
        if (dataSet.Tables["AccIssuedCardHistory"] != null)
          base.Tables.Add((DataTable) new TempDataSet.AccIssuedCardHistoryDataTable(dataSet.Tables["AccIssuedCardHistory"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    internal void InitVars(bool initTable)
    {
      this.tableAccBonusEntitleList = (TempDataSet.AccBonusEntitleListDataTable) base.Tables["AccBonusEntitleList"];
      if (initTable && this.tableAccBonusEntitleList != null)
        this.tableAccBonusEntitleList.InitVars();
      this.tableAccCurrentGByFloorNo = (TempDataSet.AccCurrentGByFloorNoDataTable) base.Tables["AccCurrentGByFloorNo"];
      if (initTable && this.tableAccCurrentGByFloorNo != null)
        this.tableAccCurrentGByFloorNo.InitVars();
      this.tableAccCurrentGInfo = (TempDataSet.AccCurrentGInfoDataTable) base.Tables["AccCurrentGInfo"];
      if (initTable && this.tableAccCurrentGInfo != null)
        this.tableAccCurrentGInfo.InitVars();
      this.tableAccErrorRecords = (TempDataSet.AccErrorRecordsDataTable) base.Tables["AccErrorRecords"];
      if (initTable && this.tableAccErrorRecords != null)
        this.tableAccErrorRecords.InitVars();
      this.tableAccExtra = (TempDataSet.AccExtraDataTable) base.Tables["AccExtra"];
      if (initTable && this.tableAccExtra != null)
        this.tableAccExtra.InitVars();
      this.tableAccGInfo_Temp = (TempDataSet.AccGInfo_TempDataTable) base.Tables["AccGInfo_Temp"];
      if (initTable && this.tableAccGInfo_Temp != null)
        this.tableAccGInfo_Temp.InitVars();
      this.tableAccGracePeriodList = (TempDataSet.AccGracePeriodListDataTable) base.Tables["AccGracePeriodList"];
      if (initTable && this.tableAccGracePeriodList != null)
        this.tableAccGracePeriodList.InitVars();
      this.tableAccGuestAccount = (TempDataSet.AccGuestAccountDataTable) base.Tables["AccGuestAccount"];
      if (initTable && this.tableAccGuestAccount != null)
        this.tableAccGuestAccount.InitVars();
      this.tableAccGuestHistory = (TempDataSet.AccGuestHistoryDataTable) base.Tables["AccGuestHistory"];
      if (initTable && this.tableAccGuestHistory != null)
        this.tableAccGuestHistory.InitVars();
      this.tableAccGuestList = (TempDataSet.AccGuestListDataTable) base.Tables["AccGuestList"];
      if (initTable && this.tableAccGuestList != null)
        this.tableAccGuestList.InitVars();
      this.tableAccGuestRecordDate = (TempDataSet.AccGuestRecordDateDataTable) base.Tables["AccGuestRecordDate"];
      if (initTable && this.tableAccGuestRecordDate != null)
        this.tableAccGuestRecordDate.InitVars();
      this.tableAccReservationList = (TempDataSet.AccReservationListDataTable) base.Tables["AccReservationList"];
      if (initTable && this.tableAccReservationList != null)
        this.tableAccReservationList.InitVars();
      this.tableAccRoomDetail = (TempDataSet.AccRoomDetailDataTable) base.Tables["AccRoomDetail"];
      if (initTable && this.tableAccRoomDetail != null)
        this.tableAccRoomDetail.InitVars();
      this.tableAccRoomInformation = (TempDataSet.AccRoomInformationDataTable) base.Tables["AccRoomInformation"];
      if (initTable && this.tableAccRoomInformation != null)
        this.tableAccRoomInformation.InitVars();
      this.tableAccSales = (TempDataSet.AccSalesDataTable) base.Tables["AccSales"];
      if (initTable && this.tableAccSales != null)
        this.tableAccSales.InitVars();
      this.tableAccTrans = (TempDataSet.AccTransDataTable) base.Tables["AccTrans"];
      if (initTable && this.tableAccTrans != null)
        this.tableAccTrans.InitVars();
      this.tableAvailableRoom_Temp = (TempDataSet.AvailableRoom_TempDataTable) base.Tables["AvailableRoom_Temp"];
      if (initTable && this.tableAvailableRoom_Temp != null)
        this.tableAvailableRoom_Temp.InitVars();
      this.tableBanking_Temp = (TempDataSet.Banking_TempDataTable) base.Tables["Banking_Temp"];
      if (initTable && this.tableBanking_Temp != null)
        this.tableBanking_Temp.InitVars();
      this.tableBonusEntitleList = (TempDataSet.BonusEntitleListDataTable) base.Tables["BonusEntitleList"];
      if (initTable && this.tableBonusEntitleList != null)
        this.tableBonusEntitleList.InitVars();
      this.tableBonusTemp = (TempDataSet.BonusTempDataTable) base.Tables["BonusTemp"];
      if (initTable && this.tableBonusTemp != null)
        this.tableBonusTemp.InitVars();
      this.tableCheckRoom_Temp = (TempDataSet.CheckRoom_TempDataTable) base.Tables["CheckRoom_Temp"];
      if (initTable && this.tableCheckRoom_Temp != null)
        this.tableCheckRoom_Temp.InitVars();
      this.tableCurrentGByFloorNo = (TempDataSet.CurrentGByFloorNoDataTable) base.Tables["CurrentGByFloorNo"];
      if (initTable && this.tableCurrentGByFloorNo != null)
        this.tableCurrentGByFloorNo.InitVars();
      this.tableCurrentGInfo = (TempDataSet.CurrentGInfoDataTable) base.Tables["CurrentGInfo"];
      if (initTable && this.tableCurrentGInfo != null)
        this.tableCurrentGInfo.InitVars();
      this.tableDetailGuestIssued = (TempDataSet.DetailGuestIssuedDataTable) base.Tables["DetailGuestIssued"];
      if (initTable && this.tableDetailGuestIssued != null)
        this.tableDetailGuestIssued.InitVars();
      this.tableDisplayRooms_Temp = (TempDataSet.DisplayRooms_TempDataTable) base.Tables["DisplayRooms_Temp"];
      if (initTable && this.tableDisplayRooms_Temp != null)
        this.tableDisplayRooms_Temp.InitVars();
      this.tableDLog = (TempDataSet.DLogDataTable) base.Tables["DLog"];
      if (initTable && this.tableDLog != null)
        this.tableDLog.InitVars();
      this.tableDTransactions = (TempDataSet.DTransactionsDataTable) base.Tables["DTransactions"];
      if (initTable && this.tableDTransactions != null)
        this.tableDTransactions.InitVars();
      this.tableErrorRecords = (TempDataSet.ErrorRecordsDataTable) base.Tables["ErrorRecords"];
      if (initTable && this.tableErrorRecords != null)
        this.tableErrorRecords.InitVars();
      this.tableExtra = (TempDataSet.ExtraDataTable) base.Tables["Extra"];
      if (initTable && this.tableExtra != null)
        this.tableExtra.InitVars();
      this.tableExtraCard = (TempDataSet.ExtraCardDataTable) base.Tables["ExtraCard"];
      if (initTable && this.tableExtraCard != null)
        this.tableExtraCard.InitVars();
      this.tableExtraCharge_Temp = (TempDataSet.ExtraCharge_TempDataTable) base.Tables["ExtraCharge_Temp"];
      if (initTable && this.tableExtraCharge_Temp != null)
        this.tableExtraCharge_Temp.InitVars();
      this.tableGData_Temp = (TempDataSet.GData_TempDataTable) base.Tables["GData_Temp"];
      if (initTable && this.tableGData_Temp != null)
        this.tableGData_Temp.InitVars();
      this.tableGDSales = (TempDataSet.GDSalesDataTable) base.Tables["GDSales"];
      if (initTable && this.tableGDSales != null)
        this.tableGDSales.InitVars();
      this.tableGInfo_Temp = (TempDataSet.GInfo_TempDataTable) base.Tables["GInfo_Temp"];
      if (initTable && this.tableGInfo_Temp != null)
        this.tableGInfo_Temp.InitVars();
      this.tableGracePeriodList = (TempDataSet.GracePeriodListDataTable) base.Tables["GracePeriodList"];
      if (initTable && this.tableGracePeriodList != null)
        this.tableGracePeriodList.InitVars();
      this.tableGTransactions_Temp = (TempDataSet.GTransactions_TempDataTable) base.Tables["GTransactions_Temp"];
      if (initTable && this.tableGTransactions_Temp != null)
        this.tableGTransactions_Temp.InitVars();
      this.tableGuestAccount = (TempDataSet.GuestAccountDataTable) base.Tables["GuestAccount"];
      if (initTable && this.tableGuestAccount != null)
        this.tableGuestAccount.InitVars();
      this.tableGuestHistory = (TempDataSet.GuestHistoryDataTable) base.Tables["GuestHistory"];
      if (initTable && this.tableGuestHistory != null)
        this.tableGuestHistory.InitVars();
      this.tableGuestIssuedByBldNo = (TempDataSet.GuestIssuedByBldNoDataTable) base.Tables["GuestIssuedByBldNo"];
      if (initTable && this.tableGuestIssuedByBldNo != null)
        this.tableGuestIssuedByBldNo.InitVars();
      this.tableGuestIssuedByFloorNo = (TempDataSet.GuestIssuedByFloorNoDataTable) base.Tables["GuestIssuedByFloorNo"];
      if (initTable && this.tableGuestIssuedByFloorNo != null)
        this.tableGuestIssuedByFloorNo.InitVars();
      this.tableGuestIssuedByGuestID = (TempDataSet.GuestIssuedByGuestIDDataTable) base.Tables["GuestIssuedByGuestID"];
      if (initTable && this.tableGuestIssuedByGuestID != null)
        this.tableGuestIssuedByGuestID.InitVars();
      this.tableGuestIssuedByRoomNo = (TempDataSet.GuestIssuedByRoomNoDataTable) base.Tables["GuestIssuedByRoomNo"];
      if (initTable && this.tableGuestIssuedByRoomNo != null)
        this.tableGuestIssuedByRoomNo.InitVars();
      this.tableGuestList = (TempDataSet.GuestListDataTable) base.Tables["GuestList"];
      if (initTable && this.tableGuestList != null)
        this.tableGuestList.InitVars();
      this.tableGuestRecordDate = (TempDataSet.GuestRecordDateDataTable) base.Tables["GuestRecordDate"];
      if (initTable && this.tableGuestRecordDate != null)
        this.tableGuestRecordDate.InitVars();
      this.tableGViewRoom_Temp = (TempDataSet.GViewRoom_TempDataTable) base.Tables["GViewRoom_Temp"];
      if (initTable && this.tableGViewRoom_Temp != null)
        this.tableGViewRoom_Temp.InitVars();
      this.tableIssueCardHistory = (TempDataSet.IssueCardHistoryDataTable) base.Tables["IssueCardHistory"];
      if (initTable && this.tableIssueCardHistory != null)
        this.tableIssueCardHistory.InitVars();
      this.tableKeyChargesTemp = (TempDataSet.KeyChargesTempDataTable) base.Tables["KeyChargesTemp"];
      if (initTable && this.tableKeyChargesTemp != null)
        this.tableKeyChargesTemp.InitVars();
      this.tableLossCard = (TempDataSet.LossCardDataTable) base.Tables["LossCard"];
      if (initTable && this.tableLossCard != null)
        this.tableLossCard.InitVars();
      this.tableMLog = (TempDataSet.MLogDataTable) base.Tables["MLog"];
      if (initTable && this.tableMLog != null)
        this.tableMLog.InitVars();
      this.tableReceipt = (TempDataSet.ReceiptDataTable) base.Tables["Receipt"];
      if (initTable && this.tableReceipt != null)
        this.tableReceipt.InitVars();
      this.tableReservationList = (TempDataSet.ReservationListDataTable) base.Tables["ReservationList"];
      if (initTable && this.tableReservationList != null)
        this.tableReservationList.InitVars();
      this.tableRoomDetail = (TempDataSet.RoomDetailDataTable) base.Tables["RoomDetail"];
      if (initTable && this.tableRoomDetail != null)
        this.tableRoomDetail.InitVars();
      this.tableRoomHistory = (TempDataSet.RoomHistoryDataTable) base.Tables["RoomHistory"];
      if (initTable && this.tableRoomHistory != null)
        this.tableRoomHistory.InitVars();
      this.tableRoomInformation = (TempDataSet.RoomInformationDataTable) base.Tables["RoomInformation"];
      if (initTable && this.tableRoomInformation != null)
        this.tableRoomInformation.InitVars();
      this.tableRoomTypeTemp = (TempDataSet.RoomTypeTempDataTable) base.Tables["RoomTypeTemp"];
      if (initTable && this.tableRoomTypeTemp != null)
        this.tableRoomTypeTemp.InitVars();
      this.tableStaffTemp = (TempDataSet.StaffTempDataTable) base.Tables["StaffTemp"];
      if (initTable && this.tableStaffTemp != null)
        this.tableStaffTemp.InitVars();
      this.tableSystemSetTemp = (TempDataSet.SystemSetTempDataTable) base.Tables["SystemSetTemp"];
      if (initTable && this.tableSystemSetTemp != null)
        this.tableSystemSetTemp.InitVars();
      this.tableUnLockDoorByRoomNo = (TempDataSet.UnLockDoorByRoomNoDataTable) base.Tables["UnLockDoorByRoomNo"];
      if (initTable && this.tableUnLockDoorByRoomNo != null)
        this.tableUnLockDoorByRoomNo.InitVars();
      this.tableUnlockDoorHistory = (TempDataSet.UnlockDoorHistoryDataTable) base.Tables["UnlockDoorHistory"];
      if (initTable && this.tableUnlockDoorHistory != null)
        this.tableUnlockDoorHistory.InitVars();
      this.tableUploadData = (TempDataSet.UploadDataDataTable) base.Tables["UploadData"];
      if (initTable && this.tableUploadData != null)
        this.tableUploadData.InitVars();
      this.tableVacantStatus_Temp = (TempDataSet.VacantStatus_TempDataTable) base.Tables["VacantStatus_Temp"];
      if (initTable && this.tableVacantStatus_Temp != null)
        this.tableVacantStatus_Temp.InitVars();
      this.tableZoneTemp = (TempDataSet.ZoneTempDataTable) base.Tables["ZoneTemp"];
      if (initTable && this.tableZoneTemp != null)
        this.tableZoneTemp.InitVars();
      this.tableAccIssuedCardHistory = (TempDataSet.AccIssuedCardHistoryDataTable) base.Tables["AccIssuedCardHistory"];
      if (!initTable || this.tableAccIssuedCardHistory == null)
        return;
      this.tableAccIssuedCardHistory.InitVars();
    }

    [DebuggerNonUserCode]
    private void InitClass()
    {
      this.DataSetName = "TempDataSet";
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/TempDataSet.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableAccBonusEntitleList = new TempDataSet.AccBonusEntitleListDataTable();
      base.Tables.Add((DataTable) this.tableAccBonusEntitleList);
      this.tableAccCurrentGByFloorNo = new TempDataSet.AccCurrentGByFloorNoDataTable();
      base.Tables.Add((DataTable) this.tableAccCurrentGByFloorNo);
      this.tableAccCurrentGInfo = new TempDataSet.AccCurrentGInfoDataTable();
      base.Tables.Add((DataTable) this.tableAccCurrentGInfo);
      this.tableAccErrorRecords = new TempDataSet.AccErrorRecordsDataTable();
      base.Tables.Add((DataTable) this.tableAccErrorRecords);
      this.tableAccExtra = new TempDataSet.AccExtraDataTable();
      base.Tables.Add((DataTable) this.tableAccExtra);
      this.tableAccGInfo_Temp = new TempDataSet.AccGInfo_TempDataTable();
      base.Tables.Add((DataTable) this.tableAccGInfo_Temp);
      this.tableAccGracePeriodList = new TempDataSet.AccGracePeriodListDataTable();
      base.Tables.Add((DataTable) this.tableAccGracePeriodList);
      this.tableAccGuestAccount = new TempDataSet.AccGuestAccountDataTable();
      base.Tables.Add((DataTable) this.tableAccGuestAccount);
      this.tableAccGuestHistory = new TempDataSet.AccGuestHistoryDataTable();
      base.Tables.Add((DataTable) this.tableAccGuestHistory);
      this.tableAccGuestList = new TempDataSet.AccGuestListDataTable();
      base.Tables.Add((DataTable) this.tableAccGuestList);
      this.tableAccGuestRecordDate = new TempDataSet.AccGuestRecordDateDataTable();
      base.Tables.Add((DataTable) this.tableAccGuestRecordDate);
      this.tableAccReservationList = new TempDataSet.AccReservationListDataTable();
      base.Tables.Add((DataTable) this.tableAccReservationList);
      this.tableAccRoomDetail = new TempDataSet.AccRoomDetailDataTable();
      base.Tables.Add((DataTable) this.tableAccRoomDetail);
      this.tableAccRoomInformation = new TempDataSet.AccRoomInformationDataTable();
      base.Tables.Add((DataTable) this.tableAccRoomInformation);
      this.tableAccSales = new TempDataSet.AccSalesDataTable();
      base.Tables.Add((DataTable) this.tableAccSales);
      this.tableAccTrans = new TempDataSet.AccTransDataTable();
      base.Tables.Add((DataTable) this.tableAccTrans);
      this.tableAvailableRoom_Temp = new TempDataSet.AvailableRoom_TempDataTable();
      base.Tables.Add((DataTable) this.tableAvailableRoom_Temp);
      this.tableBanking_Temp = new TempDataSet.Banking_TempDataTable();
      base.Tables.Add((DataTable) this.tableBanking_Temp);
      this.tableBonusEntitleList = new TempDataSet.BonusEntitleListDataTable();
      base.Tables.Add((DataTable) this.tableBonusEntitleList);
      this.tableBonusTemp = new TempDataSet.BonusTempDataTable();
      base.Tables.Add((DataTable) this.tableBonusTemp);
      this.tableCheckRoom_Temp = new TempDataSet.CheckRoom_TempDataTable();
      base.Tables.Add((DataTable) this.tableCheckRoom_Temp);
      this.tableCurrentGByFloorNo = new TempDataSet.CurrentGByFloorNoDataTable();
      base.Tables.Add((DataTable) this.tableCurrentGByFloorNo);
      this.tableCurrentGInfo = new TempDataSet.CurrentGInfoDataTable();
      base.Tables.Add((DataTable) this.tableCurrentGInfo);
      this.tableDetailGuestIssued = new TempDataSet.DetailGuestIssuedDataTable();
      base.Tables.Add((DataTable) this.tableDetailGuestIssued);
      this.tableDisplayRooms_Temp = new TempDataSet.DisplayRooms_TempDataTable();
      base.Tables.Add((DataTable) this.tableDisplayRooms_Temp);
      this.tableDLog = new TempDataSet.DLogDataTable();
      base.Tables.Add((DataTable) this.tableDLog);
      this.tableDTransactions = new TempDataSet.DTransactionsDataTable();
      base.Tables.Add((DataTable) this.tableDTransactions);
      this.tableErrorRecords = new TempDataSet.ErrorRecordsDataTable();
      base.Tables.Add((DataTable) this.tableErrorRecords);
      this.tableExtra = new TempDataSet.ExtraDataTable();
      base.Tables.Add((DataTable) this.tableExtra);
      this.tableExtraCard = new TempDataSet.ExtraCardDataTable();
      base.Tables.Add((DataTable) this.tableExtraCard);
      this.tableExtraCharge_Temp = new TempDataSet.ExtraCharge_TempDataTable();
      base.Tables.Add((DataTable) this.tableExtraCharge_Temp);
      this.tableGData_Temp = new TempDataSet.GData_TempDataTable();
      base.Tables.Add((DataTable) this.tableGData_Temp);
      this.tableGDSales = new TempDataSet.GDSalesDataTable();
      base.Tables.Add((DataTable) this.tableGDSales);
      this.tableGInfo_Temp = new TempDataSet.GInfo_TempDataTable();
      base.Tables.Add((DataTable) this.tableGInfo_Temp);
      this.tableGracePeriodList = new TempDataSet.GracePeriodListDataTable();
      base.Tables.Add((DataTable) this.tableGracePeriodList);
      this.tableGTransactions_Temp = new TempDataSet.GTransactions_TempDataTable();
      base.Tables.Add((DataTable) this.tableGTransactions_Temp);
      this.tableGuestAccount = new TempDataSet.GuestAccountDataTable();
      base.Tables.Add((DataTable) this.tableGuestAccount);
      this.tableGuestHistory = new TempDataSet.GuestHistoryDataTable();
      base.Tables.Add((DataTable) this.tableGuestHistory);
      this.tableGuestIssuedByBldNo = new TempDataSet.GuestIssuedByBldNoDataTable();
      base.Tables.Add((DataTable) this.tableGuestIssuedByBldNo);
      this.tableGuestIssuedByFloorNo = new TempDataSet.GuestIssuedByFloorNoDataTable();
      base.Tables.Add((DataTable) this.tableGuestIssuedByFloorNo);
      this.tableGuestIssuedByGuestID = new TempDataSet.GuestIssuedByGuestIDDataTable();
      base.Tables.Add((DataTable) this.tableGuestIssuedByGuestID);
      this.tableGuestIssuedByRoomNo = new TempDataSet.GuestIssuedByRoomNoDataTable();
      base.Tables.Add((DataTable) this.tableGuestIssuedByRoomNo);
      this.tableGuestList = new TempDataSet.GuestListDataTable();
      base.Tables.Add((DataTable) this.tableGuestList);
      this.tableGuestRecordDate = new TempDataSet.GuestRecordDateDataTable();
      base.Tables.Add((DataTable) this.tableGuestRecordDate);
      this.tableGViewRoom_Temp = new TempDataSet.GViewRoom_TempDataTable();
      base.Tables.Add((DataTable) this.tableGViewRoom_Temp);
      this.tableIssueCardHistory = new TempDataSet.IssueCardHistoryDataTable();
      base.Tables.Add((DataTable) this.tableIssueCardHistory);
      this.tableKeyChargesTemp = new TempDataSet.KeyChargesTempDataTable();
      base.Tables.Add((DataTable) this.tableKeyChargesTemp);
      this.tableLossCard = new TempDataSet.LossCardDataTable();
      base.Tables.Add((DataTable) this.tableLossCard);
      this.tableMLog = new TempDataSet.MLogDataTable();
      base.Tables.Add((DataTable) this.tableMLog);
      this.tableReceipt = new TempDataSet.ReceiptDataTable();
      base.Tables.Add((DataTable) this.tableReceipt);
      this.tableReservationList = new TempDataSet.ReservationListDataTable();
      base.Tables.Add((DataTable) this.tableReservationList);
      this.tableRoomDetail = new TempDataSet.RoomDetailDataTable();
      base.Tables.Add((DataTable) this.tableRoomDetail);
      this.tableRoomHistory = new TempDataSet.RoomHistoryDataTable();
      base.Tables.Add((DataTable) this.tableRoomHistory);
      this.tableRoomInformation = new TempDataSet.RoomInformationDataTable();
      base.Tables.Add((DataTable) this.tableRoomInformation);
      this.tableRoomTypeTemp = new TempDataSet.RoomTypeTempDataTable();
      base.Tables.Add((DataTable) this.tableRoomTypeTemp);
      this.tableStaffTemp = new TempDataSet.StaffTempDataTable();
      base.Tables.Add((DataTable) this.tableStaffTemp);
      this.tableSystemSetTemp = new TempDataSet.SystemSetTempDataTable();
      base.Tables.Add((DataTable) this.tableSystemSetTemp);
      this.tableUnLockDoorByRoomNo = new TempDataSet.UnLockDoorByRoomNoDataTable();
      base.Tables.Add((DataTable) this.tableUnLockDoorByRoomNo);
      this.tableUnlockDoorHistory = new TempDataSet.UnlockDoorHistoryDataTable();
      base.Tables.Add((DataTable) this.tableUnlockDoorHistory);
      this.tableUploadData = new TempDataSet.UploadDataDataTable();
      base.Tables.Add((DataTable) this.tableUploadData);
      this.tableVacantStatus_Temp = new TempDataSet.VacantStatus_TempDataTable();
      base.Tables.Add((DataTable) this.tableVacantStatus_Temp);
      this.tableZoneTemp = new TempDataSet.ZoneTempDataTable();
      base.Tables.Add((DataTable) this.tableZoneTemp);
      this.tableAccIssuedCardHistory = new TempDataSet.AccIssuedCardHistoryDataTable();
      base.Tables.Add((DataTable) this.tableAccIssuedCardHistory);
    }

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccBonusEntitleList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccCurrentGByFloorNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccCurrentGInfo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccErrorRecords() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccExtra() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGInfo_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGracePeriodList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGuestAccount() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGuestHistory() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGuestList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccGuestRecordDate() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccReservationList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccRoomDetail() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccRoomInformation() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccSales() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccTrans() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAvailableRoom_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeBanking_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeBonusEntitleList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeBonusTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeCheckRoom_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeCurrentGByFloorNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeCurrentGInfo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeDetailGuestIssued() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeDisplayRooms_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeDLog() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeDTransactions() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeErrorRecords() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeExtra() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeExtraCard() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeExtraCharge_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGData_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGDSales() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGInfo_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGracePeriodList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGTransactions_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestAccount() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestHistory() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestIssuedByBldNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestIssuedByFloorNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestIssuedByGuestID() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestIssuedByRoomNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGuestRecordDate() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeGViewRoom_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeIssueCardHistory() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeKeyChargesTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeLossCard() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeMLog() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeReceipt() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeReservationList() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeRoomDetail() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeRoomHistory() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeRoomInformation() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeRoomTypeTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeStaffTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeSystemSetTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeUnLockDoorByRoomNo() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeUnlockDoorHistory() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeUploadData() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeVacantStatus_Temp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeZoneTemp() => false;

    [DebuggerNonUserCode]
    private bool ShouldSerializeAccIssuedCardHistory() => false;

    [DebuggerNonUserCode]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      TempDataSet tempDataSet = new TempDataSet();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = tempDataSet.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    public delegate void AccBonusEntitleListRowChangeEventHandler(
      object sender,
      TempDataSet.AccBonusEntitleListRowChangeEvent e);

    public delegate void AccCurrentGByFloorNoRowChangeEventHandler(
      object sender,
      TempDataSet.AccCurrentGByFloorNoRowChangeEvent e);

    public delegate void AccCurrentGInfoRowChangeEventHandler(
      object sender,
      TempDataSet.AccCurrentGInfoRowChangeEvent e);

    public delegate void AccErrorRecordsRowChangeEventHandler(
      object sender,
      TempDataSet.AccErrorRecordsRowChangeEvent e);

    public delegate void AccExtraRowChangeEventHandler(
      object sender,
      TempDataSet.AccExtraRowChangeEvent e);

    public delegate void AccGInfo_TempRowChangeEventHandler(
      object sender,
      TempDataSet.AccGInfo_TempRowChangeEvent e);

    public delegate void AccGracePeriodListRowChangeEventHandler(
      object sender,
      TempDataSet.AccGracePeriodListRowChangeEvent e);

    public delegate void AccGuestAccountRowChangeEventHandler(
      object sender,
      TempDataSet.AccGuestAccountRowChangeEvent e);

    public delegate void AccGuestHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.AccGuestHistoryRowChangeEvent e);

    public delegate void AccGuestListRowChangeEventHandler(
      object sender,
      TempDataSet.AccGuestListRowChangeEvent e);

    public delegate void AccGuestRecordDateRowChangeEventHandler(
      object sender,
      TempDataSet.AccGuestRecordDateRowChangeEvent e);

    public delegate void AccReservationListRowChangeEventHandler(
      object sender,
      TempDataSet.AccReservationListRowChangeEvent e);

    public delegate void AccRoomDetailRowChangeEventHandler(
      object sender,
      TempDataSet.AccRoomDetailRowChangeEvent e);

    public delegate void AccRoomInformationRowChangeEventHandler(
      object sender,
      TempDataSet.AccRoomInformationRowChangeEvent e);

    public delegate void AccSalesRowChangeEventHandler(
      object sender,
      TempDataSet.AccSalesRowChangeEvent e);

    public delegate void AccTransRowChangeEventHandler(
      object sender,
      TempDataSet.AccTransRowChangeEvent e);

    public delegate void AvailableRoom_TempRowChangeEventHandler(
      object sender,
      TempDataSet.AvailableRoom_TempRowChangeEvent e);

    public delegate void Banking_TempRowChangeEventHandler(
      object sender,
      TempDataSet.Banking_TempRowChangeEvent e);

    public delegate void BonusEntitleListRowChangeEventHandler(
      object sender,
      TempDataSet.BonusEntitleListRowChangeEvent e);

    public delegate void BonusTempRowChangeEventHandler(
      object sender,
      TempDataSet.BonusTempRowChangeEvent e);

    public delegate void CheckRoom_TempRowChangeEventHandler(
      object sender,
      TempDataSet.CheckRoom_TempRowChangeEvent e);

    public delegate void CurrentGByFloorNoRowChangeEventHandler(
      object sender,
      TempDataSet.CurrentGByFloorNoRowChangeEvent e);

    public delegate void CurrentGInfoRowChangeEventHandler(
      object sender,
      TempDataSet.CurrentGInfoRowChangeEvent e);

    public delegate void DetailGuestIssuedRowChangeEventHandler(
      object sender,
      TempDataSet.DetailGuestIssuedRowChangeEvent e);

    public delegate void DisplayRooms_TempRowChangeEventHandler(
      object sender,
      TempDataSet.DisplayRooms_TempRowChangeEvent e);

    public delegate void DLogRowChangeEventHandler(object sender, TempDataSet.DLogRowChangeEvent e);

    public delegate void DTransactionsRowChangeEventHandler(
      object sender,
      TempDataSet.DTransactionsRowChangeEvent e);

    public delegate void ErrorRecordsRowChangeEventHandler(
      object sender,
      TempDataSet.ErrorRecordsRowChangeEvent e);

    public delegate void ExtraRowChangeEventHandler(
      object sender,
      TempDataSet.ExtraRowChangeEvent e);

    public delegate void ExtraCardRowChangeEventHandler(
      object sender,
      TempDataSet.ExtraCardRowChangeEvent e);

    public delegate void ExtraCharge_TempRowChangeEventHandler(
      object sender,
      TempDataSet.ExtraCharge_TempRowChangeEvent e);

    public delegate void GData_TempRowChangeEventHandler(
      object sender,
      TempDataSet.GData_TempRowChangeEvent e);

    public delegate void GDSalesRowChangeEventHandler(
      object sender,
      TempDataSet.GDSalesRowChangeEvent e);

    public delegate void GInfo_TempRowChangeEventHandler(
      object sender,
      TempDataSet.GInfo_TempRowChangeEvent e);

    public delegate void GracePeriodListRowChangeEventHandler(
      object sender,
      TempDataSet.GracePeriodListRowChangeEvent e);

    public delegate void GTransactions_TempRowChangeEventHandler(
      object sender,
      TempDataSet.GTransactions_TempRowChangeEvent e);

    public delegate void GuestAccountRowChangeEventHandler(
      object sender,
      TempDataSet.GuestAccountRowChangeEvent e);

    public delegate void GuestHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.GuestHistoryRowChangeEvent e);

    public delegate void GuestIssuedByBldNoRowChangeEventHandler(
      object sender,
      TempDataSet.GuestIssuedByBldNoRowChangeEvent e);

    public delegate void GuestIssuedByFloorNoRowChangeEventHandler(
      object sender,
      TempDataSet.GuestIssuedByFloorNoRowChangeEvent e);

    public delegate void GuestIssuedByGuestIDRowChangeEventHandler(
      object sender,
      TempDataSet.GuestIssuedByGuestIDRowChangeEvent e);

    public delegate void GuestIssuedByRoomNoRowChangeEventHandler(
      object sender,
      TempDataSet.GuestIssuedByRoomNoRowChangeEvent e);

    public delegate void GuestListRowChangeEventHandler(
      object sender,
      TempDataSet.GuestListRowChangeEvent e);

    public delegate void GuestRecordDateRowChangeEventHandler(
      object sender,
      TempDataSet.GuestRecordDateRowChangeEvent e);

    public delegate void GViewRoom_TempRowChangeEventHandler(
      object sender,
      TempDataSet.GViewRoom_TempRowChangeEvent e);

    public delegate void IssueCardHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.IssueCardHistoryRowChangeEvent e);

    public delegate void KeyChargesTempRowChangeEventHandler(
      object sender,
      TempDataSet.KeyChargesTempRowChangeEvent e);

    public delegate void LossCardRowChangeEventHandler(
      object sender,
      TempDataSet.LossCardRowChangeEvent e);

    public delegate void MLogRowChangeEventHandler(object sender, TempDataSet.MLogRowChangeEvent e);

    public delegate void ReceiptRowChangeEventHandler(
      object sender,
      TempDataSet.ReceiptRowChangeEvent e);

    public delegate void ReservationListRowChangeEventHandler(
      object sender,
      TempDataSet.ReservationListRowChangeEvent e);

    public delegate void RoomDetailRowChangeEventHandler(
      object sender,
      TempDataSet.RoomDetailRowChangeEvent e);

    public delegate void RoomHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.RoomHistoryRowChangeEvent e);

    public delegate void RoomInformationRowChangeEventHandler(
      object sender,
      TempDataSet.RoomInformationRowChangeEvent e);

    public delegate void RoomTypeTempRowChangeEventHandler(
      object sender,
      TempDataSet.RoomTypeTempRowChangeEvent e);

    public delegate void StaffTempRowChangeEventHandler(
      object sender,
      TempDataSet.StaffTempRowChangeEvent e);

    public delegate void SystemSetTempRowChangeEventHandler(
      object sender,
      TempDataSet.SystemSetTempRowChangeEvent e);

    public delegate void UnLockDoorByRoomNoRowChangeEventHandler(
      object sender,
      TempDataSet.UnLockDoorByRoomNoRowChangeEvent e);

    public delegate void UnlockDoorHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.UnlockDoorHistoryRowChangeEvent e);

    public delegate void UploadDataRowChangeEventHandler(
      object sender,
      TempDataSet.UploadDataRowChangeEvent e);

    public delegate void VacantStatus_TempRowChangeEventHandler(
      object sender,
      TempDataSet.VacantStatus_TempRowChangeEvent e);

    public delegate void ZoneTempRowChangeEventHandler(
      object sender,
      TempDataSet.ZoneTempRowChangeEvent e);

    public delegate void AccIssuedCardHistoryRowChangeEventHandler(
      object sender,
      TempDataSet.AccIssuedCardHistoryRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccBonusEntitleListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnRoomNo;
      private DataColumn columnChargeType;
      private DataColumn columnTempBld;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnBonusDate;
      private DataColumn columnRoomStart;
      private DataColumn columnEntitleDate;

      [DebuggerNonUserCode]
      public AccBonusEntitleListDataTable()
      {
        this.TableName = "AccBonusEntitleList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccBonusEntitleListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccBonusEntitleListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn BonusDateColumn => this.columnBonusDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [DebuggerNonUserCode]
      public DataColumn EntitleDateColumn => this.columnEntitleDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccBonusEntitleListRow this[int index]
      {
        get => (TempDataSet.AccBonusEntitleListRow) this.Rows[index];
      }

      public event TempDataSet.AccBonusEntitleListRowChangeEventHandler AccBonusEntitleListRowChanging;

      public event TempDataSet.AccBonusEntitleListRowChangeEventHandler AccBonusEntitleListRowChanged;

      public event TempDataSet.AccBonusEntitleListRowChangeEventHandler AccBonusEntitleListRowDeleting;

      public event TempDataSet.AccBonusEntitleListRowChangeEventHandler AccBonusEntitleListRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccBonusEntitleListRow(TempDataSet.AccBonusEntitleListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccBonusEntitleListRow AddAccBonusEntitleListRow(
        string ClientID,
        string RoomNo,
        string ChargeType,
        string TempBld,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        string BonusDate,
        DateTime RoomStart,
        DateTime EntitleDate)
      {
        TempDataSet.AccBonusEntitleListRow row = (TempDataSet.AccBonusEntitleListRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ClientID,
          (object) RoomNo,
          (object) ChargeType,
          (object) TempBld,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) BonusDate,
          (object) RoomStart,
          (object) EntitleDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccBonusEntitleListDataTable entitleListDataTable = (TempDataSet.AccBonusEntitleListDataTable) base.Clone();
        entitleListDataTable.InitVars();
        return (DataTable) entitleListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccBonusEntitleListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnBonusDate = this.Columns["BonusDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
        this.columnEntitleDate = this.Columns["EntitleDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnBonusDate = new DataColumn("BonusDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.columnEntitleDate = new DataColumn("EntitleDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEntitleDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnChargeType.MaxLength = 1;
        this.columnTempBld.MaxLength = 1;
        this.columnBonusDate.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccBonusEntitleListRow NewAccBonusEntitleListRow()
      {
        return (TempDataSet.AccBonusEntitleListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccBonusEntitleListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccBonusEntitleListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccBonusEntitleListRowChanged == null)
          return;
        this.AccBonusEntitleListRowChanged((object) this, new TempDataSet.AccBonusEntitleListRowChangeEvent((TempDataSet.AccBonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccBonusEntitleListRowChanging == null)
          return;
        this.AccBonusEntitleListRowChanging((object) this, new TempDataSet.AccBonusEntitleListRowChangeEvent((TempDataSet.AccBonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccBonusEntitleListRowDeleted == null)
          return;
        this.AccBonusEntitleListRowDeleted((object) this, new TempDataSet.AccBonusEntitleListRowChangeEvent((TempDataSet.AccBonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccBonusEntitleListRowDeleting == null)
          return;
        this.AccBonusEntitleListRowDeleting((object) this, new TempDataSet.AccBonusEntitleListRowChangeEvent((TempDataSet.AccBonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccBonusEntitleListRow(TempDataSet.AccBonusEntitleListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccBonusEntitleListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccCurrentGByFloorNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnLastPayment;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckOutDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public AccCurrentGByFloorNoDataTable()
      {
        this.TableName = "AccCurrentGByFloorNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccCurrentGByFloorNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccCurrentGByFloorNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGByFloorNoRow this[int index]
      {
        get => (TempDataSet.AccCurrentGByFloorNoRow) this.Rows[index];
      }

      public event TempDataSet.AccCurrentGByFloorNoRowChangeEventHandler AccCurrentGByFloorNoRowChanging;

      public event TempDataSet.AccCurrentGByFloorNoRowChangeEventHandler AccCurrentGByFloorNoRowChanged;

      public event TempDataSet.AccCurrentGByFloorNoRowChangeEventHandler AccCurrentGByFloorNoRowDeleting;

      public event TempDataSet.AccCurrentGByFloorNoRowChangeEventHandler AccCurrentGByFloorNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccCurrentGByFloorNoRow(TempDataSet.AccCurrentGByFloorNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGByFloorNoRow AddAccCurrentGByFloorNoRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string CardNo,
        Decimal LastPayment,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        DateTime CheckOutDate,
        DateTime RoomStart)
      {
        TempDataSet.AccCurrentGByFloorNoRow row = (TempDataSet.AccCurrentGByFloorNoRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) CardNo,
          (object) LastPayment,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckOutDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccCurrentGByFloorNoDataTable floorNoDataTable = (TempDataSet.AccCurrentGByFloorNoDataTable) base.Clone();
        floorNoDataTable.InitVars();
        return (DataTable) floorNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccCurrentGByFloorNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGByFloorNoRow NewAccCurrentGByFloorNoRow()
      {
        return (TempDataSet.AccCurrentGByFloorNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccCurrentGByFloorNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccCurrentGByFloorNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccCurrentGByFloorNoRowChanged == null)
          return;
        this.AccCurrentGByFloorNoRowChanged((object) this, new TempDataSet.AccCurrentGByFloorNoRowChangeEvent((TempDataSet.AccCurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccCurrentGByFloorNoRowChanging == null)
          return;
        this.AccCurrentGByFloorNoRowChanging((object) this, new TempDataSet.AccCurrentGByFloorNoRowChangeEvent((TempDataSet.AccCurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccCurrentGByFloorNoRowDeleted == null)
          return;
        this.AccCurrentGByFloorNoRowDeleted((object) this, new TempDataSet.AccCurrentGByFloorNoRowChangeEvent((TempDataSet.AccCurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccCurrentGByFloorNoRowDeleting == null)
          return;
        this.AccCurrentGByFloorNoRowDeleting((object) this, new TempDataSet.AccCurrentGByFloorNoRowChangeEvent((TempDataSet.AccCurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccCurrentGByFloorNoRow(TempDataSet.AccCurrentGByFloorNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccCurrentGByFloorNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccCurrentGInfoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnSex;
      private DataColumn columnIdentity;
      private DataColumn columnNationality;
      private DataColumn columnAddress;
      private DataColumn columnCountry;
      private DataColumn columnContact;

      [DebuggerNonUserCode]
      public AccCurrentGInfoDataTable()
      {
        this.TableName = "AccCurrentGInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccCurrentGInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccCurrentGInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn SexColumn => this.columnSex;

      [DebuggerNonUserCode]
      public DataColumn IdentityColumn => this.columnIdentity;

      [DebuggerNonUserCode]
      public DataColumn NationalityColumn => this.columnNationality;

      [DebuggerNonUserCode]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      public DataColumn ContactColumn => this.columnContact;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGInfoRow this[int index]
      {
        get => (TempDataSet.AccCurrentGInfoRow) this.Rows[index];
      }

      public event TempDataSet.AccCurrentGInfoRowChangeEventHandler AccCurrentGInfoRowChanging;

      public event TempDataSet.AccCurrentGInfoRowChangeEventHandler AccCurrentGInfoRowChanged;

      public event TempDataSet.AccCurrentGInfoRowChangeEventHandler AccCurrentGInfoRowDeleting;

      public event TempDataSet.AccCurrentGInfoRowChangeEventHandler AccCurrentGInfoRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccCurrentGInfoRow(TempDataSet.AccCurrentGInfoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGInfoRow AddAccCurrentGInfoRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string TempBld,
        string Sex,
        string Identity,
        string Nationality,
        string Address,
        string Country,
        string Contact)
      {
        TempDataSet.AccCurrentGInfoRow row = (TempDataSet.AccCurrentGInfoRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) TempBld,
          (object) Sex,
          (object) Identity,
          (object) Nationality,
          (object) Address,
          (object) Country,
          (object) Contact
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccCurrentGInfoDataTable currentGinfoDataTable = (TempDataSet.AccCurrentGInfoDataTable) base.Clone();
        currentGinfoDataTable.InitVars();
        return (DataTable) currentGinfoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccCurrentGInfoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnSex = this.Columns["Sex"];
        this.columnIdentity = this.Columns["Identity"];
        this.columnNationality = this.Columns["Nationality"];
        this.columnAddress = this.Columns["Address"];
        this.columnCountry = this.Columns["Country"];
        this.columnContact = this.Columns["Contact"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnSex = new DataColumn("Sex", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSex);
        this.columnIdentity = new DataColumn("Identity", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdentity);
        this.columnNationality = new DataColumn("Nationality", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNationality);
        this.columnAddress = new DataColumn("Address", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnContact = new DataColumn("Contact", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContact);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnSex.MaxLength = 1;
        this.columnIdentity.MaxLength = 20;
        this.columnNationality.MaxLength = 20;
        this.columnAddress.MaxLength = 50;
        this.columnCountry.MaxLength = 30;
        this.columnContact.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGInfoRow NewAccCurrentGInfoRow()
      {
        return (TempDataSet.AccCurrentGInfoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccCurrentGInfoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccCurrentGInfoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccCurrentGInfoRowChanged == null)
          return;
        this.AccCurrentGInfoRowChanged((object) this, new TempDataSet.AccCurrentGInfoRowChangeEvent((TempDataSet.AccCurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccCurrentGInfoRowChanging == null)
          return;
        this.AccCurrentGInfoRowChanging((object) this, new TempDataSet.AccCurrentGInfoRowChangeEvent((TempDataSet.AccCurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccCurrentGInfoRowDeleted == null)
          return;
        this.AccCurrentGInfoRowDeleted((object) this, new TempDataSet.AccCurrentGInfoRowChangeEvent((TempDataSet.AccCurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccCurrentGInfoRowDeleting == null)
          return;
        this.AccCurrentGInfoRowDeleting((object) this, new TempDataSet.AccCurrentGInfoRowChangeEvent((TempDataSet.AccCurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccCurrentGInfoRow(TempDataSet.AccCurrentGInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccCurrentGInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccErrorRecordsDataTable : DataTable, IEnumerable
    {
      private DataColumn columnPaymentNoteNo;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnErrDescription;
      private DataColumn columnErrAmount;
      private DataColumn columnBondErrDescription;
      private DataColumn columnBondErrAmount;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnCurrDate;
      private DataColumn columnCurrTime;
      private DataColumn columnStaffID;

      [DebuggerNonUserCode]
      public AccErrorRecordsDataTable()
      {
        this.TableName = "AccErrorRecords";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccErrorRecordsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccErrorRecordsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn PaymentNoteNoColumn => this.columnPaymentNoteNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ErrDescriptionColumn => this.columnErrDescription;

      [DebuggerNonUserCode]
      public DataColumn ErrAmountColumn => this.columnErrAmount;

      [DebuggerNonUserCode]
      public DataColumn BondErrDescriptionColumn => this.columnBondErrDescription;

      [DebuggerNonUserCode]
      public DataColumn BondErrAmountColumn => this.columnBondErrAmount;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn CurrDateColumn => this.columnCurrDate;

      [DebuggerNonUserCode]
      public DataColumn CurrTimeColumn => this.columnCurrTime;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccErrorRecordsRow this[int index]
      {
        get => (TempDataSet.AccErrorRecordsRow) this.Rows[index];
      }

      public event TempDataSet.AccErrorRecordsRowChangeEventHandler AccErrorRecordsRowChanging;

      public event TempDataSet.AccErrorRecordsRowChangeEventHandler AccErrorRecordsRowChanged;

      public event TempDataSet.AccErrorRecordsRowChangeEventHandler AccErrorRecordsRowDeleting;

      public event TempDataSet.AccErrorRecordsRowChangeEventHandler AccErrorRecordsRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccErrorRecordsRow(TempDataSet.AccErrorRecordsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccErrorRecordsRow AddAccErrorRecordsRow(
        int PaymentNoteNo,
        string RoomNo,
        string TempBld,
        string ErrDescription,
        Decimal ErrAmount,
        string BondErrDescription,
        Decimal BondErrAmount,
        string TransType,
        DateTime TransDate,
        string TransTime,
        DateTime CurrDate,
        string CurrTime,
        string StaffID)
      {
        TempDataSet.AccErrorRecordsRow row = (TempDataSet.AccErrorRecordsRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) PaymentNoteNo,
          (object) RoomNo,
          (object) TempBld,
          (object) ErrDescription,
          (object) ErrAmount,
          (object) BondErrDescription,
          (object) BondErrAmount,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) CurrDate,
          (object) CurrTime,
          (object) StaffID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccErrorRecordsDataTable recordsDataTable = (TempDataSet.AccErrorRecordsDataTable) base.Clone();
        recordsDataTable.InitVars();
        return (DataTable) recordsDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccErrorRecordsDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnPaymentNoteNo = this.Columns["PaymentNoteNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnErrDescription = this.Columns["ErrDescription"];
        this.columnErrAmount = this.Columns["ErrAmount"];
        this.columnBondErrDescription = this.Columns["BondErrDescription"];
        this.columnBondErrAmount = this.Columns["BondErrAmount"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnCurrDate = this.Columns["CurrDate"];
        this.columnCurrTime = this.Columns["CurrTime"];
        this.columnStaffID = this.Columns["StaffID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnPaymentNoteNo = new DataColumn("PaymentNoteNo", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPaymentNoteNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnErrDescription = new DataColumn("ErrDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrDescription);
        this.columnErrAmount = new DataColumn("ErrAmount", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrAmount);
        this.columnBondErrDescription = new DataColumn("BondErrDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBondErrDescription);
        this.columnBondErrAmount = new DataColumn("BondErrAmount", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBondErrAmount);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnCurrDate = new DataColumn("CurrDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCurrDate);
        this.columnCurrTime = new DataColumn("CurrTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCurrTime);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnErrDescription.MaxLength = 100;
        this.columnBondErrDescription.MaxLength = 100;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnCurrTime.MaxLength = 12;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccErrorRecordsRow NewAccErrorRecordsRow()
      {
        return (TempDataSet.AccErrorRecordsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccErrorRecordsRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccErrorRecordsRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccErrorRecordsRowChanged == null)
          return;
        this.AccErrorRecordsRowChanged((object) this, new TempDataSet.AccErrorRecordsRowChangeEvent((TempDataSet.AccErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccErrorRecordsRowChanging == null)
          return;
        this.AccErrorRecordsRowChanging((object) this, new TempDataSet.AccErrorRecordsRowChangeEvent((TempDataSet.AccErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccErrorRecordsRowDeleted == null)
          return;
        this.AccErrorRecordsRowDeleted((object) this, new TempDataSet.AccErrorRecordsRowChangeEvent((TempDataSet.AccErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccErrorRecordsRowDeleting == null)
          return;
        this.AccErrorRecordsRowDeleting((object) this, new TempDataSet.AccErrorRecordsRowChangeEvent((TempDataSet.AccErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccErrorRecordsRow(TempDataSet.AccErrorRecordsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccErrorRecordsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccExtraDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnReceiptID;
      private DataColumn columnClientID;
      private DataColumn columnTempBld;
      private DataColumn columnExDescription;
      private DataColumn columnExtraCharge;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;

      [DebuggerNonUserCode]
      public AccExtraDataTable()
      {
        this.TableName = "AccExtra";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccExtraDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccExtraDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ReceiptIDColumn => this.columnReceiptID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccExtraRow this[int index] => (TempDataSet.AccExtraRow) this.Rows[index];

      public event TempDataSet.AccExtraRowChangeEventHandler AccExtraRowChanging;

      public event TempDataSet.AccExtraRowChangeEventHandler AccExtraRowChanged;

      public event TempDataSet.AccExtraRowChangeEventHandler AccExtraRowDeleting;

      public event TempDataSet.AccExtraRowChangeEventHandler AccExtraRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccExtraRow(TempDataSet.AccExtraRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.AccExtraRow AddAccExtraRow(
        string RoomNo,
        int ReceiptID,
        string ClientID,
        string TempBld,
        string ExDescription,
        Decimal ExtraCharge,
        string TransType,
        DateTime TransDate,
        string TransTime)
      {
        TempDataSet.AccExtraRow row = (TempDataSet.AccExtraRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) RoomNo,
          (object) ReceiptID,
          (object) ClientID,
          (object) TempBld,
          (object) ExDescription,
          (object) ExtraCharge,
          (object) TransType,
          (object) TransDate,
          (object) TransTime
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccExtraDataTable accExtraDataTable = (TempDataSet.AccExtraDataTable) base.Clone();
        accExtraDataTable.InitVars();
        return (DataTable) accExtraDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccExtraDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnReceiptID = this.Columns["ReceiptID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnReceiptID = new DataColumn("ReceiptID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReceiptID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnTempBld.MaxLength = 1;
        this.columnExDescription.MaxLength = 50;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccExtraRow NewAccExtraRow() => (TempDataSet.AccExtraRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccExtraRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccExtraRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccExtraRowChanged == null)
          return;
        this.AccExtraRowChanged((object) this, new TempDataSet.AccExtraRowChangeEvent((TempDataSet.AccExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccExtraRowChanging == null)
          return;
        this.AccExtraRowChanging((object) this, new TempDataSet.AccExtraRowChangeEvent((TempDataSet.AccExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccExtraRowDeleted == null)
          return;
        this.AccExtraRowDeleted((object) this, new TempDataSet.AccExtraRowChangeEvent((TempDataSet.AccExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccExtraRowDeleting == null)
          return;
        this.AccExtraRowDeleting((object) this, new TempDataSet.AccExtraRowChangeEvent((TempDataSet.AccExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccExtraRow(TempDataSet.AccExtraRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccExtraDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGInfo_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public AccGInfo_TempDataTable()
      {
        this.TableName = "AccGInfo_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGInfo_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGInfo_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGInfo_TempRow this[int index]
      {
        get => (TempDataSet.AccGInfo_TempRow) this.Rows[index];
      }

      public event TempDataSet.AccGInfo_TempRowChangeEventHandler AccGInfo_TempRowChanging;

      public event TempDataSet.AccGInfo_TempRowChangeEventHandler AccGInfo_TempRowChanged;

      public event TempDataSet.AccGInfo_TempRowChangeEventHandler AccGInfo_TempRowDeleting;

      public event TempDataSet.AccGInfo_TempRowChangeEventHandler AccGInfo_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGInfo_TempRow(TempDataSet.AccGInfo_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGInfo_TempRow AddAccGInfo_TempRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string CardNo,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.AccGInfo_TempRow row = (TempDataSet.AccGInfo_TempRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) CardNo,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGInfo_TempDataTable ginfoTempDataTable = (TempDataSet.AccGInfo_TempDataTable) base.Clone();
        ginfoTempDataTable.InitVars();
        return (DataTable) ginfoTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGInfo_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGInfo_TempRow NewAccGInfo_TempRow()
      {
        return (TempDataSet.AccGInfo_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGInfo_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGInfo_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGInfo_TempRowChanged == null)
          return;
        this.AccGInfo_TempRowChanged((object) this, new TempDataSet.AccGInfo_TempRowChangeEvent((TempDataSet.AccGInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGInfo_TempRowChanging == null)
          return;
        this.AccGInfo_TempRowChanging((object) this, new TempDataSet.AccGInfo_TempRowChangeEvent((TempDataSet.AccGInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGInfo_TempRowDeleted == null)
          return;
        this.AccGInfo_TempRowDeleted((object) this, new TempDataSet.AccGInfo_TempRowChangeEvent((TempDataSet.AccGInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGInfo_TempRowDeleting == null)
          return;
        this.AccGInfo_TempRowDeleting((object) this, new TempDataSet.AccGInfo_TempRowChangeEvent((TempDataSet.AccGInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGInfo_TempRow(TempDataSet.AccGInfo_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGInfo_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGracePeriodListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnGracePeriod;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckOutDate;

      [DebuggerNonUserCode]
      public AccGracePeriodListDataTable()
      {
        this.TableName = "AccGracePeriodList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGracePeriodListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGracePeriodListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGracePeriodListRow this[int index]
      {
        get => (TempDataSet.AccGracePeriodListRow) this.Rows[index];
      }

      public event TempDataSet.AccGracePeriodListRowChangeEventHandler AccGracePeriodListRowChanging;

      public event TempDataSet.AccGracePeriodListRowChangeEventHandler AccGracePeriodListRowChanged;

      public event TempDataSet.AccGracePeriodListRowChangeEventHandler AccGracePeriodListRowDeleting;

      public event TempDataSet.AccGracePeriodListRowChangeEventHandler AccGracePeriodListRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGracePeriodListRow(TempDataSet.AccGracePeriodListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGracePeriodListRow AddAccGracePeriodListRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string TempBld,
        short GracePeriod,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckOutDate)
      {
        TempDataSet.AccGracePeriodListRow row = (TempDataSet.AccGracePeriodListRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) TempBld,
          (object) GracePeriod,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckOutDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGracePeriodListDataTable periodListDataTable = (TempDataSet.AccGracePeriodListDataTable) base.Clone();
        periodListDataTable.InitVars();
        return (DataTable) periodListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGracePeriodListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGracePeriodListRow NewAccGracePeriodListRow()
      {
        return (TempDataSet.AccGracePeriodListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGracePeriodListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGracePeriodListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGracePeriodListRowChanged == null)
          return;
        this.AccGracePeriodListRowChanged((object) this, new TempDataSet.AccGracePeriodListRowChangeEvent((TempDataSet.AccGracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGracePeriodListRowChanging == null)
          return;
        this.AccGracePeriodListRowChanging((object) this, new TempDataSet.AccGracePeriodListRowChangeEvent((TempDataSet.AccGracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGracePeriodListRowDeleted == null)
          return;
        this.AccGracePeriodListRowDeleted((object) this, new TempDataSet.AccGracePeriodListRowChangeEvent((TempDataSet.AccGracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGracePeriodListRowDeleting == null)
          return;
        this.AccGracePeriodListRowDeleting((object) this, new TempDataSet.AccGracePeriodListRowChangeEvent((TempDataSet.AccGracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGracePeriodListRow(TempDataSet.AccGracePeriodListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGracePeriodListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGuestAccountDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnCardNo;
      private DataColumn columnDeposit;
      private DataColumn columnBond;
      private DataColumn columnChargeType;
      private DataColumn columnLastPayment;
      private DataColumn columnAmountPaid;

      [DebuggerNonUserCode]
      public AccGuestAccountDataTable()
      {
        this.TableName = "AccGuestAccount";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGuestAccountDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGuestAccountDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn AmountPaidColumn => this.columnAmountPaid;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestAccountRow this[int index]
      {
        get => (TempDataSet.AccGuestAccountRow) this.Rows[index];
      }

      public event TempDataSet.AccGuestAccountRowChangeEventHandler AccGuestAccountRowChanging;

      public event TempDataSet.AccGuestAccountRowChangeEventHandler AccGuestAccountRowChanged;

      public event TempDataSet.AccGuestAccountRowChangeEventHandler AccGuestAccountRowDeleting;

      public event TempDataSet.AccGuestAccountRowChangeEventHandler AccGuestAccountRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGuestAccountRow(TempDataSet.AccGuestAccountRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestAccountRow AddAccGuestAccountRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string TempBld,
        string CardNo,
        Decimal Deposit,
        Decimal Bond,
        string ChargeType,
        Decimal LastPayment,
        Decimal AmountPaid)
      {
        TempDataSet.AccGuestAccountRow row = (TempDataSet.AccGuestAccountRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) TempBld,
          (object) CardNo,
          (object) Deposit,
          (object) Bond,
          (object) ChargeType,
          (object) LastPayment,
          (object) AmountPaid
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGuestAccountDataTable accountDataTable = (TempDataSet.AccGuestAccountDataTable) base.Clone();
        accountDataTable.InitVars();
        return (DataTable) accountDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGuestAccountDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnBond = this.Columns["Bond"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnAmountPaid = this.Columns["AmountPaid"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnAmountPaid = new DataColumn("AmountPaid", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAmountPaid);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnCardNo.MaxLength = 5;
        this.columnChargeType.MaxLength = 1;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestAccountRow NewAccGuestAccountRow()
      {
        return (TempDataSet.AccGuestAccountRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGuestAccountRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGuestAccountRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGuestAccountRowChanged == null)
          return;
        this.AccGuestAccountRowChanged((object) this, new TempDataSet.AccGuestAccountRowChangeEvent((TempDataSet.AccGuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGuestAccountRowChanging == null)
          return;
        this.AccGuestAccountRowChanging((object) this, new TempDataSet.AccGuestAccountRowChangeEvent((TempDataSet.AccGuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGuestAccountRowDeleted == null)
          return;
        this.AccGuestAccountRowDeleted((object) this, new TempDataSet.AccGuestAccountRowChangeEvent((TempDataSet.AccGuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGuestAccountRowDeleting == null)
          return;
        this.AccGuestAccountRowDeleting((object) this, new TempDataSet.AccGuestAccountRowChangeEvent((TempDataSet.AccGuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGuestAccountRow(TempDataSet.AccGuestAccountRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGuestAccountDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGuestHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnReserveRef;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnLastPayment;
      private DataColumn columnCheckInDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public AccGuestHistoryDataTable()
      {
        this.TableName = "AccGuestHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGuestHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGuestHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestHistoryRow this[int index]
      {
        get => (TempDataSet.AccGuestHistoryRow) this.Rows[index];
      }

      public event TempDataSet.AccGuestHistoryRowChangeEventHandler AccGuestHistoryRowChanging;

      public event TempDataSet.AccGuestHistoryRowChangeEventHandler AccGuestHistoryRowChanged;

      public event TempDataSet.AccGuestHistoryRowChangeEventHandler AccGuestHistoryRowDeleting;

      public event TempDataSet.AccGuestHistoryRowChangeEventHandler AccGuestHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGuestHistoryRow(TempDataSet.AccGuestHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestHistoryRow AddAccGuestHistoryRow(
        string ClientID,
        string ForeName,
        string SurName,
        string CardNo,
        string RoomNo,
        string TempBld,
        string ReserveRef,
        string TransType,
        DateTime TransDate,
        string TransTime,
        Decimal LastPayment,
        DateTime CheckInDate,
        DateTime RoomStart)
      {
        TempDataSet.AccGuestHistoryRow row = (TempDataSet.AccGuestHistoryRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardNo,
          (object) RoomNo,
          (object) TempBld,
          (object) ReserveRef,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) LastPayment,
          (object) CheckInDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGuestHistoryDataTable historyDataTable = (TempDataSet.AccGuestHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGuestHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnReserveRef.MaxLength = 10;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestHistoryRow NewAccGuestHistoryRow()
      {
        return (TempDataSet.AccGuestHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGuestHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGuestHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGuestHistoryRowChanged == null)
          return;
        this.AccGuestHistoryRowChanged((object) this, new TempDataSet.AccGuestHistoryRowChangeEvent((TempDataSet.AccGuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGuestHistoryRowChanging == null)
          return;
        this.AccGuestHistoryRowChanging((object) this, new TempDataSet.AccGuestHistoryRowChangeEvent((TempDataSet.AccGuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGuestHistoryRowDeleted == null)
          return;
        this.AccGuestHistoryRowDeleted((object) this, new TempDataSet.AccGuestHistoryRowChangeEvent((TempDataSet.AccGuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGuestHistoryRowDeleting == null)
          return;
        this.AccGuestHistoryRowDeleting((object) this, new TempDataSet.AccGuestHistoryRowChangeEvent((TempDataSet.AccGuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGuestHistoryRow(TempDataSet.AccGuestHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGuestHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGuestListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnClientType;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnTempBld;
      private DataColumn columnSex;
      private DataColumn columnIdentity;
      private DataColumn columnNationality;
      private DataColumn columnAddress;
      private DataColumn columnCountry;
      private DataColumn columnContact;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public AccGuestListDataTable()
      {
        this.TableName = "AccGuestList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGuestListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGuestListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ClientTypeColumn => this.columnClientType;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn SexColumn => this.columnSex;

      [DebuggerNonUserCode]
      public DataColumn IdentityColumn => this.columnIdentity;

      [DebuggerNonUserCode]
      public DataColumn NationalityColumn => this.columnNationality;

      [DebuggerNonUserCode]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      public DataColumn ContactColumn => this.columnContact;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestListRow this[int index]
      {
        get => (TempDataSet.AccGuestListRow) this.Rows[index];
      }

      public event TempDataSet.AccGuestListRowChangeEventHandler AccGuestListRowChanging;

      public event TempDataSet.AccGuestListRowChangeEventHandler AccGuestListRowChanged;

      public event TempDataSet.AccGuestListRowChangeEventHandler AccGuestListRowDeleting;

      public event TempDataSet.AccGuestListRowChangeEventHandler AccGuestListRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGuestListRow(TempDataSet.AccGuestListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestListRow AddAccGuestListRow(
        string ClientID,
        string ClientType,
        string ForeName,
        string SurName,
        string TempBld,
        string Sex,
        string Identity,
        string Nationality,
        string Address,
        string Country,
        string Contact,
        bool Update)
      {
        TempDataSet.AccGuestListRow row = (TempDataSet.AccGuestListRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) ClientID,
          (object) ClientType,
          (object) ForeName,
          (object) SurName,
          (object) TempBld,
          (object) Sex,
          (object) Identity,
          (object) Nationality,
          (object) Address,
          (object) Country,
          (object) Contact,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGuestListDataTable guestListDataTable = (TempDataSet.AccGuestListDataTable) base.Clone();
        guestListDataTable.InitVars();
        return (DataTable) guestListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGuestListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnClientType = this.Columns["ClientType"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnSex = this.Columns["Sex"];
        this.columnIdentity = this.Columns["Identity"];
        this.columnNationality = this.Columns["Nationality"];
        this.columnAddress = this.Columns["Address"];
        this.columnCountry = this.Columns["Country"];
        this.columnContact = this.Columns["Contact"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnClientType = new DataColumn("ClientType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientType);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnSex = new DataColumn("Sex", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSex);
        this.columnIdentity = new DataColumn("Identity", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdentity);
        this.columnNationality = new DataColumn("Nationality", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNationality);
        this.columnAddress = new DataColumn("Address", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnContact = new DataColumn("Contact", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContact);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnClientType.MaxLength = 2;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnTempBld.MaxLength = 1;
        this.columnSex.MaxLength = 1;
        this.columnIdentity.MaxLength = 20;
        this.columnNationality.MaxLength = 20;
        this.columnAddress.MaxLength = 50;
        this.columnCountry.MaxLength = 30;
        this.columnContact.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestListRow NewAccGuestListRow()
      {
        return (TempDataSet.AccGuestListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGuestListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGuestListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGuestListRowChanged == null)
          return;
        this.AccGuestListRowChanged((object) this, new TempDataSet.AccGuestListRowChangeEvent((TempDataSet.AccGuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGuestListRowChanging == null)
          return;
        this.AccGuestListRowChanging((object) this, new TempDataSet.AccGuestListRowChangeEvent((TempDataSet.AccGuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGuestListRowDeleted == null)
          return;
        this.AccGuestListRowDeleted((object) this, new TempDataSet.AccGuestListRowChangeEvent((TempDataSet.AccGuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGuestListRowDeleting == null)
          return;
        this.AccGuestListRowDeleting((object) this, new TempDataSet.AccGuestListRowChangeEvent((TempDataSet.AccGuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGuestListRow(TempDataSet.AccGuestListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGuestListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccGuestRecordDateDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnContractStart;
      private DataColumn columnContractEnd;
      private DataColumn columnGracePeriod;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckOutDate;
      private DataColumn columnBonusDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public AccGuestRecordDateDataTable()
      {
        this.TableName = "AccGuestRecordDate";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccGuestRecordDateDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccGuestRecordDateDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ContractStartColumn => this.columnContractStart;

      [DebuggerNonUserCode]
      public DataColumn ContractEndColumn => this.columnContractEnd;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn BonusDateColumn => this.columnBonusDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestRecordDateRow this[int index]
      {
        get => (TempDataSet.AccGuestRecordDateRow) this.Rows[index];
      }

      public event TempDataSet.AccGuestRecordDateRowChangeEventHandler AccGuestRecordDateRowChanging;

      public event TempDataSet.AccGuestRecordDateRowChangeEventHandler AccGuestRecordDateRowChanged;

      public event TempDataSet.AccGuestRecordDateRowChangeEventHandler AccGuestRecordDateRowDeleting;

      public event TempDataSet.AccGuestRecordDateRowChangeEventHandler AccGuestRecordDateRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccGuestRecordDateRow(TempDataSet.AccGuestRecordDateRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestRecordDateRow AddAccGuestRecordDateRow(
        string ClientID,
        string RoomNo,
        string TempBld,
        DateTime ContractStart,
        DateTime ContractEnd,
        short GracePeriod,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        DateTime CheckOutDate,
        string BonusDate,
        DateTime RoomStart)
      {
        TempDataSet.AccGuestRecordDateRow row = (TempDataSet.AccGuestRecordDateRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) ClientID,
          (object) RoomNo,
          (object) TempBld,
          (object) ContractStart,
          (object) ContractEnd,
          (object) GracePeriod,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckOutDate,
          (object) BonusDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccGuestRecordDateDataTable recordDateDataTable = (TempDataSet.AccGuestRecordDateDataTable) base.Clone();
        recordDateDataTable.InitVars();
        return (DataTable) recordDateDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccGuestRecordDateDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnContractStart = this.Columns["ContractStart"];
        this.columnContractEnd = this.Columns["ContractEnd"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnBonusDate = this.Columns["BonusDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnContractStart = new DataColumn("ContractStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractStart);
        this.columnContractEnd = new DataColumn("ContractEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractEnd);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnBonusDate = new DataColumn("BonusDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnBonusDate.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestRecordDateRow NewAccGuestRecordDateRow()
      {
        return (TempDataSet.AccGuestRecordDateRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccGuestRecordDateRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccGuestRecordDateRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccGuestRecordDateRowChanged == null)
          return;
        this.AccGuestRecordDateRowChanged((object) this, new TempDataSet.AccGuestRecordDateRowChangeEvent((TempDataSet.AccGuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccGuestRecordDateRowChanging == null)
          return;
        this.AccGuestRecordDateRowChanging((object) this, new TempDataSet.AccGuestRecordDateRowChangeEvent((TempDataSet.AccGuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccGuestRecordDateRowDeleted == null)
          return;
        this.AccGuestRecordDateRowDeleted((object) this, new TempDataSet.AccGuestRecordDateRowChangeEvent((TempDataSet.AccGuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccGuestRecordDateRowDeleting == null)
          return;
        this.AccGuestRecordDateRowDeleting((object) this, new TempDataSet.AccGuestRecordDateRowChangeEvent((TempDataSet.AccGuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccGuestRecordDateRow(TempDataSet.AccGuestRecordDateRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccGuestRecordDateDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccReservationListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnReserveRef;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnDeposit;
      private DataColumn columnReserveType;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public AccReservationListDataTable()
      {
        this.TableName = "AccReservationList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccReservationListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccReservationListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn ReserveTypeColumn => this.columnReserveType;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccReservationListRow this[int index]
      {
        get => (TempDataSet.AccReservationListRow) this.Rows[index];
      }

      public event TempDataSet.AccReservationListRowChangeEventHandler AccReservationListRowChanging;

      public event TempDataSet.AccReservationListRowChangeEventHandler AccReservationListRowChanged;

      public event TempDataSet.AccReservationListRowChangeEventHandler AccReservationListRowDeleting;

      public event TempDataSet.AccReservationListRowChangeEventHandler AccReservationListRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccReservationListRow(TempDataSet.AccReservationListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccReservationListRow AddAccReservationListRow(
        string ReserveRef,
        string RoomNo,
        string TempBld,
        string ClientID,
        string ForeName,
        string SurName,
        Decimal Deposit,
        string ReserveType,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.AccReservationListRow row = (TempDataSet.AccReservationListRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ReserveRef,
          (object) RoomNo,
          (object) TempBld,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) Deposit,
          (object) ReserveType,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccReservationListDataTable reservationListDataTable = (TempDataSet.AccReservationListDataTable) base.Clone();
        reservationListDataTable.InitVars();
        return (DataTable) reservationListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccReservationListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnReserveType = this.Columns["ReserveType"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnReserveType = new DataColumn("ReserveType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveType);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnReserveRef
        }, false));
        this.columnReserveRef.Unique = true;
        this.columnReserveRef.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReserveType.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccReservationListRow NewAccReservationListRow()
      {
        return (TempDataSet.AccReservationListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccReservationListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccReservationListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccReservationListRowChanged == null)
          return;
        this.AccReservationListRowChanged((object) this, new TempDataSet.AccReservationListRowChangeEvent((TempDataSet.AccReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccReservationListRowChanging == null)
          return;
        this.AccReservationListRowChanging((object) this, new TempDataSet.AccReservationListRowChangeEvent((TempDataSet.AccReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccReservationListRowDeleted == null)
          return;
        this.AccReservationListRowDeleted((object) this, new TempDataSet.AccReservationListRowChangeEvent((TempDataSet.AccReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccReservationListRowDeleting == null)
          return;
        this.AccReservationListRowDeleting((object) this, new TempDataSet.AccReservationListRowChangeEvent((TempDataSet.AccReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccReservationListRow(TempDataSet.AccReservationListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccReservationListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccRoomDetailDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnRmDescription;
      private DataColumn columnDescription;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public AccRoomDetailDataTable()
      {
        this.TableName = "AccRoomDetail";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccRoomDetailDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccRoomDetailDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomDetailRow this[int index]
      {
        get => (TempDataSet.AccRoomDetailRow) this.Rows[index];
      }

      public event TempDataSet.AccRoomDetailRowChangeEventHandler AccRoomDetailRowChanging;

      public event TempDataSet.AccRoomDetailRowChangeEventHandler AccRoomDetailRowChanged;

      public event TempDataSet.AccRoomDetailRowChangeEventHandler AccRoomDetailRowDeleting;

      public event TempDataSet.AccRoomDetailRowChangeEventHandler AccRoomDetailRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccRoomDetailRow(TempDataSet.AccRoomDetailRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomDetailRow AddAccRoomDetailRow(
        string RoomNo,
        string TempBld,
        string RmDescription,
        string Description,
        string ClientID,
        string ForeName,
        string SurName,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.AccRoomDetailRow row = (TempDataSet.AccRoomDetailRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) RoomNo,
          (object) TempBld,
          (object) RmDescription,
          (object) Description,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccRoomDetailDataTable roomDetailDataTable = (TempDataSet.AccRoomDetailDataTable) base.Clone();
        roomDetailDataTable.InitVars();
        return (DataTable) roomDetailDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccRoomDetailDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnDescription = this.Columns["Description"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnRmDescription.MaxLength = 30;
        this.columnDescription.MaxLength = 30;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomDetailRow NewAccRoomDetailRow()
      {
        return (TempDataSet.AccRoomDetailRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccRoomDetailRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccRoomDetailRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccRoomDetailRowChanged == null)
          return;
        this.AccRoomDetailRowChanged((object) this, new TempDataSet.AccRoomDetailRowChangeEvent((TempDataSet.AccRoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccRoomDetailRowChanging == null)
          return;
        this.AccRoomDetailRowChanging((object) this, new TempDataSet.AccRoomDetailRowChangeEvent((TempDataSet.AccRoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccRoomDetailRowDeleted == null)
          return;
        this.AccRoomDetailRowDeleted((object) this, new TempDataSet.AccRoomDetailRowChangeEvent((TempDataSet.AccRoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccRoomDetailRowDeleting == null)
          return;
        this.AccRoomDetailRowDeleting((object) this, new TempDataSet.AccRoomDetailRowChangeEvent((TempDataSet.AccRoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccRoomDetailRow(TempDataSet.AccRoomDetailRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccRoomDetailDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccRoomInformationDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnRmDescription;
      private DataColumn columnDescription;
      private DataColumn columnClientID;
      private DataColumn columnBuildingNo;
      private DataColumn columnFloorNo;
      private DataColumn columnDailyRate;
      private DataColumn columnWeeklyRate;
      private DataColumn columnMonthlyRate;
      private DataColumn columnDailyRate2;
      private DataColumn columnWeeklyRate2;
      private DataColumn columnMonthlyRate2;
      private DataColumn columnIssuedCard;

      [DebuggerNonUserCode]
      public AccRoomInformationDataTable()
      {
        this.TableName = "AccRoomInformation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccRoomInformationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccRoomInformationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn FloorNoColumn => this.columnFloorNo;

      [DebuggerNonUserCode]
      public DataColumn DailyRateColumn => this.columnDailyRate;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRateColumn => this.columnWeeklyRate;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRateColumn => this.columnMonthlyRate;

      [DebuggerNonUserCode]
      public DataColumn DailyRate2Column => this.columnDailyRate2;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRate2Column => this.columnWeeklyRate2;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRate2Column => this.columnMonthlyRate2;

      [DebuggerNonUserCode]
      public DataColumn IssuedCardColumn => this.columnIssuedCard;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomInformationRow this[int index]
      {
        get => (TempDataSet.AccRoomInformationRow) this.Rows[index];
      }

      public event TempDataSet.AccRoomInformationRowChangeEventHandler AccRoomInformationRowChanging;

      public event TempDataSet.AccRoomInformationRowChangeEventHandler AccRoomInformationRowChanged;

      public event TempDataSet.AccRoomInformationRowChangeEventHandler AccRoomInformationRowDeleting;

      public event TempDataSet.AccRoomInformationRowChangeEventHandler AccRoomInformationRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccRoomInformationRow(TempDataSet.AccRoomInformationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomInformationRow AddAccRoomInformationRow(
        string RoomNo,
        string RmDescription,
        string Description,
        string ClientID,
        string BuildingNo,
        string FloorNo,
        Decimal DailyRate,
        Decimal WeeklyRate,
        Decimal MonthlyRate,
        Decimal DailyRate2,
        Decimal WeeklyRate2,
        Decimal MonthlyRate2,
        short IssuedCard)
      {
        TempDataSet.AccRoomInformationRow row = (TempDataSet.AccRoomInformationRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) RoomNo,
          (object) RmDescription,
          (object) Description,
          (object) ClientID,
          (object) BuildingNo,
          (object) FloorNo,
          (object) DailyRate,
          (object) WeeklyRate,
          (object) MonthlyRate,
          (object) DailyRate2,
          (object) WeeklyRate2,
          (object) MonthlyRate2,
          (object) IssuedCard
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccRoomInformationDataTable informationDataTable = (TempDataSet.AccRoomInformationDataTable) base.Clone();
        informationDataTable.InitVars();
        return (DataTable) informationDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccRoomInformationDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnDescription = this.Columns["Description"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnFloorNo = this.Columns["FloorNo"];
        this.columnDailyRate = this.Columns["DailyRate"];
        this.columnWeeklyRate = this.Columns["WeeklyRate"];
        this.columnMonthlyRate = this.Columns["MonthlyRate"];
        this.columnDailyRate2 = this.Columns["DailyRate2"];
        this.columnWeeklyRate2 = this.Columns["WeeklyRate2"];
        this.columnMonthlyRate2 = this.Columns["MonthlyRate2"];
        this.columnIssuedCard = this.Columns["IssuedCard"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnFloorNo = new DataColumn("FloorNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFloorNo);
        this.columnDailyRate = new DataColumn("DailyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate);
        this.columnWeeklyRate = new DataColumn("WeeklyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate);
        this.columnMonthlyRate = new DataColumn("MonthlyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate);
        this.columnDailyRate2 = new DataColumn("DailyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate2);
        this.columnWeeklyRate2 = new DataColumn("WeeklyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate2);
        this.columnMonthlyRate2 = new DataColumn("MonthlyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate2);
        this.columnIssuedCard = new DataColumn("IssuedCard", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIssuedCard);
        this.columnRoomNo.MaxLength = 5;
        this.columnRmDescription.MaxLength = 30;
        this.columnDescription.MaxLength = 30;
        this.columnClientID.MaxLength = 10;
        this.columnBuildingNo.MaxLength = 2;
        this.columnFloorNo.MaxLength = 2;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomInformationRow NewAccRoomInformationRow()
      {
        return (TempDataSet.AccRoomInformationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccRoomInformationRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccRoomInformationRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccRoomInformationRowChanged == null)
          return;
        this.AccRoomInformationRowChanged((object) this, new TempDataSet.AccRoomInformationRowChangeEvent((TempDataSet.AccRoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccRoomInformationRowChanging == null)
          return;
        this.AccRoomInformationRowChanging((object) this, new TempDataSet.AccRoomInformationRowChangeEvent((TempDataSet.AccRoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccRoomInformationRowDeleted == null)
          return;
        this.AccRoomInformationRowDeleted((object) this, new TempDataSet.AccRoomInformationRowChangeEvent((TempDataSet.AccRoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccRoomInformationRowDeleting == null)
          return;
        this.AccRoomInformationRowDeleting((object) this, new TempDataSet.AccRoomInformationRowChangeEvent((TempDataSet.AccRoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccRoomInformationRow(TempDataSet.AccRoomInformationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccRoomInformationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AccSalesDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnTempMonth;
      private DataColumn columnCardNo;
      private DataColumn columnReserveRef;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnChargeType;
      private DataColumn columnPreviousAdvance;
      private DataColumn columnAdvancedPayment;
      private DataColumn columnBond;
      private DataColumn columnRBA;
      private DataColumn columnDeposit;
      private DataColumn columnKeyDeposit;
      private DataColumn columnExtraCharge;
      private DataColumn columnRoomCharge;
      private DataColumn columnBonusClaim;
      private DataColumn columnGST;
      private DataColumn columnLastPayment;
      private DataColumn columnStaffID;
      private DataColumn columnCheckInDate;
      private DataColumn columnContractStart;
      private DataColumn columnContractEnd;
      private DataColumn columnCheckOutDate;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public AccSalesDataTable()
      {
        this.TableName = "AccSales";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccSalesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccSalesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn TempMonthColumn => this.columnTempMonth;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn PreviousAdvanceColumn => this.columnPreviousAdvance;

      [DebuggerNonUserCode]
      public DataColumn AdvancedPaymentColumn => this.columnAdvancedPayment;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn RBAColumn => this.columnRBA;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn RoomChargeColumn => this.columnRoomCharge;

      [DebuggerNonUserCode]
      public DataColumn BonusClaimColumn => this.columnBonusClaim;

      [DebuggerNonUserCode]
      public DataColumn GSTColumn => this.columnGST;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn ContractStartColumn => this.columnContractStart;

      [DebuggerNonUserCode]
      public DataColumn ContractEndColumn => this.columnContractEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccSalesRow this[int index] => (TempDataSet.AccSalesRow) this.Rows[index];

      public event TempDataSet.AccSalesRowChangeEventHandler AccSalesRowChanging;

      public event TempDataSet.AccSalesRowChangeEventHandler AccSalesRowChanged;

      public event TempDataSet.AccSalesRowChangeEventHandler AccSalesRowDeleting;

      public event TempDataSet.AccSalesRowChangeEventHandler AccSalesRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccSalesRow(TempDataSet.AccSalesRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.AccSalesRow AddAccSalesRow(
        int TransID,
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string TempBld,
        string TempMonth,
        string CardNo,
        string ReserveRef,
        string TransType,
        DateTime TransDate,
        string ChargeType,
        Decimal PreviousAdvance,
        Decimal AdvancedPayment,
        Decimal Bond,
        Decimal RBA,
        Decimal Deposit,
        Decimal KeyDeposit,
        Decimal ExtraCharge,
        Decimal RoomCharge,
        Decimal BonusClaim,
        Decimal GST,
        Decimal LastPayment,
        string StaffID,
        DateTime CheckInDate,
        DateTime ContractStart,
        DateTime ContractEnd,
        DateTime CheckOutDate,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.AccSalesRow row = (TempDataSet.AccSalesRow) this.NewRow();
        object[] objArray = new object[30]
        {
          (object) TransID,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) TempBld,
          (object) TempMonth,
          (object) CardNo,
          (object) ReserveRef,
          (object) TransType,
          (object) TransDate,
          (object) ChargeType,
          (object) PreviousAdvance,
          (object) AdvancedPayment,
          (object) Bond,
          (object) RBA,
          (object) Deposit,
          (object) KeyDeposit,
          (object) ExtraCharge,
          (object) RoomCharge,
          (object) BonusClaim,
          (object) GST,
          (object) LastPayment,
          (object) StaffID,
          (object) CheckInDate,
          (object) ContractStart,
          (object) ContractEnd,
          (object) CheckOutDate,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccSalesDataTable accSalesDataTable = (TempDataSet.AccSalesDataTable) base.Clone();
        accSalesDataTable.InitVars();
        return (DataTable) accSalesDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccSalesDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnTempMonth = this.Columns["TempMonth"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnPreviousAdvance = this.Columns["PreviousAdvance"];
        this.columnAdvancedPayment = this.Columns["AdvancedPayment"];
        this.columnBond = this.Columns["Bond"];
        this.columnRBA = this.Columns["RBA"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnRoomCharge = this.Columns["RoomCharge"];
        this.columnBonusClaim = this.Columns["BonusClaim"];
        this.columnGST = this.Columns["GST"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnContractStart = this.Columns["ContractStart"];
        this.columnContractEnd = this.Columns["ContractEnd"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnTempMonth = new DataColumn("TempMonth", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempMonth);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnPreviousAdvance = new DataColumn("PreviousAdvance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPreviousAdvance);
        this.columnAdvancedPayment = new DataColumn("AdvancedPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAdvancedPayment);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnRBA = new DataColumn("RBA", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRBA);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnRoomCharge = new DataColumn("RoomCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomCharge);
        this.columnBonusClaim = new DataColumn("BonusClaim", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusClaim);
        this.columnGST = new DataColumn("GST", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGST);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnContractStart = new DataColumn("ContractStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractStart);
        this.columnContractEnd = new DataColumn("ContractEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractEnd);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnTempMonth.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnReserveRef.MaxLength = 10;
        this.columnTransType.MaxLength = 2;
        this.columnChargeType.MaxLength = 1;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccSalesRow NewAccSalesRow() => (TempDataSet.AccSalesRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccSalesRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccSalesRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccSalesRowChanged == null)
          return;
        this.AccSalesRowChanged((object) this, new TempDataSet.AccSalesRowChangeEvent((TempDataSet.AccSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccSalesRowChanging == null)
          return;
        this.AccSalesRowChanging((object) this, new TempDataSet.AccSalesRowChangeEvent((TempDataSet.AccSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccSalesRowDeleted == null)
          return;
        this.AccSalesRowDeleted((object) this, new TempDataSet.AccSalesRowChangeEvent((TempDataSet.AccSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccSalesRowDeleting == null)
          return;
        this.AccSalesRowDeleting((object) this, new TempDataSet.AccSalesRowChangeEvent((TempDataSet.AccSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccSalesRow(TempDataSet.AccSalesRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccSalesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccTransDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnClientID;
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnCondition;
      private DataColumn columnTempBld;
      private DataColumn columnReserveRef;
      private DataColumn columnOldRoom;
      private DataColumn columnPreviousAdvance;
      private DataColumn columnAdvancedPayment;
      private DataColumn columnBalance;
      private DataColumn columnBond;
      private DataColumn columnRBA;
      private DataColumn columnDeposit;
      private DataColumn columnKeyDeposit;
      private DataColumn columnExtraCharge;
      private DataColumn columnExDescription;
      private DataColumn columnRoomCharge;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckInTime;
      private DataColumn columnCheckOutTime;
      private DataColumn columnCheckOutDate;
      private DataColumn columnChargeType;
      private DataColumn columnGracePeriod;
      private DataColumn columnBonusClaim;
      private DataColumn columnGST;
      private DataColumn columnLastPayment;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public AccTransDataTable()
      {
        this.TableName = "AccTrans";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccTransDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccTransDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ConditionColumn => this.columnCondition;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn OldRoomColumn => this.columnOldRoom;

      [DebuggerNonUserCode]
      public DataColumn PreviousAdvanceColumn => this.columnPreviousAdvance;

      [DebuggerNonUserCode]
      public DataColumn AdvancedPaymentColumn => this.columnAdvancedPayment;

      [DebuggerNonUserCode]
      public DataColumn BalanceColumn => this.columnBalance;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn RBAColumn => this.columnRBA;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn RoomChargeColumn => this.columnRoomCharge;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckInTimeColumn => this.columnCheckInTime;

      [DebuggerNonUserCode]
      public DataColumn CheckOutTimeColumn => this.columnCheckOutTime;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn BonusClaimColumn => this.columnBonusClaim;

      [DebuggerNonUserCode]
      public DataColumn GSTColumn => this.columnGST;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccTransRow this[int index] => (TempDataSet.AccTransRow) this.Rows[index];

      public event TempDataSet.AccTransRowChangeEventHandler AccTransRowChanging;

      public event TempDataSet.AccTransRowChangeEventHandler AccTransRowChanged;

      public event TempDataSet.AccTransRowChangeEventHandler AccTransRowDeleting;

      public event TempDataSet.AccTransRowChangeEventHandler AccTransRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccTransRow(TempDataSet.AccTransRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.AccTransRow AddAccTransRow(
        int TransID,
        string ClientID,
        string CardNo,
        string CardType,
        string RoomNo,
        string Condition,
        string TempBld,
        string ReserveRef,
        string OldRoom,
        Decimal PreviousAdvance,
        Decimal AdvancedPayment,
        Decimal Balance,
        Decimal Bond,
        Decimal RBA,
        Decimal Deposit,
        Decimal KeyDeposit,
        Decimal ExtraCharge,
        string ExDescription,
        Decimal RoomCharge,
        string TransType,
        DateTime TransDate,
        string TransTime,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        string CheckInTime,
        string CheckOutTime,
        DateTime CheckOutDate,
        string ChargeType,
        short GracePeriod,
        Decimal BonusClaim,
        Decimal GST,
        Decimal LastPayment,
        string StaffID,
        bool Update)
      {
        TempDataSet.AccTransRow row = (TempDataSet.AccTransRow) this.NewRow();
        object[] objArray = new object[35]
        {
          (object) TransID,
          (object) ClientID,
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) Condition,
          (object) TempBld,
          (object) ReserveRef,
          (object) OldRoom,
          (object) PreviousAdvance,
          (object) AdvancedPayment,
          (object) Balance,
          (object) Bond,
          (object) RBA,
          (object) Deposit,
          (object) KeyDeposit,
          (object) ExtraCharge,
          (object) ExDescription,
          (object) RoomCharge,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckInTime,
          (object) CheckOutTime,
          (object) CheckOutDate,
          (object) ChargeType,
          (object) GracePeriod,
          (object) BonusClaim,
          (object) GST,
          (object) LastPayment,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccTransDataTable accTransDataTable = (TempDataSet.AccTransDataTable) base.Clone();
        accTransDataTable.InitVars();
        return (DataTable) accTransDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccTransDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCondition = this.Columns["Condition"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnOldRoom = this.Columns["OldRoom"];
        this.columnPreviousAdvance = this.Columns["PreviousAdvance"];
        this.columnAdvancedPayment = this.Columns["AdvancedPayment"];
        this.columnBalance = this.Columns["Balance"];
        this.columnBond = this.Columns["Bond"];
        this.columnRBA = this.Columns["RBA"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnRoomCharge = this.Columns["RoomCharge"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckInTime = this.Columns["CheckInTime"];
        this.columnCheckOutTime = this.Columns["CheckOutTime"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnBonusClaim = this.Columns["BonusClaim"];
        this.columnGST = this.Columns["GST"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCondition = new DataColumn("Condition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCondition);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnOldRoom = new DataColumn("OldRoom", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOldRoom);
        this.columnPreviousAdvance = new DataColumn("PreviousAdvance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPreviousAdvance);
        this.columnAdvancedPayment = new DataColumn("AdvancedPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAdvancedPayment);
        this.columnBalance = new DataColumn("Balance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBalance);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnRBA = new DataColumn("RBA", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRBA);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnRoomCharge = new DataColumn("RoomCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomCharge);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckInTime = new DataColumn("CheckInTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInTime);
        this.columnCheckOutTime = new DataColumn("CheckOutTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutTime);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnBonusClaim = new DataColumn("BonusClaim", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusClaim);
        this.columnGST = new DataColumn("GST", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGST);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnClientID.MaxLength = 10;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnCondition.MaxLength = 20;
        this.columnTempBld.MaxLength = 1;
        this.columnReserveRef.MaxLength = 10;
        this.columnOldRoom.MaxLength = 5;
        this.columnExDescription.MaxLength = 30;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnCheckInTime.MaxLength = 12;
        this.columnCheckOutTime.MaxLength = 12;
        this.columnChargeType.MaxLength = 1;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccTransRow NewAccTransRow() => (TempDataSet.AccTransRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccTransRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccTransRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccTransRowChanged == null)
          return;
        this.AccTransRowChanged((object) this, new TempDataSet.AccTransRowChangeEvent((TempDataSet.AccTransRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccTransRowChanging == null)
          return;
        this.AccTransRowChanging((object) this, new TempDataSet.AccTransRowChangeEvent((TempDataSet.AccTransRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccTransRowDeleted == null)
          return;
        this.AccTransRowDeleted((object) this, new TempDataSet.AccTransRowChangeEvent((TempDataSet.AccTransRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccTransRowDeleting == null)
          return;
        this.AccTransRowDeleting((object) this, new TempDataSet.AccTransRowChangeEvent((TempDataSet.AccTransRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccTransRow(TempDataSet.AccTransRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccTransDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AvailableRoom_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnRmDescription;
      private DataColumn columnFloorNo;
      private DataColumn columnBuildingNo;
      private DataColumn columnDailyRate;
      private DataColumn columnWeeklyRate;
      private DataColumn columnMonthlyRate;
      private DataColumn columnDailyRate2;
      private DataColumn columnWeeklyRate2;
      private DataColumn columnMonthlyRate2;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      public AvailableRoom_TempDataTable()
      {
        this.TableName = "AvailableRoom_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AvailableRoom_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AvailableRoom_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn FloorNoColumn => this.columnFloorNo;

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn DailyRateColumn => this.columnDailyRate;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRateColumn => this.columnWeeklyRate;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRateColumn => this.columnMonthlyRate;

      [DebuggerNonUserCode]
      public DataColumn DailyRate2Column => this.columnDailyRate2;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRate2Column => this.columnWeeklyRate2;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRate2Column => this.columnMonthlyRate2;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AvailableRoom_TempRow this[int index]
      {
        get => (TempDataSet.AvailableRoom_TempRow) this.Rows[index];
      }

      public event TempDataSet.AvailableRoom_TempRowChangeEventHandler AvailableRoom_TempRowChanging;

      public event TempDataSet.AvailableRoom_TempRowChangeEventHandler AvailableRoom_TempRowChanged;

      public event TempDataSet.AvailableRoom_TempRowChangeEventHandler AvailableRoom_TempRowDeleting;

      public event TempDataSet.AvailableRoom_TempRowChangeEventHandler AvailableRoom_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddAvailableRoom_TempRow(TempDataSet.AvailableRoom_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AvailableRoom_TempRow AddAvailableRoom_TempRow(
        string RoomNo,
        string RmDescription,
        string FloorNo,
        string BuildingNo,
        Decimal DailyRate,
        Decimal WeeklyRate,
        Decimal MonthlyRate,
        Decimal DailyRate2,
        Decimal WeeklyRate2,
        Decimal MonthlyRate2,
        string Description)
      {
        TempDataSet.AvailableRoom_TempRow row = (TempDataSet.AvailableRoom_TempRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) RoomNo,
          (object) RmDescription,
          (object) FloorNo,
          (object) BuildingNo,
          (object) DailyRate,
          (object) WeeklyRate,
          (object) MonthlyRate,
          (object) DailyRate2,
          (object) WeeklyRate2,
          (object) MonthlyRate2,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AvailableRoom_TempDataTable roomTempDataTable = (TempDataSet.AvailableRoom_TempDataTable) base.Clone();
        roomTempDataTable.InitVars();
        return (DataTable) roomTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AvailableRoom_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnFloorNo = this.Columns["FloorNo"];
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnDailyRate = this.Columns["DailyRate"];
        this.columnWeeklyRate = this.Columns["WeeklyRate"];
        this.columnMonthlyRate = this.Columns["MonthlyRate"];
        this.columnDailyRate2 = this.Columns["DailyRate2"];
        this.columnWeeklyRate2 = this.Columns["WeeklyRate2"];
        this.columnMonthlyRate2 = this.Columns["MonthlyRate2"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnFloorNo = new DataColumn("FloorNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFloorNo);
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnDailyRate = new DataColumn("DailyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate);
        this.columnWeeklyRate = new DataColumn("WeeklyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate);
        this.columnMonthlyRate = new DataColumn("MonthlyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate);
        this.columnDailyRate2 = new DataColumn("DailyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate2);
        this.columnWeeklyRate2 = new DataColumn("WeeklyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate2);
        this.columnMonthlyRate2 = new DataColumn("MonthlyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate2);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnRoomNo.MaxLength = 5;
        this.columnRmDescription.MaxLength = 30;
        this.columnFloorNo.MaxLength = 2;
        this.columnBuildingNo.MaxLength = 2;
        this.columnDescription.MaxLength = 30;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AvailableRoom_TempRow NewAvailableRoom_TempRow()
      {
        return (TempDataSet.AvailableRoom_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AvailableRoom_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AvailableRoom_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AvailableRoom_TempRowChanged == null)
          return;
        this.AvailableRoom_TempRowChanged((object) this, new TempDataSet.AvailableRoom_TempRowChangeEvent((TempDataSet.AvailableRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AvailableRoom_TempRowChanging == null)
          return;
        this.AvailableRoom_TempRowChanging((object) this, new TempDataSet.AvailableRoom_TempRowChangeEvent((TempDataSet.AvailableRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AvailableRoom_TempRowDeleted == null)
          return;
        this.AvailableRoom_TempRowDeleted((object) this, new TempDataSet.AvailableRoom_TempRowChangeEvent((TempDataSet.AvailableRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AvailableRoom_TempRowDeleting == null)
          return;
        this.AvailableRoom_TempRowDeleting((object) this, new TempDataSet.AvailableRoom_TempRowChangeEvent((TempDataSet.AvailableRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAvailableRoom_TempRow(TempDataSet.AvailableRoom_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AvailableRoom_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class Banking_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCodeDesc;
      private DataColumn columnChequeNo;
      private DataColumn columnAmount;
      private DataColumn columnDate;
      private DataColumn columnTime;
      private DataColumn columnOperator;

      [DebuggerNonUserCode]
      public Banking_TempDataTable()
      {
        this.TableName = "Banking_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal Banking_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected Banking_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CodeDescColumn => this.columnCodeDesc;

      [DebuggerNonUserCode]
      public DataColumn ChequeNoColumn => this.columnChequeNo;

      [DebuggerNonUserCode]
      public DataColumn AmountColumn => this.columnAmount;

      [DebuggerNonUserCode]
      public DataColumn DateColumn => this.columnDate;

      [DebuggerNonUserCode]
      public DataColumn TimeColumn => this.columnTime;

      [DebuggerNonUserCode]
      public DataColumn OperatorColumn => this.columnOperator;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.Banking_TempRow this[int index]
      {
        get => (TempDataSet.Banking_TempRow) this.Rows[index];
      }

      public event TempDataSet.Banking_TempRowChangeEventHandler Banking_TempRowChanging;

      public event TempDataSet.Banking_TempRowChangeEventHandler Banking_TempRowChanged;

      public event TempDataSet.Banking_TempRowChangeEventHandler Banking_TempRowDeleting;

      public event TempDataSet.Banking_TempRowChangeEventHandler Banking_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddBanking_TempRow(TempDataSet.Banking_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.Banking_TempRow AddBanking_TempRow(
        string CodeDesc,
        string ChequeNo,
        Decimal Amount,
        DateTime Date,
        string Time,
        string Operator)
      {
        TempDataSet.Banking_TempRow row = (TempDataSet.Banking_TempRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) CodeDesc,
          (object) ChequeNo,
          (object) Amount,
          (object) Date,
          (object) Time,
          (object) Operator
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.Banking_TempDataTable bankingTempDataTable = (TempDataSet.Banking_TempDataTable) base.Clone();
        bankingTempDataTable.InitVars();
        return (DataTable) bankingTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.Banking_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCodeDesc = this.Columns["CodeDesc"];
        this.columnChequeNo = this.Columns["ChequeNo"];
        this.columnAmount = this.Columns["Amount"];
        this.columnDate = this.Columns["Date"];
        this.columnTime = this.Columns["Time"];
        this.columnOperator = this.Columns["Operator"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCodeDesc = new DataColumn("CodeDesc", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeDesc);
        this.columnChequeNo = new DataColumn("ChequeNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChequeNo);
        this.columnAmount = new DataColumn("Amount", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAmount);
        this.columnDate = new DataColumn("Date", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDate);
        this.columnTime = new DataColumn("Time", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTime);
        this.columnOperator = new DataColumn("Operator", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOperator);
        this.columnCodeDesc.MaxLength = 10;
        this.columnChequeNo.MaxLength = 30;
        this.columnTime.MaxLength = 12;
        this.columnOperator.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.Banking_TempRow NewBanking_TempRow()
      {
        return (TempDataSet.Banking_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.Banking_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.Banking_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.Banking_TempRowChanged == null)
          return;
        this.Banking_TempRowChanged((object) this, new TempDataSet.Banking_TempRowChangeEvent((TempDataSet.Banking_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.Banking_TempRowChanging == null)
          return;
        this.Banking_TempRowChanging((object) this, new TempDataSet.Banking_TempRowChangeEvent((TempDataSet.Banking_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.Banking_TempRowDeleted == null)
          return;
        this.Banking_TempRowDeleted((object) this, new TempDataSet.Banking_TempRowChangeEvent((TempDataSet.Banking_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.Banking_TempRowDeleting == null)
          return;
        this.Banking_TempRowDeleting((object) this, new TempDataSet.Banking_TempRowChangeEvent((TempDataSet.Banking_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveBanking_TempRow(TempDataSet.Banking_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (Banking_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class BonusEntitleListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnRoomNo;
      private DataColumn columnChargeType;
      private DataColumn columnTempBld;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnBonusDate;
      private DataColumn columnRoomStart;
      private DataColumn columnEntitleDate;

      [DebuggerNonUserCode]
      public BonusEntitleListDataTable()
      {
        this.TableName = "BonusEntitleList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal BonusEntitleListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected BonusEntitleListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn BonusDateColumn => this.columnBonusDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [DebuggerNonUserCode]
      public DataColumn EntitleDateColumn => this.columnEntitleDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.BonusEntitleListRow this[int index]
      {
        get => (TempDataSet.BonusEntitleListRow) this.Rows[index];
      }

      public event TempDataSet.BonusEntitleListRowChangeEventHandler BonusEntitleListRowChanging;

      public event TempDataSet.BonusEntitleListRowChangeEventHandler BonusEntitleListRowChanged;

      public event TempDataSet.BonusEntitleListRowChangeEventHandler BonusEntitleListRowDeleting;

      public event TempDataSet.BonusEntitleListRowChangeEventHandler BonusEntitleListRowDeleted;

      [DebuggerNonUserCode]
      public void AddBonusEntitleListRow(TempDataSet.BonusEntitleListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.BonusEntitleListRow AddBonusEntitleListRow(
        string ClientID,
        string RoomNo,
        string ChargeType,
        string TempBld,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        string BonusDate,
        DateTime RoomStart,
        DateTime EntitleDate)
      {
        TempDataSet.BonusEntitleListRow row = (TempDataSet.BonusEntitleListRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ClientID,
          (object) RoomNo,
          (object) ChargeType,
          (object) TempBld,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) BonusDate,
          (object) RoomStart,
          (object) EntitleDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.BonusEntitleListDataTable entitleListDataTable = (TempDataSet.BonusEntitleListDataTable) base.Clone();
        entitleListDataTable.InitVars();
        return (DataTable) entitleListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.BonusEntitleListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnBonusDate = this.Columns["BonusDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
        this.columnEntitleDate = this.Columns["EntitleDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnBonusDate = new DataColumn("BonusDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.columnEntitleDate = new DataColumn("EntitleDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEntitleDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnChargeType.MaxLength = 1;
        this.columnTempBld.MaxLength = 1;
        this.columnBonusDate.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.BonusEntitleListRow NewBonusEntitleListRow()
      {
        return (TempDataSet.BonusEntitleListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.BonusEntitleListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.BonusEntitleListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.BonusEntitleListRowChanged == null)
          return;
        this.BonusEntitleListRowChanged((object) this, new TempDataSet.BonusEntitleListRowChangeEvent((TempDataSet.BonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.BonusEntitleListRowChanging == null)
          return;
        this.BonusEntitleListRowChanging((object) this, new TempDataSet.BonusEntitleListRowChangeEvent((TempDataSet.BonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.BonusEntitleListRowDeleted == null)
          return;
        this.BonusEntitleListRowDeleted((object) this, new TempDataSet.BonusEntitleListRowChangeEvent((TempDataSet.BonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.BonusEntitleListRowDeleting == null)
          return;
        this.BonusEntitleListRowDeleting((object) this, new TempDataSet.BonusEntitleListRowChangeEvent((TempDataSet.BonusEntitleListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveBonusEntitleListRow(TempDataSet.BonusEntitleListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (BonusEntitleListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class BonusTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnStayType;
      private DataColumn columnStayLength;
      private DataColumn columnBonusType;
      private DataColumn columnBonusLength;
      private DataColumn columnBonusStart;
      private DataColumn columnDateUpdate;
      private DataColumn columnStaff;

      [DebuggerNonUserCode]
      public BonusTempDataTable()
      {
        this.TableName = "BonusTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal BonusTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected BonusTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn StayTypeColumn => this.columnStayType;

      [DebuggerNonUserCode]
      public DataColumn StayLengthColumn => this.columnStayLength;

      [DebuggerNonUserCode]
      public DataColumn BonusTypeColumn => this.columnBonusType;

      [DebuggerNonUserCode]
      public DataColumn BonusLengthColumn => this.columnBonusLength;

      [DebuggerNonUserCode]
      public DataColumn BonusStartColumn => this.columnBonusStart;

      [DebuggerNonUserCode]
      public DataColumn DateUpdateColumn => this.columnDateUpdate;

      [DebuggerNonUserCode]
      public DataColumn StaffColumn => this.columnStaff;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.BonusTempRow this[int index]
      {
        get => (TempDataSet.BonusTempRow) this.Rows[index];
      }

      public event TempDataSet.BonusTempRowChangeEventHandler BonusTempRowChanging;

      public event TempDataSet.BonusTempRowChangeEventHandler BonusTempRowChanged;

      public event TempDataSet.BonusTempRowChangeEventHandler BonusTempRowDeleting;

      public event TempDataSet.BonusTempRowChangeEventHandler BonusTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddBonusTempRow(TempDataSet.BonusTempRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.BonusTempRow AddBonusTempRow(
        string StayType,
        short StayLength,
        string BonusType,
        short BonusLength,
        string BonusStart,
        string DateUpdate,
        string Staff)
      {
        TempDataSet.BonusTempRow row = (TempDataSet.BonusTempRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) StayType,
          (object) StayLength,
          (object) BonusType,
          (object) BonusLength,
          (object) BonusStart,
          (object) DateUpdate,
          (object) Staff
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.BonusTempDataTable bonusTempDataTable = (TempDataSet.BonusTempDataTable) base.Clone();
        bonusTempDataTable.InitVars();
        return (DataTable) bonusTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.BonusTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnStayType = this.Columns["StayType"];
        this.columnStayLength = this.Columns["StayLength"];
        this.columnBonusType = this.Columns["BonusType"];
        this.columnBonusLength = this.Columns["BonusLength"];
        this.columnBonusStart = this.Columns["BonusStart"];
        this.columnDateUpdate = this.Columns["DateUpdate"];
        this.columnStaff = this.Columns["Staff"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnStayType = new DataColumn("StayType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStayType);
        this.columnStayLength = new DataColumn("StayLength", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStayLength);
        this.columnBonusType = new DataColumn("BonusType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusType);
        this.columnBonusLength = new DataColumn("BonusLength", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusLength);
        this.columnBonusStart = new DataColumn("BonusStart", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusStart);
        this.columnDateUpdate = new DataColumn("DateUpdate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateUpdate);
        this.columnStaff = new DataColumn("Staff", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaff);
        this.columnStayType.MaxLength = 1;
        this.columnBonusType.MaxLength = 50;
        this.columnBonusStart.MaxLength = 10;
        this.columnDateUpdate.MaxLength = 10;
        this.columnStaff.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      public TempDataSet.BonusTempRow NewBonusTempRow() => (TempDataSet.BonusTempRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.BonusTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.BonusTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.BonusTempRowChanged == null)
          return;
        this.BonusTempRowChanged((object) this, new TempDataSet.BonusTempRowChangeEvent((TempDataSet.BonusTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.BonusTempRowChanging == null)
          return;
        this.BonusTempRowChanging((object) this, new TempDataSet.BonusTempRowChangeEvent((TempDataSet.BonusTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.BonusTempRowDeleted == null)
          return;
        this.BonusTempRowDeleted((object) this, new TempDataSet.BonusTempRowChangeEvent((TempDataSet.BonusTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.BonusTempRowDeleting == null)
          return;
        this.BonusTempRowDeleting((object) this, new TempDataSet.BonusTempRowChangeEvent((TempDataSet.BonusTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveBonusTempRow(TempDataSet.BonusTempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (BonusTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class CheckRoom_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnRmDescription;
      private DataColumn columnFloorNo;
      private DataColumn columnBuildingNo;
      private DataColumn columnCondition;
      private DataColumn columnDailyRate;
      private DataColumn columnWeeklyRate;
      private DataColumn columnMonthlyRate;
      private DataColumn columnDailyRate2;
      private DataColumn columnWeeklyRate2;
      private DataColumn columnMonthlyRate2;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      public CheckRoom_TempDataTable()
      {
        this.TableName = "CheckRoom_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal CheckRoom_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected CheckRoom_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn FloorNoColumn => this.columnFloorNo;

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn ConditionColumn => this.columnCondition;

      [DebuggerNonUserCode]
      public DataColumn DailyRateColumn => this.columnDailyRate;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRateColumn => this.columnWeeklyRate;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRateColumn => this.columnMonthlyRate;

      [DebuggerNonUserCode]
      public DataColumn DailyRate2Column => this.columnDailyRate2;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRate2Column => this.columnWeeklyRate2;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRate2Column => this.columnMonthlyRate2;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.CheckRoom_TempRow this[int index]
      {
        get => (TempDataSet.CheckRoom_TempRow) this.Rows[index];
      }

      public event TempDataSet.CheckRoom_TempRowChangeEventHandler CheckRoom_TempRowChanging;

      public event TempDataSet.CheckRoom_TempRowChangeEventHandler CheckRoom_TempRowChanged;

      public event TempDataSet.CheckRoom_TempRowChangeEventHandler CheckRoom_TempRowDeleting;

      public event TempDataSet.CheckRoom_TempRowChangeEventHandler CheckRoom_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddCheckRoom_TempRow(TempDataSet.CheckRoom_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.CheckRoom_TempRow AddCheckRoom_TempRow(
        string RoomNo,
        string RmDescription,
        string FloorNo,
        string BuildingNo,
        string Condition,
        Decimal DailyRate,
        Decimal WeeklyRate,
        Decimal MonthlyRate,
        Decimal DailyRate2,
        Decimal WeeklyRate2,
        Decimal MonthlyRate2,
        string Description)
      {
        TempDataSet.CheckRoom_TempRow row = (TempDataSet.CheckRoom_TempRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) RoomNo,
          (object) RmDescription,
          (object) FloorNo,
          (object) BuildingNo,
          (object) Condition,
          (object) DailyRate,
          (object) WeeklyRate,
          (object) MonthlyRate,
          (object) DailyRate2,
          (object) WeeklyRate2,
          (object) MonthlyRate2,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.CheckRoom_TempDataTable roomTempDataTable = (TempDataSet.CheckRoom_TempDataTable) base.Clone();
        roomTempDataTable.InitVars();
        return (DataTable) roomTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.CheckRoom_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnFloorNo = this.Columns["FloorNo"];
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnCondition = this.Columns["Condition"];
        this.columnDailyRate = this.Columns["DailyRate"];
        this.columnWeeklyRate = this.Columns["WeeklyRate"];
        this.columnMonthlyRate = this.Columns["MonthlyRate"];
        this.columnDailyRate2 = this.Columns["DailyRate2"];
        this.columnWeeklyRate2 = this.Columns["WeeklyRate2"];
        this.columnMonthlyRate2 = this.Columns["MonthlyRate2"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnFloorNo = new DataColumn("FloorNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFloorNo);
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnCondition = new DataColumn("Condition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCondition);
        this.columnDailyRate = new DataColumn("DailyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate);
        this.columnWeeklyRate = new DataColumn("WeeklyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate);
        this.columnMonthlyRate = new DataColumn("MonthlyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate);
        this.columnDailyRate2 = new DataColumn("DailyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate2);
        this.columnWeeklyRate2 = new DataColumn("WeeklyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate2);
        this.columnMonthlyRate2 = new DataColumn("MonthlyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate2);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnRoomNo.MaxLength = 5;
        this.columnRmDescription.MaxLength = 30;
        this.columnFloorNo.MaxLength = 2;
        this.columnBuildingNo.MaxLength = 2;
        this.columnCondition.MaxLength = 20;
        this.columnDescription.MaxLength = 30;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CheckRoom_TempRow NewCheckRoom_TempRow()
      {
        return (TempDataSet.CheckRoom_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.CheckRoom_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.CheckRoom_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CheckRoom_TempRowChanged == null)
          return;
        this.CheckRoom_TempRowChanged((object) this, new TempDataSet.CheckRoom_TempRowChangeEvent((TempDataSet.CheckRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CheckRoom_TempRowChanging == null)
          return;
        this.CheckRoom_TempRowChanging((object) this, new TempDataSet.CheckRoom_TempRowChangeEvent((TempDataSet.CheckRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CheckRoom_TempRowDeleted == null)
          return;
        this.CheckRoom_TempRowDeleted((object) this, new TempDataSet.CheckRoom_TempRowChangeEvent((TempDataSet.CheckRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CheckRoom_TempRowDeleting == null)
          return;
        this.CheckRoom_TempRowDeleting((object) this, new TempDataSet.CheckRoom_TempRowChangeEvent((TempDataSet.CheckRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveCheckRoom_TempRow(TempDataSet.CheckRoom_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CheckRoom_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CurrentGByFloorNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnLastPayment;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckOutDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public CurrentGByFloorNoDataTable()
      {
        this.TableName = "CurrentGByFloorNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal CurrentGByFloorNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected CurrentGByFloorNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGByFloorNoRow this[int index]
      {
        get => (TempDataSet.CurrentGByFloorNoRow) this.Rows[index];
      }

      public event TempDataSet.CurrentGByFloorNoRowChangeEventHandler CurrentGByFloorNoRowChanging;

      public event TempDataSet.CurrentGByFloorNoRowChangeEventHandler CurrentGByFloorNoRowChanged;

      public event TempDataSet.CurrentGByFloorNoRowChangeEventHandler CurrentGByFloorNoRowDeleting;

      public event TempDataSet.CurrentGByFloorNoRowChangeEventHandler CurrentGByFloorNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddCurrentGByFloorNoRow(TempDataSet.CurrentGByFloorNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGByFloorNoRow AddCurrentGByFloorNoRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string CardNo,
        Decimal LastPayment,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        DateTime CheckOutDate,
        DateTime RoomStart)
      {
        TempDataSet.CurrentGByFloorNoRow row = (TempDataSet.CurrentGByFloorNoRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) CardNo,
          (object) LastPayment,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckOutDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.CurrentGByFloorNoDataTable floorNoDataTable = (TempDataSet.CurrentGByFloorNoDataTable) base.Clone();
        floorNoDataTable.InitVars();
        return (DataTable) floorNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.CurrentGByFloorNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGByFloorNoRow NewCurrentGByFloorNoRow()
      {
        return (TempDataSet.CurrentGByFloorNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.CurrentGByFloorNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.CurrentGByFloorNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CurrentGByFloorNoRowChanged == null)
          return;
        this.CurrentGByFloorNoRowChanged((object) this, new TempDataSet.CurrentGByFloorNoRowChangeEvent((TempDataSet.CurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CurrentGByFloorNoRowChanging == null)
          return;
        this.CurrentGByFloorNoRowChanging((object) this, new TempDataSet.CurrentGByFloorNoRowChangeEvent((TempDataSet.CurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CurrentGByFloorNoRowDeleted == null)
          return;
        this.CurrentGByFloorNoRowDeleted((object) this, new TempDataSet.CurrentGByFloorNoRowChangeEvent((TempDataSet.CurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CurrentGByFloorNoRowDeleting == null)
          return;
        this.CurrentGByFloorNoRowDeleting((object) this, new TempDataSet.CurrentGByFloorNoRowChangeEvent((TempDataSet.CurrentGByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveCurrentGByFloorNoRow(TempDataSet.CurrentGByFloorNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CurrentGByFloorNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CurrentGInfoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnSex;
      private DataColumn columnIdentity;
      private DataColumn columnNationality;
      private DataColumn columnAddress;
      private DataColumn columnCountry;
      private DataColumn columnContact;

      [DebuggerNonUserCode]
      public CurrentGInfoDataTable()
      {
        this.TableName = "CurrentGInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal CurrentGInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected CurrentGInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn SexColumn => this.columnSex;

      [DebuggerNonUserCode]
      public DataColumn IdentityColumn => this.columnIdentity;

      [DebuggerNonUserCode]
      public DataColumn NationalityColumn => this.columnNationality;

      [DebuggerNonUserCode]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      public DataColumn ContactColumn => this.columnContact;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGInfoRow this[int index]
      {
        get => (TempDataSet.CurrentGInfoRow) this.Rows[index];
      }

      public event TempDataSet.CurrentGInfoRowChangeEventHandler CurrentGInfoRowChanging;

      public event TempDataSet.CurrentGInfoRowChangeEventHandler CurrentGInfoRowChanged;

      public event TempDataSet.CurrentGInfoRowChangeEventHandler CurrentGInfoRowDeleting;

      public event TempDataSet.CurrentGInfoRowChangeEventHandler CurrentGInfoRowDeleted;

      [DebuggerNonUserCode]
      public void AddCurrentGInfoRow(TempDataSet.CurrentGInfoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGInfoRow AddCurrentGInfoRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string Sex,
        string Identity,
        string Nationality,
        string Address,
        string Country,
        string Contact)
      {
        TempDataSet.CurrentGInfoRow row = (TempDataSet.CurrentGInfoRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) Sex,
          (object) Identity,
          (object) Nationality,
          (object) Address,
          (object) Country,
          (object) Contact
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.CurrentGInfoDataTable currentGinfoDataTable = (TempDataSet.CurrentGInfoDataTable) base.Clone();
        currentGinfoDataTable.InitVars();
        return (DataTable) currentGinfoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.CurrentGInfoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnSex = this.Columns["Sex"];
        this.columnIdentity = this.Columns["Identity"];
        this.columnNationality = this.Columns["Nationality"];
        this.columnAddress = this.Columns["Address"];
        this.columnCountry = this.Columns["Country"];
        this.columnContact = this.Columns["Contact"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnSex = new DataColumn("Sex", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSex);
        this.columnIdentity = new DataColumn("Identity", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdentity);
        this.columnNationality = new DataColumn("Nationality", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNationality);
        this.columnAddress = new DataColumn("Address", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnContact = new DataColumn("Contact", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContact);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnSex.MaxLength = 1;
        this.columnIdentity.MaxLength = 20;
        this.columnNationality.MaxLength = 20;
        this.columnAddress.MaxLength = 50;
        this.columnCountry.MaxLength = 30;
        this.columnContact.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGInfoRow NewCurrentGInfoRow()
      {
        return (TempDataSet.CurrentGInfoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.CurrentGInfoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.CurrentGInfoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CurrentGInfoRowChanged == null)
          return;
        this.CurrentGInfoRowChanged((object) this, new TempDataSet.CurrentGInfoRowChangeEvent((TempDataSet.CurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CurrentGInfoRowChanging == null)
          return;
        this.CurrentGInfoRowChanging((object) this, new TempDataSet.CurrentGInfoRowChangeEvent((TempDataSet.CurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CurrentGInfoRowDeleted == null)
          return;
        this.CurrentGInfoRowDeleted((object) this, new TempDataSet.CurrentGInfoRowChangeEvent((TempDataSet.CurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CurrentGInfoRowDeleting == null)
          return;
        this.CurrentGInfoRowDeleting((object) this, new TempDataSet.CurrentGInfoRowChangeEvent((TempDataSet.CurrentGInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveCurrentGInfoRow(TempDataSet.CurrentGInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CurrentGInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class DetailGuestIssuedDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardStatus;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public DetailGuestIssuedDataTable()
      {
        this.TableName = "DetailGuestIssued";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal DetailGuestIssuedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected DetailGuestIssuedDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.DetailGuestIssuedRow this[int index]
      {
        get => (TempDataSet.DetailGuestIssuedRow) this.Rows[index];
      }

      public event TempDataSet.DetailGuestIssuedRowChangeEventHandler DetailGuestIssuedRowChanging;

      public event TempDataSet.DetailGuestIssuedRowChangeEventHandler DetailGuestIssuedRowChanged;

      public event TempDataSet.DetailGuestIssuedRowChangeEventHandler DetailGuestIssuedRowDeleting;

      public event TempDataSet.DetailGuestIssuedRowChangeEventHandler DetailGuestIssuedRowDeleted;

      [DebuggerNonUserCode]
      public void AddDetailGuestIssuedRow(TempDataSet.DetailGuestIssuedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.DetailGuestIssuedRow AddDetailGuestIssuedRow(
        string CardNo,
        string CardType,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        byte CardStatus,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.DetailGuestIssuedRow row = (TempDataSet.DetailGuestIssuedRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardStatus,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.DetailGuestIssuedDataTable guestIssuedDataTable = (TempDataSet.DetailGuestIssuedDataTable) base.Clone();
        guestIssuedDataTable.InitVars();
        return (DataTable) guestIssuedDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.DetailGuestIssuedDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DetailGuestIssuedRow NewDetailGuestIssuedRow()
      {
        return (TempDataSet.DetailGuestIssuedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.DetailGuestIssuedRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.DetailGuestIssuedRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DetailGuestIssuedRowChanged == null)
          return;
        this.DetailGuestIssuedRowChanged((object) this, new TempDataSet.DetailGuestIssuedRowChangeEvent((TempDataSet.DetailGuestIssuedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DetailGuestIssuedRowChanging == null)
          return;
        this.DetailGuestIssuedRowChanging((object) this, new TempDataSet.DetailGuestIssuedRowChangeEvent((TempDataSet.DetailGuestIssuedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DetailGuestIssuedRowDeleted == null)
          return;
        this.DetailGuestIssuedRowDeleted((object) this, new TempDataSet.DetailGuestIssuedRowChangeEvent((TempDataSet.DetailGuestIssuedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DetailGuestIssuedRowDeleting == null)
          return;
        this.DetailGuestIssuedRowDeleting((object) this, new TempDataSet.DetailGuestIssuedRowChangeEvent((TempDataSet.DetailGuestIssuedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveDetailGuestIssuedRow(TempDataSet.DetailGuestIssuedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DetailGuestIssuedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DisplayRooms_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnDailyRate;
      private DataColumn columnWeeklyRate;
      private DataColumn columnMonthlyRate;
      private DataColumn columnDailyRate2;
      private DataColumn columnWeeklyRate2;
      private DataColumn columnMonthlyRate2;
      private DataColumn columnIssuedCard;
      private DataColumn columnDescription;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public DisplayRooms_TempDataTable()
      {
        this.TableName = "DisplayRooms_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal DisplayRooms_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected DisplayRooms_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn DailyRateColumn => this.columnDailyRate;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRateColumn => this.columnWeeklyRate;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRateColumn => this.columnMonthlyRate;

      [DebuggerNonUserCode]
      public DataColumn DailyRate2Column => this.columnDailyRate2;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRate2Column => this.columnWeeklyRate2;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRate2Column => this.columnMonthlyRate2;

      [DebuggerNonUserCode]
      public DataColumn IssuedCardColumn => this.columnIssuedCard;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.DisplayRooms_TempRow this[int index]
      {
        get => (TempDataSet.DisplayRooms_TempRow) this.Rows[index];
      }

      public event TempDataSet.DisplayRooms_TempRowChangeEventHandler DisplayRooms_TempRowChanging;

      public event TempDataSet.DisplayRooms_TempRowChangeEventHandler DisplayRooms_TempRowChanged;

      public event TempDataSet.DisplayRooms_TempRowChangeEventHandler DisplayRooms_TempRowDeleting;

      public event TempDataSet.DisplayRooms_TempRowChangeEventHandler DisplayRooms_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddDisplayRooms_TempRow(TempDataSet.DisplayRooms_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.DisplayRooms_TempRow AddDisplayRooms_TempRow(
        string RoomNo,
        Decimal DailyRate,
        Decimal WeeklyRate,
        Decimal MonthlyRate,
        Decimal DailyRate2,
        Decimal WeeklyRate2,
        Decimal MonthlyRate2,
        byte IssuedCard,
        string Description,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.DisplayRooms_TempRow row = (TempDataSet.DisplayRooms_TempRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) RoomNo,
          (object) DailyRate,
          (object) WeeklyRate,
          (object) MonthlyRate,
          (object) DailyRate2,
          (object) WeeklyRate2,
          (object) MonthlyRate2,
          (object) IssuedCard,
          (object) Description,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.DisplayRooms_TempDataTable roomsTempDataTable = (TempDataSet.DisplayRooms_TempDataTable) base.Clone();
        roomsTempDataTable.InitVars();
        return (DataTable) roomsTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.DisplayRooms_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnDailyRate = this.Columns["DailyRate"];
        this.columnWeeklyRate = this.Columns["WeeklyRate"];
        this.columnMonthlyRate = this.Columns["MonthlyRate"];
        this.columnDailyRate2 = this.Columns["DailyRate2"];
        this.columnWeeklyRate2 = this.Columns["WeeklyRate2"];
        this.columnMonthlyRate2 = this.Columns["MonthlyRate2"];
        this.columnIssuedCard = this.Columns["IssuedCard"];
        this.columnDescription = this.Columns["Description"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnDailyRate = new DataColumn("DailyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate);
        this.columnWeeklyRate = new DataColumn("WeeklyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate);
        this.columnMonthlyRate = new DataColumn("MonthlyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate);
        this.columnDailyRate2 = new DataColumn("DailyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate2);
        this.columnWeeklyRate2 = new DataColumn("WeeklyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate2);
        this.columnMonthlyRate2 = new DataColumn("MonthlyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate2);
        this.columnIssuedCard = new DataColumn("IssuedCard", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIssuedCard);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.columnRoomNo.MaxLength = 5;
        this.columnDescription.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DisplayRooms_TempRow NewDisplayRooms_TempRow()
      {
        return (TempDataSet.DisplayRooms_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.DisplayRooms_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.DisplayRooms_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DisplayRooms_TempRowChanged == null)
          return;
        this.DisplayRooms_TempRowChanged((object) this, new TempDataSet.DisplayRooms_TempRowChangeEvent((TempDataSet.DisplayRooms_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DisplayRooms_TempRowChanging == null)
          return;
        this.DisplayRooms_TempRowChanging((object) this, new TempDataSet.DisplayRooms_TempRowChangeEvent((TempDataSet.DisplayRooms_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DisplayRooms_TempRowDeleted == null)
          return;
        this.DisplayRooms_TempRowDeleted((object) this, new TempDataSet.DisplayRooms_TempRowChangeEvent((TempDataSet.DisplayRooms_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DisplayRooms_TempRowDeleting == null)
          return;
        this.DisplayRooms_TempRowDeleting((object) this, new TempDataSet.DisplayRooms_TempRowChangeEvent((TempDataSet.DisplayRooms_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveDisplayRooms_TempRow(TempDataSet.DisplayRooms_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DisplayRooms_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class DLogDataTable : DataTable, IEnumerable
    {
      private DataColumn columnStaffID;
      private DataColumn columnLogDate;
      private DataColumn columnInTime;
      private DataColumn columnOutTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public DLogDataTable()
      {
        this.TableName = "DLog";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal DLogDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected DLogDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn LogDateColumn => this.columnLogDate;

      [DebuggerNonUserCode]
      public DataColumn InTimeColumn => this.columnInTime;

      [DebuggerNonUserCode]
      public DataColumn OutTimeColumn => this.columnOutTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.DLogRow this[int index] => (TempDataSet.DLogRow) this.Rows[index];

      public event TempDataSet.DLogRowChangeEventHandler DLogRowChanging;

      public event TempDataSet.DLogRowChangeEventHandler DLogRowChanged;

      public event TempDataSet.DLogRowChangeEventHandler DLogRowDeleting;

      public event TempDataSet.DLogRowChangeEventHandler DLogRowDeleted;

      [DebuggerNonUserCode]
      public void AddDLogRow(TempDataSet.DLogRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.DLogRow AddDLogRow(
        string StaffID,
        DateTime LogDate,
        string InTime,
        string OutTime,
        bool Update)
      {
        TempDataSet.DLogRow row = (TempDataSet.DLogRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) StaffID,
          (object) LogDate,
          (object) InTime,
          (object) OutTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.DLogDataTable dlogDataTable = (TempDataSet.DLogDataTable) base.Clone();
        dlogDataTable.InitVars();
        return (DataTable) dlogDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance() => (DataTable) new TempDataSet.DLogDataTable();

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnStaffID = this.Columns["StaffID"];
        this.columnLogDate = this.Columns["LogDate"];
        this.columnInTime = this.Columns["InTime"];
        this.columnOutTime = this.Columns["OutTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnLogDate = new DataColumn("LogDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLogDate);
        this.columnInTime = new DataColumn("InTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInTime);
        this.columnOutTime = new DataColumn("OutTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOutTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnStaffID.MaxLength = 10;
        this.columnInTime.MaxLength = 12;
        this.columnOutTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DLogRow NewDLogRow() => (TempDataSet.DLogRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.DLogRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.DLogRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DLogRowChanged == null)
          return;
        this.DLogRowChanged((object) this, new TempDataSet.DLogRowChangeEvent((TempDataSet.DLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DLogRowChanging == null)
          return;
        this.DLogRowChanging((object) this, new TempDataSet.DLogRowChangeEvent((TempDataSet.DLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DLogRowDeleted == null)
          return;
        this.DLogRowDeleted((object) this, new TempDataSet.DLogRowChangeEvent((TempDataSet.DLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DLogRowDeleting == null)
          return;
        this.DLogRowDeleting((object) this, new TempDataSet.DLogRowChangeEvent((TempDataSet.DLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveDLogRow(TempDataSet.DLogRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DLogDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class DTransactionsDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnClientID;
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnCondition;
      private DataColumn columnReserveRef;
      private DataColumn columnOldRoom;
      private DataColumn columnPreviousAdvance;
      private DataColumn columnAdvancedPayment;
      private DataColumn columnBalance;
      private DataColumn columnBond;
      private DataColumn columnRBA;
      private DataColumn columnDeposit;
      private DataColumn columnKeyDeposit;
      private DataColumn columnExtraCharge;
      private DataColumn columnExDescription;
      private DataColumn columnRoomCharge;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckInTime;
      private DataColumn columnCheckOutTime;
      private DataColumn columnCheckOutDate;
      private DataColumn columnChargeType;
      private DataColumn columnGracePeriod;
      private DataColumn columnBonusClaim;
      private DataColumn columnGST;
      private DataColumn columnLastPayment;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public DTransactionsDataTable()
      {
        this.TableName = "DTransactions";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal DTransactionsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected DTransactionsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ConditionColumn => this.columnCondition;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn OldRoomColumn => this.columnOldRoom;

      [DebuggerNonUserCode]
      public DataColumn PreviousAdvanceColumn => this.columnPreviousAdvance;

      [DebuggerNonUserCode]
      public DataColumn AdvancedPaymentColumn => this.columnAdvancedPayment;

      [DebuggerNonUserCode]
      public DataColumn BalanceColumn => this.columnBalance;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn RBAColumn => this.columnRBA;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn RoomChargeColumn => this.columnRoomCharge;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckInTimeColumn => this.columnCheckInTime;

      [DebuggerNonUserCode]
      public DataColumn CheckOutTimeColumn => this.columnCheckOutTime;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn BonusClaimColumn => this.columnBonusClaim;

      [DebuggerNonUserCode]
      public DataColumn GSTColumn => this.columnGST;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.DTransactionsRow this[int index]
      {
        get => (TempDataSet.DTransactionsRow) this.Rows[index];
      }

      public event TempDataSet.DTransactionsRowChangeEventHandler DTransactionsRowChanging;

      public event TempDataSet.DTransactionsRowChangeEventHandler DTransactionsRowChanged;

      public event TempDataSet.DTransactionsRowChangeEventHandler DTransactionsRowDeleting;

      public event TempDataSet.DTransactionsRowChangeEventHandler DTransactionsRowDeleted;

      [DebuggerNonUserCode]
      public void AddDTransactionsRow(TempDataSet.DTransactionsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.DTransactionsRow AddDTransactionsRow(
        int TransID,
        string ClientID,
        string CardNo,
        string CardType,
        string RoomNo,
        string Condition,
        string ReserveRef,
        string OldRoom,
        Decimal PreviousAdvance,
        Decimal AdvancedPayment,
        Decimal Balance,
        Decimal Bond,
        Decimal RBA,
        Decimal Deposit,
        Decimal KeyDeposit,
        Decimal ExtraCharge,
        string ExDescription,
        Decimal RoomCharge,
        string TransType,
        DateTime TransDate,
        string TransTime,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        string CheckInTime,
        string CheckOutTime,
        DateTime CheckOutDate,
        string ChargeType,
        short GracePeriod,
        Decimal BonusClaim,
        Decimal GST,
        Decimal LastPayment,
        string StaffID,
        bool Update)
      {
        TempDataSet.DTransactionsRow row = (TempDataSet.DTransactionsRow) this.NewRow();
        object[] objArray = new object[34]
        {
          (object) TransID,
          (object) ClientID,
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) Condition,
          (object) ReserveRef,
          (object) OldRoom,
          (object) PreviousAdvance,
          (object) AdvancedPayment,
          (object) Balance,
          (object) Bond,
          (object) RBA,
          (object) Deposit,
          (object) KeyDeposit,
          (object) ExtraCharge,
          (object) ExDescription,
          (object) RoomCharge,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckInTime,
          (object) CheckOutTime,
          (object) CheckOutDate,
          (object) ChargeType,
          (object) GracePeriod,
          (object) BonusClaim,
          (object) GST,
          (object) LastPayment,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.DTransactionsDataTable dtransactionsDataTable = (TempDataSet.DTransactionsDataTable) base.Clone();
        dtransactionsDataTable.InitVars();
        return (DataTable) dtransactionsDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.DTransactionsDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCondition = this.Columns["Condition"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnOldRoom = this.Columns["OldRoom"];
        this.columnPreviousAdvance = this.Columns["PreviousAdvance"];
        this.columnAdvancedPayment = this.Columns["AdvancedPayment"];
        this.columnBalance = this.Columns["Balance"];
        this.columnBond = this.Columns["Bond"];
        this.columnRBA = this.Columns["RBA"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnRoomCharge = this.Columns["RoomCharge"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckInTime = this.Columns["CheckInTime"];
        this.columnCheckOutTime = this.Columns["CheckOutTime"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnBonusClaim = this.Columns["BonusClaim"];
        this.columnGST = this.Columns["GST"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCondition = new DataColumn("Condition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCondition);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnOldRoom = new DataColumn("OldRoom", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOldRoom);
        this.columnPreviousAdvance = new DataColumn("PreviousAdvance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPreviousAdvance);
        this.columnAdvancedPayment = new DataColumn("AdvancedPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAdvancedPayment);
        this.columnBalance = new DataColumn("Balance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBalance);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnRBA = new DataColumn("RBA", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRBA);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnRoomCharge = new DataColumn("RoomCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomCharge);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckInTime = new DataColumn("CheckInTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInTime);
        this.columnCheckOutTime = new DataColumn("CheckOutTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutTime);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnBonusClaim = new DataColumn("BonusClaim", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusClaim);
        this.columnGST = new DataColumn("GST", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGST);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTransID
        }, false));
        this.columnTransID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnCondition.MaxLength = 20;
        this.columnReserveRef.MaxLength = 10;
        this.columnOldRoom.MaxLength = 5;
        this.columnExDescription.MaxLength = 30;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnCheckInTime.MaxLength = 12;
        this.columnCheckOutTime.MaxLength = 12;
        this.columnChargeType.MaxLength = 1;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DTransactionsRow NewDTransactionsRow()
      {
        return (TempDataSet.DTransactionsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.DTransactionsRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.DTransactionsRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DTransactionsRowChanged == null)
          return;
        this.DTransactionsRowChanged((object) this, new TempDataSet.DTransactionsRowChangeEvent((TempDataSet.DTransactionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DTransactionsRowChanging == null)
          return;
        this.DTransactionsRowChanging((object) this, new TempDataSet.DTransactionsRowChangeEvent((TempDataSet.DTransactionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DTransactionsRowDeleted == null)
          return;
        this.DTransactionsRowDeleted((object) this, new TempDataSet.DTransactionsRowChangeEvent((TempDataSet.DTransactionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DTransactionsRowDeleting == null)
          return;
        this.DTransactionsRowDeleting((object) this, new TempDataSet.DTransactionsRowChangeEvent((TempDataSet.DTransactionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveDTransactionsRow(TempDataSet.DTransactionsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DTransactionsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ErrorRecordsDataTable : DataTable, IEnumerable
    {
      private DataColumn columnPaymentNoteNo;
      private DataColumn columnRoomNo;
      private DataColumn columnErrDescription;
      private DataColumn columnErrAmount;
      private DataColumn columnBondErrDescription;
      private DataColumn columnBondErrAmount;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnCurrDate;
      private DataColumn columnCurrTime;
      private DataColumn columnStaffID;

      [DebuggerNonUserCode]
      public ErrorRecordsDataTable()
      {
        this.TableName = "ErrorRecords";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ErrorRecordsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ErrorRecordsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn PaymentNoteNoColumn => this.columnPaymentNoteNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ErrDescriptionColumn => this.columnErrDescription;

      [DebuggerNonUserCode]
      public DataColumn ErrAmountColumn => this.columnErrAmount;

      [DebuggerNonUserCode]
      public DataColumn BondErrDescriptionColumn => this.columnBondErrDescription;

      [DebuggerNonUserCode]
      public DataColumn BondErrAmountColumn => this.columnBondErrAmount;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn CurrDateColumn => this.columnCurrDate;

      [DebuggerNonUserCode]
      public DataColumn CurrTimeColumn => this.columnCurrTime;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ErrorRecordsRow this[int index]
      {
        get => (TempDataSet.ErrorRecordsRow) this.Rows[index];
      }

      public event TempDataSet.ErrorRecordsRowChangeEventHandler ErrorRecordsRowChanging;

      public event TempDataSet.ErrorRecordsRowChangeEventHandler ErrorRecordsRowChanged;

      public event TempDataSet.ErrorRecordsRowChangeEventHandler ErrorRecordsRowDeleting;

      public event TempDataSet.ErrorRecordsRowChangeEventHandler ErrorRecordsRowDeleted;

      [DebuggerNonUserCode]
      public void AddErrorRecordsRow(TempDataSet.ErrorRecordsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.ErrorRecordsRow AddErrorRecordsRow(
        int PaymentNoteNo,
        string RoomNo,
        string ErrDescription,
        Decimal ErrAmount,
        string BondErrDescription,
        Decimal BondErrAmount,
        string TransType,
        DateTime TransDate,
        string TransTime,
        DateTime CurrDate,
        string CurrTime,
        string StaffID)
      {
        TempDataSet.ErrorRecordsRow row = (TempDataSet.ErrorRecordsRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) PaymentNoteNo,
          (object) RoomNo,
          (object) ErrDescription,
          (object) ErrAmount,
          (object) BondErrDescription,
          (object) BondErrAmount,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) CurrDate,
          (object) CurrTime,
          (object) StaffID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ErrorRecordsDataTable recordsDataTable = (TempDataSet.ErrorRecordsDataTable) base.Clone();
        recordsDataTable.InitVars();
        return (DataTable) recordsDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ErrorRecordsDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnPaymentNoteNo = this.Columns["PaymentNoteNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnErrDescription = this.Columns["ErrDescription"];
        this.columnErrAmount = this.Columns["ErrAmount"];
        this.columnBondErrDescription = this.Columns["BondErrDescription"];
        this.columnBondErrAmount = this.Columns["BondErrAmount"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnCurrDate = this.Columns["CurrDate"];
        this.columnCurrTime = this.Columns["CurrTime"];
        this.columnStaffID = this.Columns["StaffID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnPaymentNoteNo = new DataColumn("PaymentNoteNo", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPaymentNoteNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnErrDescription = new DataColumn("ErrDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrDescription);
        this.columnErrAmount = new DataColumn("ErrAmount", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrAmount);
        this.columnBondErrDescription = new DataColumn("BondErrDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBondErrDescription);
        this.columnBondErrAmount = new DataColumn("BondErrAmount", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBondErrAmount);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnCurrDate = new DataColumn("CurrDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCurrDate);
        this.columnCurrTime = new DataColumn("CurrTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCurrTime);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnRoomNo.MaxLength = 5;
        this.columnErrDescription.MaxLength = 100;
        this.columnBondErrDescription.MaxLength = 100;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnCurrTime.MaxLength = 12;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ErrorRecordsRow NewErrorRecordsRow()
      {
        return (TempDataSet.ErrorRecordsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ErrorRecordsRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ErrorRecordsRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ErrorRecordsRowChanged == null)
          return;
        this.ErrorRecordsRowChanged((object) this, new TempDataSet.ErrorRecordsRowChangeEvent((TempDataSet.ErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ErrorRecordsRowChanging == null)
          return;
        this.ErrorRecordsRowChanging((object) this, new TempDataSet.ErrorRecordsRowChangeEvent((TempDataSet.ErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ErrorRecordsRowDeleted == null)
          return;
        this.ErrorRecordsRowDeleted((object) this, new TempDataSet.ErrorRecordsRowChangeEvent((TempDataSet.ErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ErrorRecordsRowDeleting == null)
          return;
        this.ErrorRecordsRowDeleting((object) this, new TempDataSet.ErrorRecordsRowChangeEvent((TempDataSet.ErrorRecordsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveErrorRecordsRow(TempDataSet.ErrorRecordsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ErrorRecordsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ExtraDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnReceiptID;
      private DataColumn columnClientID;
      private DataColumn columnExDescription;
      private DataColumn columnExtraCharge;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;

      [DebuggerNonUserCode]
      public ExtraDataTable()
      {
        this.TableName = "Extra";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ExtraDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ExtraDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ReceiptIDColumn => this.columnReceiptID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ExtraRow this[int index] => (TempDataSet.ExtraRow) this.Rows[index];

      public event TempDataSet.ExtraRowChangeEventHandler ExtraRowChanging;

      public event TempDataSet.ExtraRowChangeEventHandler ExtraRowChanged;

      public event TempDataSet.ExtraRowChangeEventHandler ExtraRowDeleting;

      public event TempDataSet.ExtraRowChangeEventHandler ExtraRowDeleted;

      [DebuggerNonUserCode]
      public void AddExtraRow(TempDataSet.ExtraRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.ExtraRow AddExtraRow(
        string RoomNo,
        int ReceiptID,
        string ClientID,
        string ExDescription,
        Decimal ExtraCharge,
        string TransType,
        DateTime TransDate,
        string TransTime)
      {
        TempDataSet.ExtraRow row = (TempDataSet.ExtraRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) RoomNo,
          (object) ReceiptID,
          (object) ClientID,
          (object) ExDescription,
          (object) ExtraCharge,
          (object) TransType,
          (object) TransDate,
          (object) TransTime
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ExtraDataTable extraDataTable = (TempDataSet.ExtraDataTable) base.Clone();
        extraDataTable.InitVars();
        return (DataTable) extraDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance() => (DataTable) new TempDataSet.ExtraDataTable();

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnReceiptID = this.Columns["ReceiptID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnReceiptID = new DataColumn("ReceiptID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReceiptID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnExDescription.MaxLength = 50;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraRow NewExtraRow() => (TempDataSet.ExtraRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ExtraRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ExtraRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ExtraRowChanged == null)
          return;
        this.ExtraRowChanged((object) this, new TempDataSet.ExtraRowChangeEvent((TempDataSet.ExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ExtraRowChanging == null)
          return;
        this.ExtraRowChanging((object) this, new TempDataSet.ExtraRowChangeEvent((TempDataSet.ExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ExtraRowDeleted == null)
          return;
        this.ExtraRowDeleted((object) this, new TempDataSet.ExtraRowChangeEvent((TempDataSet.ExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ExtraRowDeleting == null)
          return;
        this.ExtraRowDeleting((object) this, new TempDataSet.ExtraRowChangeEvent((TempDataSet.ExtraRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveExtraRow(TempDataSet.ExtraRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ExtraDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ExtraCardDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnCardType;
      private DataColumn columnClientID;
      private DataColumn columnCardStatus;
      private DataColumn columnKeyCharge;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public ExtraCardDataTable()
      {
        this.TableName = "ExtraCard";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ExtraCardDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ExtraCardDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn KeyChargeColumn => this.columnKeyCharge;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCardRow this[int index]
      {
        get => (TempDataSet.ExtraCardRow) this.Rows[index];
      }

      public event TempDataSet.ExtraCardRowChangeEventHandler ExtraCardRowChanging;

      public event TempDataSet.ExtraCardRowChangeEventHandler ExtraCardRowChanged;

      public event TempDataSet.ExtraCardRowChangeEventHandler ExtraCardRowDeleting;

      public event TempDataSet.ExtraCardRowChangeEventHandler ExtraCardRowDeleted;

      [DebuggerNonUserCode]
      public void AddExtraCardRow(TempDataSet.ExtraCardRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCardRow AddExtraCardRow(
        string CardNo,
        string RoomNo,
        string CardType,
        string ClientID,
        byte CardStatus,
        Decimal KeyCharge,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        bool Update)
      {
        TempDataSet.ExtraCardRow row = (TempDataSet.ExtraCardRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) CardNo,
          (object) RoomNo,
          (object) CardType,
          (object) ClientID,
          (object) CardStatus,
          (object) KeyCharge,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ExtraCardDataTable extraCardDataTable = (TempDataSet.ExtraCardDataTable) base.Clone();
        extraCardDataTable.InitVars();
        return (DataTable) extraCardDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ExtraCardDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnKeyCharge = this.Columns["KeyCharge"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnKeyCharge = new DataColumn("KeyCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyCharge);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnClientID.MaxLength = 10;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCardRow NewExtraCardRow() => (TempDataSet.ExtraCardRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ExtraCardRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ExtraCardRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ExtraCardRowChanged == null)
          return;
        this.ExtraCardRowChanged((object) this, new TempDataSet.ExtraCardRowChangeEvent((TempDataSet.ExtraCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ExtraCardRowChanging == null)
          return;
        this.ExtraCardRowChanging((object) this, new TempDataSet.ExtraCardRowChangeEvent((TempDataSet.ExtraCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ExtraCardRowDeleted == null)
          return;
        this.ExtraCardRowDeleted((object) this, new TempDataSet.ExtraCardRowChangeEvent((TempDataSet.ExtraCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ExtraCardRowDeleting == null)
          return;
        this.ExtraCardRowDeleting((object) this, new TempDataSet.ExtraCardRowChangeEvent((TempDataSet.ExtraCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveExtraCardRow(TempDataSet.ExtraCardRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ExtraCardDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ExtraCharge_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnReceiptID;
      private DataColumn columnClientID;
      private DataColumn columnExDescription;
      private DataColumn columnExtraCharge;

      [DebuggerNonUserCode]
      public ExtraCharge_TempDataTable()
      {
        this.TableName = "ExtraCharge_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ExtraCharge_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ExtraCharge_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ReceiptIDColumn => this.columnReceiptID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCharge_TempRow this[int index]
      {
        get => (TempDataSet.ExtraCharge_TempRow) this.Rows[index];
      }

      public event TempDataSet.ExtraCharge_TempRowChangeEventHandler ExtraCharge_TempRowChanging;

      public event TempDataSet.ExtraCharge_TempRowChangeEventHandler ExtraCharge_TempRowChanged;

      public event TempDataSet.ExtraCharge_TempRowChangeEventHandler ExtraCharge_TempRowDeleting;

      public event TempDataSet.ExtraCharge_TempRowChangeEventHandler ExtraCharge_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddExtraCharge_TempRow(TempDataSet.ExtraCharge_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCharge_TempRow AddExtraCharge_TempRow(
        int ReceiptID,
        string ClientID,
        string ExDescription,
        Decimal ExtraCharge)
      {
        TempDataSet.ExtraCharge_TempRow row = (TempDataSet.ExtraCharge_TempRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ReceiptID,
          (object) ClientID,
          (object) ExDescription,
          (object) ExtraCharge
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ExtraCharge_TempDataTable chargeTempDataTable = (TempDataSet.ExtraCharge_TempDataTable) base.Clone();
        chargeTempDataTable.InitVars();
        return (DataTable) chargeTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ExtraCharge_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnReceiptID = this.Columns["ReceiptID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnReceiptID = new DataColumn("ReceiptID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReceiptID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnClientID.MaxLength = 10;
        this.columnExDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCharge_TempRow NewExtraCharge_TempRow()
      {
        return (TempDataSet.ExtraCharge_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ExtraCharge_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ExtraCharge_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ExtraCharge_TempRowChanged == null)
          return;
        this.ExtraCharge_TempRowChanged((object) this, new TempDataSet.ExtraCharge_TempRowChangeEvent((TempDataSet.ExtraCharge_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ExtraCharge_TempRowChanging == null)
          return;
        this.ExtraCharge_TempRowChanging((object) this, new TempDataSet.ExtraCharge_TempRowChangeEvent((TempDataSet.ExtraCharge_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ExtraCharge_TempRowDeleted == null)
          return;
        this.ExtraCharge_TempRowDeleted((object) this, new TempDataSet.ExtraCharge_TempRowChangeEvent((TempDataSet.ExtraCharge_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ExtraCharge_TempRowDeleting == null)
          return;
        this.ExtraCharge_TempRowDeleting((object) this, new TempDataSet.ExtraCharge_TempRowChangeEvent((TempDataSet.ExtraCharge_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveExtraCharge_TempRow(TempDataSet.ExtraCharge_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ExtraCharge_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GData_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnDescription;
      private DataColumn columnContractStart;
      private DataColumn columnContractEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckOutDate;

      [DebuggerNonUserCode]
      public GData_TempDataTable()
      {
        this.TableName = "GData_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GData_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GData_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn ContractStartColumn => this.columnContractStart;

      [DebuggerNonUserCode]
      public DataColumn ContractEndColumn => this.columnContractEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GData_TempRow this[int index]
      {
        get => (TempDataSet.GData_TempRow) this.Rows[index];
      }

      public event TempDataSet.GData_TempRowChangeEventHandler GData_TempRowChanging;

      public event TempDataSet.GData_TempRowChangeEventHandler GData_TempRowChanged;

      public event TempDataSet.GData_TempRowChangeEventHandler GData_TempRowDeleting;

      public event TempDataSet.GData_TempRowChangeEventHandler GData_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddGData_TempRow(TempDataSet.GData_TempRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.GData_TempRow AddGData_TempRow(
        string ClientID,
        string ForeName,
        string SurName,
        string Description,
        DateTime ContractStart,
        DateTime ContractEnd,
        DateTime CheckInDate,
        DateTime CheckOutDate)
      {
        TempDataSet.GData_TempRow row = (TempDataSet.GData_TempRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) Description,
          (object) ContractStart,
          (object) ContractEnd,
          (object) CheckInDate,
          (object) CheckOutDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GData_TempDataTable gdataTempDataTable = (TempDataSet.GData_TempDataTable) base.Clone();
        gdataTempDataTable.InitVars();
        return (DataTable) gdataTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GData_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnDescription = this.Columns["Description"];
        this.columnContractStart = this.Columns["ContractStart"];
        this.columnContractEnd = this.Columns["ContractEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnContractStart = new DataColumn("ContractStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractStart);
        this.columnContractEnd = new DataColumn("ContractEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnDescription.MaxLength = 30;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GData_TempRow NewGData_TempRow()
      {
        return (TempDataSet.GData_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GData_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GData_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GData_TempRowChanged == null)
          return;
        this.GData_TempRowChanged((object) this, new TempDataSet.GData_TempRowChangeEvent((TempDataSet.GData_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GData_TempRowChanging == null)
          return;
        this.GData_TempRowChanging((object) this, new TempDataSet.GData_TempRowChangeEvent((TempDataSet.GData_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GData_TempRowDeleted == null)
          return;
        this.GData_TempRowDeleted((object) this, new TempDataSet.GData_TempRowChangeEvent((TempDataSet.GData_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GData_TempRowDeleting == null)
          return;
        this.GData_TempRowDeleting((object) this, new TempDataSet.GData_TempRowChangeEvent((TempDataSet.GData_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGData_TempRow(TempDataSet.GData_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GData_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GDSalesDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnTempBld;
      private DataColumn columnTempMonth;
      private DataColumn columnCardNo;
      private DataColumn columnReserveRef;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnChargeType;
      private DataColumn columnPreviousAdvance;
      private DataColumn columnAdvancedPayment;
      private DataColumn columnBond;
      private DataColumn columnRBA;
      private DataColumn columnDeposit;
      private DataColumn columnKeyDeposit;
      private DataColumn columnExtraCharge;
      private DataColumn columnRoomCharge;
      private DataColumn columnBonusClaim;
      private DataColumn columnGST;
      private DataColumn columnLastPayment;
      private DataColumn columnStaffID;
      private DataColumn columnCheckInDate;
      private DataColumn columnContractStart;
      private DataColumn columnContractEnd;
      private DataColumn columnCheckOutDate;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GDSalesDataTable()
      {
        this.TableName = "GDSales";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GDSalesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GDSalesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn TempMonthColumn => this.columnTempMonth;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn PreviousAdvanceColumn => this.columnPreviousAdvance;

      [DebuggerNonUserCode]
      public DataColumn AdvancedPaymentColumn => this.columnAdvancedPayment;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn RBAColumn => this.columnRBA;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn RoomChargeColumn => this.columnRoomCharge;

      [DebuggerNonUserCode]
      public DataColumn BonusClaimColumn => this.columnBonusClaim;

      [DebuggerNonUserCode]
      public DataColumn GSTColumn => this.columnGST;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn ContractStartColumn => this.columnContractStart;

      [DebuggerNonUserCode]
      public DataColumn ContractEndColumn => this.columnContractEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GDSalesRow this[int index] => (TempDataSet.GDSalesRow) this.Rows[index];

      public event TempDataSet.GDSalesRowChangeEventHandler GDSalesRowChanging;

      public event TempDataSet.GDSalesRowChangeEventHandler GDSalesRowChanged;

      public event TempDataSet.GDSalesRowChangeEventHandler GDSalesRowDeleting;

      public event TempDataSet.GDSalesRowChangeEventHandler GDSalesRowDeleted;

      [DebuggerNonUserCode]
      public void AddGDSalesRow(TempDataSet.GDSalesRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.GDSalesRow AddGDSalesRow(
        int TransID,
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string TempBld,
        string TempMonth,
        string CardNo,
        string ReserveRef,
        string TransType,
        DateTime TransDate,
        string ChargeType,
        Decimal PreviousAdvance,
        Decimal AdvancedPayment,
        Decimal Bond,
        Decimal RBA,
        Decimal Deposit,
        Decimal KeyDeposit,
        Decimal ExtraCharge,
        Decimal RoomCharge,
        Decimal BonusClaim,
        Decimal GST,
        Decimal LastPayment,
        string StaffID,
        DateTime CheckInDate,
        DateTime ContractStart,
        DateTime ContractEnd,
        DateTime CheckOutDate,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GDSalesRow row = (TempDataSet.GDSalesRow) this.NewRow();
        object[] objArray = new object[30]
        {
          (object) TransID,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) TempBld,
          (object) TempMonth,
          (object) CardNo,
          (object) ReserveRef,
          (object) TransType,
          (object) TransDate,
          (object) ChargeType,
          (object) PreviousAdvance,
          (object) AdvancedPayment,
          (object) Bond,
          (object) RBA,
          (object) Deposit,
          (object) KeyDeposit,
          (object) ExtraCharge,
          (object) RoomCharge,
          (object) BonusClaim,
          (object) GST,
          (object) LastPayment,
          (object) StaffID,
          (object) CheckInDate,
          (object) ContractStart,
          (object) ContractEnd,
          (object) CheckOutDate,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GDSalesDataTable gdSalesDataTable = (TempDataSet.GDSalesDataTable) base.Clone();
        gdSalesDataTable.InitVars();
        return (DataTable) gdSalesDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GDSalesDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnTempMonth = this.Columns["TempMonth"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnPreviousAdvance = this.Columns["PreviousAdvance"];
        this.columnAdvancedPayment = this.Columns["AdvancedPayment"];
        this.columnBond = this.Columns["Bond"];
        this.columnRBA = this.Columns["RBA"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnRoomCharge = this.Columns["RoomCharge"];
        this.columnBonusClaim = this.Columns["BonusClaim"];
        this.columnGST = this.Columns["GST"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnContractStart = this.Columns["ContractStart"];
        this.columnContractEnd = this.Columns["ContractEnd"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnTempMonth = new DataColumn("TempMonth", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempMonth);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnPreviousAdvance = new DataColumn("PreviousAdvance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPreviousAdvance);
        this.columnAdvancedPayment = new DataColumn("AdvancedPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAdvancedPayment);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnRBA = new DataColumn("RBA", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRBA);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnRoomCharge = new DataColumn("RoomCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomCharge);
        this.columnBonusClaim = new DataColumn("BonusClaim", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusClaim);
        this.columnGST = new DataColumn("GST", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGST);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnContractStart = new DataColumn("ContractStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractStart);
        this.columnContractEnd = new DataColumn("ContractEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractEnd);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnTempBld.MaxLength = 1;
        this.columnTempMonth.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnReserveRef.MaxLength = 10;
        this.columnTransType.MaxLength = 2;
        this.columnChargeType.MaxLength = 1;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GDSalesRow NewGDSalesRow() => (TempDataSet.GDSalesRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GDSalesRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GDSalesRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GDSalesRowChanged == null)
          return;
        this.GDSalesRowChanged((object) this, new TempDataSet.GDSalesRowChangeEvent((TempDataSet.GDSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GDSalesRowChanging == null)
          return;
        this.GDSalesRowChanging((object) this, new TempDataSet.GDSalesRowChangeEvent((TempDataSet.GDSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GDSalesRowDeleted == null)
          return;
        this.GDSalesRowDeleted((object) this, new TempDataSet.GDSalesRowChangeEvent((TempDataSet.GDSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GDSalesRowDeleting == null)
          return;
        this.GDSalesRowDeleting((object) this, new TempDataSet.GDSalesRowChangeEvent((TempDataSet.GDSalesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGDSalesRow(TempDataSet.GDSalesRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GDSalesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GInfo_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GInfo_TempDataTable()
      {
        this.TableName = "GInfo_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GInfo_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GInfo_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GInfo_TempRow this[int index]
      {
        get => (TempDataSet.GInfo_TempRow) this.Rows[index];
      }

      public event TempDataSet.GInfo_TempRowChangeEventHandler GInfo_TempRowChanging;

      public event TempDataSet.GInfo_TempRowChangeEventHandler GInfo_TempRowChanged;

      public event TempDataSet.GInfo_TempRowChangeEventHandler GInfo_TempRowDeleting;

      public event TempDataSet.GInfo_TempRowChangeEventHandler GInfo_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddGInfo_TempRow(TempDataSet.GInfo_TempRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.GInfo_TempRow AddGInfo_TempRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string CardNo,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GInfo_TempRow row = (TempDataSet.GInfo_TempRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) CardNo,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GInfo_TempDataTable ginfoTempDataTable = (TempDataSet.GInfo_TempDataTable) base.Clone();
        ginfoTempDataTable.InitVars();
        return (DataTable) ginfoTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GInfo_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GInfo_TempRow NewGInfo_TempRow()
      {
        return (TempDataSet.GInfo_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GInfo_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GInfo_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GInfo_TempRowChanged == null)
          return;
        this.GInfo_TempRowChanged((object) this, new TempDataSet.GInfo_TempRowChangeEvent((TempDataSet.GInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GInfo_TempRowChanging == null)
          return;
        this.GInfo_TempRowChanging((object) this, new TempDataSet.GInfo_TempRowChangeEvent((TempDataSet.GInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GInfo_TempRowDeleted == null)
          return;
        this.GInfo_TempRowDeleted((object) this, new TempDataSet.GInfo_TempRowChangeEvent((TempDataSet.GInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GInfo_TempRowDeleting == null)
          return;
        this.GInfo_TempRowDeleting((object) this, new TempDataSet.GInfo_TempRowChangeEvent((TempDataSet.GInfo_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGInfo_TempRow(TempDataSet.GInfo_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GInfo_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GracePeriodListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnGracePeriod;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckOutDate;

      [DebuggerNonUserCode]
      public GracePeriodListDataTable()
      {
        this.TableName = "GracePeriodList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GracePeriodListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GracePeriodListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GracePeriodListRow this[int index]
      {
        get => (TempDataSet.GracePeriodListRow) this.Rows[index];
      }

      public event TempDataSet.GracePeriodListRowChangeEventHandler GracePeriodListRowChanging;

      public event TempDataSet.GracePeriodListRowChangeEventHandler GracePeriodListRowChanged;

      public event TempDataSet.GracePeriodListRowChangeEventHandler GracePeriodListRowDeleting;

      public event TempDataSet.GracePeriodListRowChangeEventHandler GracePeriodListRowDeleted;

      [DebuggerNonUserCode]
      public void AddGracePeriodListRow(TempDataSet.GracePeriodListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GracePeriodListRow AddGracePeriodListRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        short GracePeriod,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckOutDate)
      {
        TempDataSet.GracePeriodListRow row = (TempDataSet.GracePeriodListRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) GracePeriod,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckOutDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GracePeriodListDataTable periodListDataTable = (TempDataSet.GracePeriodListDataTable) base.Clone();
        periodListDataTable.InitVars();
        return (DataTable) periodListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GracePeriodListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GracePeriodListRow NewGracePeriodListRow()
      {
        return (TempDataSet.GracePeriodListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GracePeriodListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GracePeriodListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GracePeriodListRowChanged == null)
          return;
        this.GracePeriodListRowChanged((object) this, new TempDataSet.GracePeriodListRowChangeEvent((TempDataSet.GracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GracePeriodListRowChanging == null)
          return;
        this.GracePeriodListRowChanging((object) this, new TempDataSet.GracePeriodListRowChangeEvent((TempDataSet.GracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GracePeriodListRowDeleted == null)
          return;
        this.GracePeriodListRowDeleted((object) this, new TempDataSet.GracePeriodListRowChangeEvent((TempDataSet.GracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GracePeriodListRowDeleting == null)
          return;
        this.GracePeriodListRowDeleting((object) this, new TempDataSet.GracePeriodListRowChangeEvent((TempDataSet.GracePeriodListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGracePeriodListRow(TempDataSet.GracePeriodListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GracePeriodListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GTransactions_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnRoomNo;
      private DataColumn columnLastPayment;

      [DebuggerNonUserCode]
      public GTransactions_TempDataTable()
      {
        this.TableName = "GTransactions_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GTransactions_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GTransactions_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GTransactions_TempRow this[int index]
      {
        get => (TempDataSet.GTransactions_TempRow) this.Rows[index];
      }

      public event TempDataSet.GTransactions_TempRowChangeEventHandler GTransactions_TempRowChanging;

      public event TempDataSet.GTransactions_TempRowChangeEventHandler GTransactions_TempRowChanged;

      public event TempDataSet.GTransactions_TempRowChangeEventHandler GTransactions_TempRowDeleting;

      public event TempDataSet.GTransactions_TempRowChangeEventHandler GTransactions_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddGTransactions_TempRow(TempDataSet.GTransactions_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GTransactions_TempRow AddGTransactions_TempRow(
        int TransID,
        string TransType,
        DateTime TransDate,
        string TransTime,
        string RoomNo,
        Decimal LastPayment)
      {
        TempDataSet.GTransactions_TempRow row = (TempDataSet.GTransactions_TempRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) TransID,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) RoomNo,
          (object) LastPayment
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GTransactions_TempDataTable gtransactionsTempDataTable = (TempDataSet.GTransactions_TempDataTable) base.Clone();
        gtransactionsTempDataTable.InitVars();
        return (DataTable) gtransactionsTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GTransactions_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnLastPayment = this.Columns["LastPayment"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTransID
        }, false));
        this.columnTransID.Unique = true;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnRoomNo.MaxLength = 5;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GTransactions_TempRow NewGTransactions_TempRow()
      {
        return (TempDataSet.GTransactions_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GTransactions_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GTransactions_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GTransactions_TempRowChanged == null)
          return;
        this.GTransactions_TempRowChanged((object) this, new TempDataSet.GTransactions_TempRowChangeEvent((TempDataSet.GTransactions_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GTransactions_TempRowChanging == null)
          return;
        this.GTransactions_TempRowChanging((object) this, new TempDataSet.GTransactions_TempRowChangeEvent((TempDataSet.GTransactions_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GTransactions_TempRowDeleted == null)
          return;
        this.GTransactions_TempRowDeleted((object) this, new TempDataSet.GTransactions_TempRowChangeEvent((TempDataSet.GTransactions_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GTransactions_TempRowDeleting == null)
          return;
        this.GTransactions_TempRowDeleting((object) this, new TempDataSet.GTransactions_TempRowChangeEvent((TempDataSet.GTransactions_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGTransactions_TempRow(TempDataSet.GTransactions_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GTransactions_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GuestAccountDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnDeposit;
      private DataColumn columnBond;
      private DataColumn columnChargeType;
      private DataColumn columnLastPayment;
      private DataColumn columnAmountPaid;

      [DebuggerNonUserCode]
      public GuestAccountDataTable()
      {
        this.TableName = "GuestAccount";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestAccountDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestAccountDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn AmountPaidColumn => this.columnAmountPaid;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestAccountRow this[int index]
      {
        get => (TempDataSet.GuestAccountRow) this.Rows[index];
      }

      public event TempDataSet.GuestAccountRowChangeEventHandler GuestAccountRowChanging;

      public event TempDataSet.GuestAccountRowChangeEventHandler GuestAccountRowChanged;

      public event TempDataSet.GuestAccountRowChangeEventHandler GuestAccountRowDeleting;

      public event TempDataSet.GuestAccountRowChangeEventHandler GuestAccountRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestAccountRow(TempDataSet.GuestAccountRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestAccountRow AddGuestAccountRow(
        string ClientID,
        string ForeName,
        string SurName,
        string RoomNo,
        string CardNo,
        Decimal Deposit,
        Decimal Bond,
        string ChargeType,
        Decimal LastPayment,
        Decimal AmountPaid)
      {
        TempDataSet.GuestAccountRow row = (TempDataSet.GuestAccountRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) RoomNo,
          (object) CardNo,
          (object) Deposit,
          (object) Bond,
          (object) ChargeType,
          (object) LastPayment,
          (object) AmountPaid
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestAccountDataTable accountDataTable = (TempDataSet.GuestAccountDataTable) base.Clone();
        accountDataTable.InitVars();
        return (DataTable) accountDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestAccountDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnBond = this.Columns["Bond"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnAmountPaid = this.Columns["AmountPaid"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnAmountPaid = new DataColumn("AmountPaid", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAmountPaid);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
        this.columnChargeType.MaxLength = 1;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestAccountRow NewGuestAccountRow()
      {
        return (TempDataSet.GuestAccountRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestAccountRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestAccountRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestAccountRowChanged == null)
          return;
        this.GuestAccountRowChanged((object) this, new TempDataSet.GuestAccountRowChangeEvent((TempDataSet.GuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestAccountRowChanging == null)
          return;
        this.GuestAccountRowChanging((object) this, new TempDataSet.GuestAccountRowChangeEvent((TempDataSet.GuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestAccountRowDeleted == null)
          return;
        this.GuestAccountRowDeleted((object) this, new TempDataSet.GuestAccountRowChangeEvent((TempDataSet.GuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestAccountRowDeleting == null)
          return;
        this.GuestAccountRowDeleting((object) this, new TempDataSet.GuestAccountRowChangeEvent((TempDataSet.GuestAccountRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestAccountRow(TempDataSet.GuestAccountRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestAccountDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GuestHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnReserveRef;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnLastPayment;
      private DataColumn columnCheckInDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public GuestHistoryDataTable()
      {
        this.TableName = "GuestHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestHistoryRow this[int index]
      {
        get => (TempDataSet.GuestHistoryRow) this.Rows[index];
      }

      public event TempDataSet.GuestHistoryRowChangeEventHandler GuestHistoryRowChanging;

      public event TempDataSet.GuestHistoryRowChangeEventHandler GuestHistoryRowChanged;

      public event TempDataSet.GuestHistoryRowChangeEventHandler GuestHistoryRowDeleting;

      public event TempDataSet.GuestHistoryRowChangeEventHandler GuestHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestHistoryRow(TempDataSet.GuestHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestHistoryRow AddGuestHistoryRow(
        string ClientID,
        string ForeName,
        string SurName,
        string CardNo,
        string RoomNo,
        string ReserveRef,
        string TransType,
        DateTime TransDate,
        string TransTime,
        Decimal LastPayment,
        DateTime CheckInDate,
        DateTime RoomStart)
      {
        TempDataSet.GuestHistoryRow row = (TempDataSet.GuestHistoryRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardNo,
          (object) RoomNo,
          (object) ReserveRef,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) LastPayment,
          (object) CheckInDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestHistoryDataTable historyDataTable = (TempDataSet.GuestHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnReserveRef.MaxLength = 10;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestHistoryRow NewGuestHistoryRow()
      {
        return (TempDataSet.GuestHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestHistoryRowChanged == null)
          return;
        this.GuestHistoryRowChanged((object) this, new TempDataSet.GuestHistoryRowChangeEvent((TempDataSet.GuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestHistoryRowChanging == null)
          return;
        this.GuestHistoryRowChanging((object) this, new TempDataSet.GuestHistoryRowChangeEvent((TempDataSet.GuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestHistoryRowDeleted == null)
          return;
        this.GuestHistoryRowDeleted((object) this, new TempDataSet.GuestHistoryRowChangeEvent((TempDataSet.GuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestHistoryRowDeleting == null)
          return;
        this.GuestHistoryRowDeleting((object) this, new TempDataSet.GuestHistoryRowChangeEvent((TempDataSet.GuestHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestHistoryRow(TempDataSet.GuestHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GuestIssuedByBldNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardStatus;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GuestIssuedByBldNoDataTable()
      {
        this.TableName = "GuestIssuedByBldNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestIssuedByBldNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestIssuedByBldNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByBldNoRow this[int index]
      {
        get => (TempDataSet.GuestIssuedByBldNoRow) this.Rows[index];
      }

      public event TempDataSet.GuestIssuedByBldNoRowChangeEventHandler GuestIssuedByBldNoRowChanging;

      public event TempDataSet.GuestIssuedByBldNoRowChangeEventHandler GuestIssuedByBldNoRowChanged;

      public event TempDataSet.GuestIssuedByBldNoRowChangeEventHandler GuestIssuedByBldNoRowDeleting;

      public event TempDataSet.GuestIssuedByBldNoRowChangeEventHandler GuestIssuedByBldNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestIssuedByBldNoRow(TempDataSet.GuestIssuedByBldNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByBldNoRow AddGuestIssuedByBldNoRow(
        string CardNo,
        string CardType,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        byte CardStatus,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GuestIssuedByBldNoRow row = (TempDataSet.GuestIssuedByBldNoRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardStatus,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestIssuedByBldNoDataTable byBldNoDataTable = (TempDataSet.GuestIssuedByBldNoDataTable) base.Clone();
        byBldNoDataTable.InitVars();
        return (DataTable) byBldNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestIssuedByBldNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByBldNoRow NewGuestIssuedByBldNoRow()
      {
        return (TempDataSet.GuestIssuedByBldNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestIssuedByBldNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestIssuedByBldNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestIssuedByBldNoRowChanged == null)
          return;
        this.GuestIssuedByBldNoRowChanged((object) this, new TempDataSet.GuestIssuedByBldNoRowChangeEvent((TempDataSet.GuestIssuedByBldNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestIssuedByBldNoRowChanging == null)
          return;
        this.GuestIssuedByBldNoRowChanging((object) this, new TempDataSet.GuestIssuedByBldNoRowChangeEvent((TempDataSet.GuestIssuedByBldNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestIssuedByBldNoRowDeleted == null)
          return;
        this.GuestIssuedByBldNoRowDeleted((object) this, new TempDataSet.GuestIssuedByBldNoRowChangeEvent((TempDataSet.GuestIssuedByBldNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestIssuedByBldNoRowDeleting == null)
          return;
        this.GuestIssuedByBldNoRowDeleting((object) this, new TempDataSet.GuestIssuedByBldNoRowChangeEvent((TempDataSet.GuestIssuedByBldNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestIssuedByBldNoRow(TempDataSet.GuestIssuedByBldNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestIssuedByBldNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GuestIssuedByFloorNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardStatus;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GuestIssuedByFloorNoDataTable()
      {
        this.TableName = "GuestIssuedByFloorNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestIssuedByFloorNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestIssuedByFloorNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByFloorNoRow this[int index]
      {
        get => (TempDataSet.GuestIssuedByFloorNoRow) this.Rows[index];
      }

      public event TempDataSet.GuestIssuedByFloorNoRowChangeEventHandler GuestIssuedByFloorNoRowChanging;

      public event TempDataSet.GuestIssuedByFloorNoRowChangeEventHandler GuestIssuedByFloorNoRowChanged;

      public event TempDataSet.GuestIssuedByFloorNoRowChangeEventHandler GuestIssuedByFloorNoRowDeleting;

      public event TempDataSet.GuestIssuedByFloorNoRowChangeEventHandler GuestIssuedByFloorNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestIssuedByFloorNoRow(TempDataSet.GuestIssuedByFloorNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByFloorNoRow AddGuestIssuedByFloorNoRow(
        string CardNo,
        string CardType,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        byte CardStatus,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GuestIssuedByFloorNoRow row = (TempDataSet.GuestIssuedByFloorNoRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardStatus,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestIssuedByFloorNoDataTable floorNoDataTable = (TempDataSet.GuestIssuedByFloorNoDataTable) base.Clone();
        floorNoDataTable.InitVars();
        return (DataTable) floorNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestIssuedByFloorNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByFloorNoRow NewGuestIssuedByFloorNoRow()
      {
        return (TempDataSet.GuestIssuedByFloorNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestIssuedByFloorNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestIssuedByFloorNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestIssuedByFloorNoRowChanged == null)
          return;
        this.GuestIssuedByFloorNoRowChanged((object) this, new TempDataSet.GuestIssuedByFloorNoRowChangeEvent((TempDataSet.GuestIssuedByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestIssuedByFloorNoRowChanging == null)
          return;
        this.GuestIssuedByFloorNoRowChanging((object) this, new TempDataSet.GuestIssuedByFloorNoRowChangeEvent((TempDataSet.GuestIssuedByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestIssuedByFloorNoRowDeleted == null)
          return;
        this.GuestIssuedByFloorNoRowDeleted((object) this, new TempDataSet.GuestIssuedByFloorNoRowChangeEvent((TempDataSet.GuestIssuedByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestIssuedByFloorNoRowDeleting == null)
          return;
        this.GuestIssuedByFloorNoRowDeleting((object) this, new TempDataSet.GuestIssuedByFloorNoRowChangeEvent((TempDataSet.GuestIssuedByFloorNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestIssuedByFloorNoRow(TempDataSet.GuestIssuedByFloorNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestIssuedByFloorNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class GuestIssuedByGuestIDDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardStatus;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GuestIssuedByGuestIDDataTable()
      {
        this.TableName = "GuestIssuedByGuestID";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestIssuedByGuestIDDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestIssuedByGuestIDDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByGuestIDRow this[int index]
      {
        get => (TempDataSet.GuestIssuedByGuestIDRow) this.Rows[index];
      }

      public event TempDataSet.GuestIssuedByGuestIDRowChangeEventHandler GuestIssuedByGuestIDRowChanging;

      public event TempDataSet.GuestIssuedByGuestIDRowChangeEventHandler GuestIssuedByGuestIDRowChanged;

      public event TempDataSet.GuestIssuedByGuestIDRowChangeEventHandler GuestIssuedByGuestIDRowDeleting;

      public event TempDataSet.GuestIssuedByGuestIDRowChangeEventHandler GuestIssuedByGuestIDRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestIssuedByGuestIDRow(TempDataSet.GuestIssuedByGuestIDRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByGuestIDRow AddGuestIssuedByGuestIDRow(
        string CardNo,
        string CardType,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        byte CardStatus,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GuestIssuedByGuestIDRow row = (TempDataSet.GuestIssuedByGuestIDRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardStatus,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestIssuedByGuestIDDataTable guestIdDataTable = (TempDataSet.GuestIssuedByGuestIDDataTable) base.Clone();
        guestIdDataTable.InitVars();
        return (DataTable) guestIdDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestIssuedByGuestIDDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByGuestIDRow NewGuestIssuedByGuestIDRow()
      {
        return (TempDataSet.GuestIssuedByGuestIDRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestIssuedByGuestIDRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestIssuedByGuestIDRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestIssuedByGuestIDRowChanged == null)
          return;
        this.GuestIssuedByGuestIDRowChanged((object) this, new TempDataSet.GuestIssuedByGuestIDRowChangeEvent((TempDataSet.GuestIssuedByGuestIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestIssuedByGuestIDRowChanging == null)
          return;
        this.GuestIssuedByGuestIDRowChanging((object) this, new TempDataSet.GuestIssuedByGuestIDRowChangeEvent((TempDataSet.GuestIssuedByGuestIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestIssuedByGuestIDRowDeleted == null)
          return;
        this.GuestIssuedByGuestIDRowDeleted((object) this, new TempDataSet.GuestIssuedByGuestIDRowChangeEvent((TempDataSet.GuestIssuedByGuestIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestIssuedByGuestIDRowDeleting == null)
          return;
        this.GuestIssuedByGuestIDRowDeleting((object) this, new TempDataSet.GuestIssuedByGuestIDRowChangeEvent((TempDataSet.GuestIssuedByGuestIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestIssuedByGuestIDRow(TempDataSet.GuestIssuedByGuestIDRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestIssuedByGuestIDDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GuestIssuedByRoomNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardStatus;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;

      [DebuggerNonUserCode]
      public GuestIssuedByRoomNoDataTable()
      {
        this.TableName = "GuestIssuedByRoomNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestIssuedByRoomNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestIssuedByRoomNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByRoomNoRow this[int index]
      {
        get => (TempDataSet.GuestIssuedByRoomNoRow) this.Rows[index];
      }

      public event TempDataSet.GuestIssuedByRoomNoRowChangeEventHandler GuestIssuedByRoomNoRowChanging;

      public event TempDataSet.GuestIssuedByRoomNoRowChangeEventHandler GuestIssuedByRoomNoRowChanged;

      public event TempDataSet.GuestIssuedByRoomNoRowChangeEventHandler GuestIssuedByRoomNoRowDeleting;

      public event TempDataSet.GuestIssuedByRoomNoRowChangeEventHandler GuestIssuedByRoomNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestIssuedByRoomNoRow(TempDataSet.GuestIssuedByRoomNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByRoomNoRow AddGuestIssuedByRoomNoRow(
        string CardNo,
        string CardType,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        byte CardStatus,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        DateTime ValidStart,
        DateTime ValidEnd)
      {
        TempDataSet.GuestIssuedByRoomNoRow row = (TempDataSet.GuestIssuedByRoomNoRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) CardNo,
          (object) CardType,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardStatus,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) ValidStart,
          (object) ValidEnd
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestIssuedByRoomNoDataTable byRoomNoDataTable = (TempDataSet.GuestIssuedByRoomNoDataTable) base.Clone();
        byRoomNoDataTable.InitVars();
        return (DataTable) byRoomNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestIssuedByRoomNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByRoomNoRow NewGuestIssuedByRoomNoRow()
      {
        return (TempDataSet.GuestIssuedByRoomNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestIssuedByRoomNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestIssuedByRoomNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestIssuedByRoomNoRowChanged == null)
          return;
        this.GuestIssuedByRoomNoRowChanged((object) this, new TempDataSet.GuestIssuedByRoomNoRowChangeEvent((TempDataSet.GuestIssuedByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestIssuedByRoomNoRowChanging == null)
          return;
        this.GuestIssuedByRoomNoRowChanging((object) this, new TempDataSet.GuestIssuedByRoomNoRowChangeEvent((TempDataSet.GuestIssuedByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestIssuedByRoomNoRowDeleted == null)
          return;
        this.GuestIssuedByRoomNoRowDeleted((object) this, new TempDataSet.GuestIssuedByRoomNoRowChangeEvent((TempDataSet.GuestIssuedByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestIssuedByRoomNoRowDeleting == null)
          return;
        this.GuestIssuedByRoomNoRowDeleting((object) this, new TempDataSet.GuestIssuedByRoomNoRowChangeEvent((TempDataSet.GuestIssuedByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestIssuedByRoomNoRow(TempDataSet.GuestIssuedByRoomNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestIssuedByRoomNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GuestListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnClientType;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnSex;
      private DataColumn columnIdentity;
      private DataColumn columnNationality;
      private DataColumn columnAddress;
      private DataColumn columnCountry;
      private DataColumn columnContact;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public GuestListDataTable()
      {
        this.TableName = "GuestList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ClientTypeColumn => this.columnClientType;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn SexColumn => this.columnSex;

      [DebuggerNonUserCode]
      public DataColumn IdentityColumn => this.columnIdentity;

      [DebuggerNonUserCode]
      public DataColumn NationalityColumn => this.columnNationality;

      [DebuggerNonUserCode]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      public DataColumn ContactColumn => this.columnContact;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestListRow this[int index]
      {
        get => (TempDataSet.GuestListRow) this.Rows[index];
      }

      public event TempDataSet.GuestListRowChangeEventHandler GuestListRowChanging;

      public event TempDataSet.GuestListRowChangeEventHandler GuestListRowChanged;

      public event TempDataSet.GuestListRowChangeEventHandler GuestListRowDeleting;

      public event TempDataSet.GuestListRowChangeEventHandler GuestListRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestListRow(TempDataSet.GuestListRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.GuestListRow AddGuestListRow(
        string ClientID,
        string ClientType,
        string ForeName,
        string SurName,
        string Sex,
        string Identity,
        string Nationality,
        string Address,
        string Country,
        string Contact,
        bool Update)
      {
        TempDataSet.GuestListRow row = (TempDataSet.GuestListRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) ClientType,
          (object) ForeName,
          (object) SurName,
          (object) Sex,
          (object) Identity,
          (object) Nationality,
          (object) Address,
          (object) Country,
          (object) Contact,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestListDataTable guestListDataTable = (TempDataSet.GuestListDataTable) base.Clone();
        guestListDataTable.InitVars();
        return (DataTable) guestListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnClientType = this.Columns["ClientType"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnSex = this.Columns["Sex"];
        this.columnIdentity = this.Columns["Identity"];
        this.columnNationality = this.Columns["Nationality"];
        this.columnAddress = this.Columns["Address"];
        this.columnCountry = this.Columns["Country"];
        this.columnContact = this.Columns["Contact"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnClientType = new DataColumn("ClientType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientType);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnSex = new DataColumn("Sex", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSex);
        this.columnIdentity = new DataColumn("Identity", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdentity);
        this.columnNationality = new DataColumn("Nationality", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNationality);
        this.columnAddress = new DataColumn("Address", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnContact = new DataColumn("Contact", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContact);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnClientType.MaxLength = 2;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnSex.MaxLength = 1;
        this.columnIdentity.MaxLength = 20;
        this.columnNationality.MaxLength = 20;
        this.columnAddress.MaxLength = 50;
        this.columnCountry.MaxLength = 30;
        this.columnContact.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestListRow NewGuestListRow() => (TempDataSet.GuestListRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestListRowChanged == null)
          return;
        this.GuestListRowChanged((object) this, new TempDataSet.GuestListRowChangeEvent((TempDataSet.GuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestListRowChanging == null)
          return;
        this.GuestListRowChanging((object) this, new TempDataSet.GuestListRowChangeEvent((TempDataSet.GuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestListRowDeleted == null)
          return;
        this.GuestListRowDeleted((object) this, new TempDataSet.GuestListRowChangeEvent((TempDataSet.GuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestListRowDeleting == null)
          return;
        this.GuestListRowDeleting((object) this, new TempDataSet.GuestListRowChangeEvent((TempDataSet.GuestListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestListRow(TempDataSet.GuestListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GuestRecordDateDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnRoomNo;
      private DataColumn columnContractStart;
      private DataColumn columnContractEnd;
      private DataColumn columnGracePeriod;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnCheckOutDate;
      private DataColumn columnBonusDate;
      private DataColumn columnRoomStart;

      [DebuggerNonUserCode]
      public GuestRecordDateDataTable()
      {
        this.TableName = "GuestRecordDate";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GuestRecordDateDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GuestRecordDateDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ContractStartColumn => this.columnContractStart;

      [DebuggerNonUserCode]
      public DataColumn ContractEndColumn => this.columnContractEnd;

      [DebuggerNonUserCode]
      public DataColumn GracePeriodColumn => this.columnGracePeriod;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn CheckOutDateColumn => this.columnCheckOutDate;

      [DebuggerNonUserCode]
      public DataColumn BonusDateColumn => this.columnBonusDate;

      [DebuggerNonUserCode]
      public DataColumn RoomStartColumn => this.columnRoomStart;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GuestRecordDateRow this[int index]
      {
        get => (TempDataSet.GuestRecordDateRow) this.Rows[index];
      }

      public event TempDataSet.GuestRecordDateRowChangeEventHandler GuestRecordDateRowChanging;

      public event TempDataSet.GuestRecordDateRowChangeEventHandler GuestRecordDateRowChanged;

      public event TempDataSet.GuestRecordDateRowChangeEventHandler GuestRecordDateRowDeleting;

      public event TempDataSet.GuestRecordDateRowChangeEventHandler GuestRecordDateRowDeleted;

      [DebuggerNonUserCode]
      public void AddGuestRecordDateRow(TempDataSet.GuestRecordDateRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestRecordDateRow AddGuestRecordDateRow(
        string ClientID,
        string RoomNo,
        DateTime ContractStart,
        DateTime ContractEnd,
        short GracePeriod,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        DateTime CheckOutDate,
        string BonusDate,
        DateTime RoomStart)
      {
        TempDataSet.GuestRecordDateRow row = (TempDataSet.GuestRecordDateRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) ClientID,
          (object) RoomNo,
          (object) ContractStart,
          (object) ContractEnd,
          (object) GracePeriod,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) CheckOutDate,
          (object) BonusDate,
          (object) RoomStart
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GuestRecordDateDataTable recordDateDataTable = (TempDataSet.GuestRecordDateDataTable) base.Clone();
        recordDateDataTable.InitVars();
        return (DataTable) recordDateDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GuestRecordDateDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnContractStart = this.Columns["ContractStart"];
        this.columnContractEnd = this.Columns["ContractEnd"];
        this.columnGracePeriod = this.Columns["GracePeriod"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnCheckOutDate = this.Columns["CheckOutDate"];
        this.columnBonusDate = this.Columns["BonusDate"];
        this.columnRoomStart = this.Columns["RoomStart"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnContractStart = new DataColumn("ContractStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractStart);
        this.columnContractEnd = new DataColumn("ContractEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnContractEnd);
        this.columnGracePeriod = new DataColumn("GracePeriod", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGracePeriod);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnCheckOutDate = new DataColumn("CheckOutDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutDate);
        this.columnBonusDate = new DataColumn("BonusDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusDate);
        this.columnRoomStart = new DataColumn("RoomStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomStart);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClientID
        }, false));
        this.columnClientID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnBonusDate.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestRecordDateRow NewGuestRecordDateRow()
      {
        return (TempDataSet.GuestRecordDateRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GuestRecordDateRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GuestRecordDateRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GuestRecordDateRowChanged == null)
          return;
        this.GuestRecordDateRowChanged((object) this, new TempDataSet.GuestRecordDateRowChangeEvent((TempDataSet.GuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GuestRecordDateRowChanging == null)
          return;
        this.GuestRecordDateRowChanging((object) this, new TempDataSet.GuestRecordDateRowChangeEvent((TempDataSet.GuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GuestRecordDateRowDeleted == null)
          return;
        this.GuestRecordDateRowDeleted((object) this, new TempDataSet.GuestRecordDateRowChangeEvent((TempDataSet.GuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GuestRecordDateRowDeleting == null)
          return;
        this.GuestRecordDateRowDeleting((object) this, new TempDataSet.GuestRecordDateRowChangeEvent((TempDataSet.GuestRecordDateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGuestRecordDateRow(TempDataSet.GuestRecordDateRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GuestRecordDateDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GViewRoom_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnDescription;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public GViewRoom_TempDataTable()
      {
        this.TableName = "GViewRoom_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal GViewRoom_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected GViewRoom_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.GViewRoom_TempRow this[int index]
      {
        get => (TempDataSet.GViewRoom_TempRow) this.Rows[index];
      }

      public event TempDataSet.GViewRoom_TempRowChangeEventHandler GViewRoom_TempRowChanging;

      public event TempDataSet.GViewRoom_TempRowChangeEventHandler GViewRoom_TempRowChanged;

      public event TempDataSet.GViewRoom_TempRowChangeEventHandler GViewRoom_TempRowDeleting;

      public event TempDataSet.GViewRoom_TempRowChangeEventHandler GViewRoom_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddGViewRoom_TempRow(TempDataSet.GViewRoom_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.GViewRoom_TempRow AddGViewRoom_TempRow(
        string ClientID,
        string ForeName,
        string SurName,
        string Description,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.GViewRoom_TempRow row = (TempDataSet.GViewRoom_TempRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) Description,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.GViewRoom_TempDataTable roomTempDataTable = (TempDataSet.GViewRoom_TempDataTable) base.Clone();
        roomTempDataTable.InitVars();
        return (DataTable) roomTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.GViewRoom_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnDescription = this.Columns["Description"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnDescription.MaxLength = 30;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GViewRoom_TempRow NewGViewRoom_TempRow()
      {
        return (TempDataSet.GViewRoom_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.GViewRoom_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.GViewRoom_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GViewRoom_TempRowChanged == null)
          return;
        this.GViewRoom_TempRowChanged((object) this, new TempDataSet.GViewRoom_TempRowChangeEvent((TempDataSet.GViewRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GViewRoom_TempRowChanging == null)
          return;
        this.GViewRoom_TempRowChanging((object) this, new TempDataSet.GViewRoom_TempRowChangeEvent((TempDataSet.GViewRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GViewRoom_TempRowDeleted == null)
          return;
        this.GViewRoom_TempRowDeleted((object) this, new TempDataSet.GViewRoom_TempRowChangeEvent((TempDataSet.GViewRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GViewRoom_TempRowDeleting == null)
          return;
        this.GViewRoom_TempRowDeleting((object) this, new TempDataSet.GViewRoom_TempRowChangeEvent((TempDataSet.GViewRoom_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveGViewRoom_TempRow(TempDataSet.GViewRoom_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GViewRoom_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class IssueCardHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnCardType;
      private DataColumn columnClientID;
      private DataColumn columnCardStatus;
      private DataColumn columnKeyCharge;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public IssueCardHistoryDataTable()
      {
        this.TableName = "IssueCardHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal IssueCardHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected IssueCardHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn KeyChargeColumn => this.columnKeyCharge;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.IssueCardHistoryRow this[int index]
      {
        get => (TempDataSet.IssueCardHistoryRow) this.Rows[index];
      }

      public event TempDataSet.IssueCardHistoryRowChangeEventHandler IssueCardHistoryRowChanging;

      public event TempDataSet.IssueCardHistoryRowChangeEventHandler IssueCardHistoryRowChanged;

      public event TempDataSet.IssueCardHistoryRowChangeEventHandler IssueCardHistoryRowDeleting;

      public event TempDataSet.IssueCardHistoryRowChangeEventHandler IssueCardHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddIssueCardHistoryRow(TempDataSet.IssueCardHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.IssueCardHistoryRow AddIssueCardHistoryRow(
        string CardNo,
        string RoomNo,
        string CardType,
        string ClientID,
        byte CardStatus,
        Decimal KeyCharge,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        bool Update)
      {
        TempDataSet.IssueCardHistoryRow row = (TempDataSet.IssueCardHistoryRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) CardNo,
          (object) RoomNo,
          (object) CardType,
          (object) ClientID,
          (object) CardStatus,
          (object) KeyCharge,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.IssueCardHistoryDataTable historyDataTable = (TempDataSet.IssueCardHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.IssueCardHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnKeyCharge = this.Columns["KeyCharge"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnKeyCharge = new DataColumn("KeyCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyCharge);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnClientID.MaxLength = 10;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.IssueCardHistoryRow NewIssueCardHistoryRow()
      {
        return (TempDataSet.IssueCardHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.IssueCardHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.IssueCardHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.IssueCardHistoryRowChanged == null)
          return;
        this.IssueCardHistoryRowChanged((object) this, new TempDataSet.IssueCardHistoryRowChangeEvent((TempDataSet.IssueCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.IssueCardHistoryRowChanging == null)
          return;
        this.IssueCardHistoryRowChanging((object) this, new TempDataSet.IssueCardHistoryRowChangeEvent((TempDataSet.IssueCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.IssueCardHistoryRowDeleted == null)
          return;
        this.IssueCardHistoryRowDeleted((object) this, new TempDataSet.IssueCardHistoryRowChangeEvent((TempDataSet.IssueCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.IssueCardHistoryRowDeleting == null)
          return;
        this.IssueCardHistoryRowDeleting((object) this, new TempDataSet.IssueCardHistoryRowChangeEvent((TempDataSet.IssueCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveIssueCardHistoryRow(TempDataSet.IssueCardHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (IssueCardHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class KeyChargesTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnBuildingNo;
      private DataColumn columnKeyDeposit;
      private DataColumn columnSpareKeyCharge;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public KeyChargesTempDataTable()
      {
        this.TableName = "KeyChargesTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal KeyChargesTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected KeyChargesTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn SpareKeyChargeColumn => this.columnSpareKeyCharge;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.KeyChargesTempRow this[int index]
      {
        get => (TempDataSet.KeyChargesTempRow) this.Rows[index];
      }

      public event TempDataSet.KeyChargesTempRowChangeEventHandler KeyChargesTempRowChanging;

      public event TempDataSet.KeyChargesTempRowChangeEventHandler KeyChargesTempRowChanged;

      public event TempDataSet.KeyChargesTempRowChangeEventHandler KeyChargesTempRowDeleting;

      public event TempDataSet.KeyChargesTempRowChangeEventHandler KeyChargesTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddKeyChargesTempRow(TempDataSet.KeyChargesTempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.KeyChargesTempRow AddKeyChargesTempRow(
        string BuildingNo,
        Decimal KeyDeposit,
        Decimal SpareKeyCharge,
        string StaffID,
        bool Update)
      {
        TempDataSet.KeyChargesTempRow row = (TempDataSet.KeyChargesTempRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) BuildingNo,
          (object) KeyDeposit,
          (object) SpareKeyCharge,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.KeyChargesTempDataTable chargesTempDataTable = (TempDataSet.KeyChargesTempDataTable) base.Clone();
        chargesTempDataTable.InitVars();
        return (DataTable) chargesTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.KeyChargesTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnSpareKeyCharge = this.Columns["SpareKeyCharge"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnSpareKeyCharge = new DataColumn("SpareKeyCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSpareKeyCharge);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnBuildingNo.MaxLength = 2;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.KeyChargesTempRow NewKeyChargesTempRow()
      {
        return (TempDataSet.KeyChargesTempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.KeyChargesTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.KeyChargesTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.KeyChargesTempRowChanged == null)
          return;
        this.KeyChargesTempRowChanged((object) this, new TempDataSet.KeyChargesTempRowChangeEvent((TempDataSet.KeyChargesTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.KeyChargesTempRowChanging == null)
          return;
        this.KeyChargesTempRowChanging((object) this, new TempDataSet.KeyChargesTempRowChangeEvent((TempDataSet.KeyChargesTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.KeyChargesTempRowDeleted == null)
          return;
        this.KeyChargesTempRowDeleted((object) this, new TempDataSet.KeyChargesTempRowChangeEvent((TempDataSet.KeyChargesTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.KeyChargesTempRowDeleting == null)
          return;
        this.KeyChargesTempRowDeleting((object) this, new TempDataSet.KeyChargesTempRowChangeEvent((TempDataSet.KeyChargesTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveKeyChargesTempRow(TempDataSet.KeyChargesTempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (KeyChargesTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class LossCardDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnCardType;
      private DataColumn columnClientID;
      private DataColumn columnCardStatus;
      private DataColumn columnKeyCharge;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public LossCardDataTable()
      {
        this.TableName = "LossCard";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal LossCardDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected LossCardDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn KeyChargeColumn => this.columnKeyCharge;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.LossCardRow this[int index] => (TempDataSet.LossCardRow) this.Rows[index];

      public event TempDataSet.LossCardRowChangeEventHandler LossCardRowChanging;

      public event TempDataSet.LossCardRowChangeEventHandler LossCardRowChanged;

      public event TempDataSet.LossCardRowChangeEventHandler LossCardRowDeleting;

      public event TempDataSet.LossCardRowChangeEventHandler LossCardRowDeleted;

      [DebuggerNonUserCode]
      public void AddLossCardRow(TempDataSet.LossCardRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.LossCardRow AddLossCardRow(
        string CardNo,
        string RoomNo,
        string CardType,
        string ClientID,
        byte CardStatus,
        Decimal KeyCharge,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        bool Update)
      {
        TempDataSet.LossCardRow row = (TempDataSet.LossCardRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) CardNo,
          (object) RoomNo,
          (object) CardType,
          (object) ClientID,
          (object) CardStatus,
          (object) KeyCharge,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.LossCardDataTable lossCardDataTable = (TempDataSet.LossCardDataTable) base.Clone();
        lossCardDataTable.InitVars();
        return (DataTable) lossCardDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.LossCardDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnKeyCharge = this.Columns["KeyCharge"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnKeyCharge = new DataColumn("KeyCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyCharge);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnClientID.MaxLength = 10;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.LossCardRow NewLossCardRow() => (TempDataSet.LossCardRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.LossCardRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.LossCardRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.LossCardRowChanged == null)
          return;
        this.LossCardRowChanged((object) this, new TempDataSet.LossCardRowChangeEvent((TempDataSet.LossCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.LossCardRowChanging == null)
          return;
        this.LossCardRowChanging((object) this, new TempDataSet.LossCardRowChangeEvent((TempDataSet.LossCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.LossCardRowDeleted == null)
          return;
        this.LossCardRowDeleted((object) this, new TempDataSet.LossCardRowChangeEvent((TempDataSet.LossCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.LossCardRowDeleting == null)
          return;
        this.LossCardRowDeleting((object) this, new TempDataSet.LossCardRowChangeEvent((TempDataSet.LossCardRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveLossCardRow(TempDataSet.LossCardRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (LossCardDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class MLogDataTable : DataTable, IEnumerable
    {
      private DataColumn columnStaffID;
      private DataColumn columnLogDate;
      private DataColumn columnInTime;
      private DataColumn columnOutTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public MLogDataTable()
      {
        this.TableName = "MLog";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal MLogDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected MLogDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn LogDateColumn => this.columnLogDate;

      [DebuggerNonUserCode]
      public DataColumn InTimeColumn => this.columnInTime;

      [DebuggerNonUserCode]
      public DataColumn OutTimeColumn => this.columnOutTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.MLogRow this[int index] => (TempDataSet.MLogRow) this.Rows[index];

      public event TempDataSet.MLogRowChangeEventHandler MLogRowChanging;

      public event TempDataSet.MLogRowChangeEventHandler MLogRowChanged;

      public event TempDataSet.MLogRowChangeEventHandler MLogRowDeleting;

      public event TempDataSet.MLogRowChangeEventHandler MLogRowDeleted;

      [DebuggerNonUserCode]
      public void AddMLogRow(TempDataSet.MLogRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.MLogRow AddMLogRow(
        string StaffID,
        DateTime LogDate,
        string InTime,
        string OutTime,
        bool Update)
      {
        TempDataSet.MLogRow row = (TempDataSet.MLogRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) StaffID,
          (object) LogDate,
          (object) InTime,
          (object) OutTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.MLogDataTable mlogDataTable = (TempDataSet.MLogDataTable) base.Clone();
        mlogDataTable.InitVars();
        return (DataTable) mlogDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance() => (DataTable) new TempDataSet.MLogDataTable();

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnStaffID = this.Columns["StaffID"];
        this.columnLogDate = this.Columns["LogDate"];
        this.columnInTime = this.Columns["InTime"];
        this.columnOutTime = this.Columns["OutTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnLogDate = new DataColumn("LogDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLogDate);
        this.columnInTime = new DataColumn("InTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInTime);
        this.columnOutTime = new DataColumn("OutTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOutTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnStaffID.MaxLength = 10;
        this.columnInTime.MaxLength = 12;
        this.columnOutTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.MLogRow NewMLogRow() => (TempDataSet.MLogRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.MLogRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.MLogRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MLogRowChanged == null)
          return;
        this.MLogRowChanged((object) this, new TempDataSet.MLogRowChangeEvent((TempDataSet.MLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MLogRowChanging == null)
          return;
        this.MLogRowChanging((object) this, new TempDataSet.MLogRowChangeEvent((TempDataSet.MLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MLogRowDeleted == null)
          return;
        this.MLogRowDeleted((object) this, new TempDataSet.MLogRowChangeEvent((TempDataSet.MLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MLogRowDeleting == null)
          return;
        this.MLogRowDeleting((object) this, new TempDataSet.MLogRowChangeEvent((TempDataSet.MLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveMLogRow(TempDataSet.MLogRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MLogDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ReceiptDataTable : DataTable, IEnumerable
    {
      private DataColumn columnTransID;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardNo;
      private DataColumn columnOldRoom;
      private DataColumn columnReserveRef;
      private DataColumn columnRoomNo;
      private DataColumn columnCondition;
      private DataColumn columnPreviousAdvance;
      private DataColumn columnAdvancedPayment;
      private DataColumn columnBalance;
      private DataColumn columnBond;
      private DataColumn columnRBA;
      private DataColumn columnDeposit;
      private DataColumn columnKeyDeposit;
      private DataColumn columnExtraCharge;
      private DataColumn columnExDescription;
      private DataColumn columnRoomCharge;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnValidStart;
      private DataColumn columnValidEnd;
      private DataColumn columnCheckInDate;
      private DataColumn columnChargeType;
      private DataColumn columnBonusClaim;
      private DataColumn columnGST;
      private DataColumn columnLastPayment;
      private DataColumn columnStaffID;

      [DebuggerNonUserCode]
      public ReceiptDataTable()
      {
        this.TableName = "Receipt";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ReceiptDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ReceiptDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn TransIDColumn => this.columnTransID;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn OldRoomColumn => this.columnOldRoom;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ConditionColumn => this.columnCondition;

      [DebuggerNonUserCode]
      public DataColumn PreviousAdvanceColumn => this.columnPreviousAdvance;

      [DebuggerNonUserCode]
      public DataColumn AdvancedPaymentColumn => this.columnAdvancedPayment;

      [DebuggerNonUserCode]
      public DataColumn BalanceColumn => this.columnBalance;

      [DebuggerNonUserCode]
      public DataColumn BondColumn => this.columnBond;

      [DebuggerNonUserCode]
      public DataColumn RBAColumn => this.columnRBA;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn KeyDepositColumn => this.columnKeyDeposit;

      [DebuggerNonUserCode]
      public DataColumn ExtraChargeColumn => this.columnExtraCharge;

      [DebuggerNonUserCode]
      public DataColumn ExDescriptionColumn => this.columnExDescription;

      [DebuggerNonUserCode]
      public DataColumn RoomChargeColumn => this.columnRoomCharge;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn ValidStartColumn => this.columnValidStart;

      [DebuggerNonUserCode]
      public DataColumn ValidEndColumn => this.columnValidEnd;

      [DebuggerNonUserCode]
      public DataColumn CheckInDateColumn => this.columnCheckInDate;

      [DebuggerNonUserCode]
      public DataColumn ChargeTypeColumn => this.columnChargeType;

      [DebuggerNonUserCode]
      public DataColumn BonusClaimColumn => this.columnBonusClaim;

      [DebuggerNonUserCode]
      public DataColumn GSTColumn => this.columnGST;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ReceiptRow this[int index] => (TempDataSet.ReceiptRow) this.Rows[index];

      public event TempDataSet.ReceiptRowChangeEventHandler ReceiptRowChanging;

      public event TempDataSet.ReceiptRowChangeEventHandler ReceiptRowChanged;

      public event TempDataSet.ReceiptRowChangeEventHandler ReceiptRowDeleting;

      public event TempDataSet.ReceiptRowChangeEventHandler ReceiptRowDeleted;

      [DebuggerNonUserCode]
      public void AddReceiptRow(TempDataSet.ReceiptRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.ReceiptRow AddReceiptRow(
        int TransID,
        string ClientID,
        string ForeName,
        string SurName,
        string CardNo,
        string OldRoom,
        string ReserveRef,
        string RoomNo,
        string Condition,
        Decimal PreviousAdvance,
        Decimal AdvancedPayment,
        Decimal Balance,
        Decimal Bond,
        Decimal RBA,
        Decimal Deposit,
        Decimal KeyDeposit,
        Decimal ExtraCharge,
        string ExDescription,
        Decimal RoomCharge,
        string TransType,
        DateTime TransDate,
        string TransTime,
        DateTime ValidStart,
        DateTime ValidEnd,
        DateTime CheckInDate,
        string ChargeType,
        Decimal BonusClaim,
        Decimal GST,
        Decimal LastPayment,
        string StaffID)
      {
        TempDataSet.ReceiptRow row = (TempDataSet.ReceiptRow) this.NewRow();
        object[] objArray = new object[30]
        {
          (object) TransID,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardNo,
          (object) OldRoom,
          (object) ReserveRef,
          (object) RoomNo,
          (object) Condition,
          (object) PreviousAdvance,
          (object) AdvancedPayment,
          (object) Balance,
          (object) Bond,
          (object) RBA,
          (object) Deposit,
          (object) KeyDeposit,
          (object) ExtraCharge,
          (object) ExDescription,
          (object) RoomCharge,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) ValidStart,
          (object) ValidEnd,
          (object) CheckInDate,
          (object) ChargeType,
          (object) BonusClaim,
          (object) GST,
          (object) LastPayment,
          (object) StaffID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ReceiptDataTable receiptDataTable = (TempDataSet.ReceiptDataTable) base.Clone();
        receiptDataTable.InitVars();
        return (DataTable) receiptDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ReceiptDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnTransID = this.Columns["TransID"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnOldRoom = this.Columns["OldRoom"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCondition = this.Columns["Condition"];
        this.columnPreviousAdvance = this.Columns["PreviousAdvance"];
        this.columnAdvancedPayment = this.Columns["AdvancedPayment"];
        this.columnBalance = this.Columns["Balance"];
        this.columnBond = this.Columns["Bond"];
        this.columnRBA = this.Columns["RBA"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnKeyDeposit = this.Columns["KeyDeposit"];
        this.columnExtraCharge = this.Columns["ExtraCharge"];
        this.columnExDescription = this.Columns["ExDescription"];
        this.columnRoomCharge = this.Columns["RoomCharge"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnValidStart = this.Columns["ValidStart"];
        this.columnValidEnd = this.Columns["ValidEnd"];
        this.columnCheckInDate = this.Columns["CheckInDate"];
        this.columnChargeType = this.Columns["ChargeType"];
        this.columnBonusClaim = this.Columns["BonusClaim"];
        this.columnGST = this.Columns["GST"];
        this.columnLastPayment = this.Columns["LastPayment"];
        this.columnStaffID = this.Columns["StaffID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnTransID = new DataColumn("TransID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransID);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnOldRoom = new DataColumn("OldRoom", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOldRoom);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCondition = new DataColumn("Condition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCondition);
        this.columnPreviousAdvance = new DataColumn("PreviousAdvance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPreviousAdvance);
        this.columnAdvancedPayment = new DataColumn("AdvancedPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAdvancedPayment);
        this.columnBalance = new DataColumn("Balance", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBalance);
        this.columnBond = new DataColumn("Bond", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBond);
        this.columnRBA = new DataColumn("RBA", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRBA);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnKeyDeposit = new DataColumn("KeyDeposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyDeposit);
        this.columnExtraCharge = new DataColumn("ExtraCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExtraCharge);
        this.columnExDescription = new DataColumn("ExDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExDescription);
        this.columnRoomCharge = new DataColumn("RoomCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomCharge);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnValidStart = new DataColumn("ValidStart", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidStart);
        this.columnValidEnd = new DataColumn("ValidEnd", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidEnd);
        this.columnCheckInDate = new DataColumn("CheckInDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckInDate);
        this.columnChargeType = new DataColumn("ChargeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChargeType);
        this.columnBonusClaim = new DataColumn("BonusClaim", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonusClaim);
        this.columnGST = new DataColumn("GST", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGST);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTransID
        }, false));
        this.columnTransID.Unique = true;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnOldRoom.MaxLength = 5;
        this.columnReserveRef.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnCondition.MaxLength = 20;
        this.columnExDescription.MaxLength = 30;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
        this.columnChargeType.MaxLength = 1;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ReceiptRow NewReceiptRow() => (TempDataSet.ReceiptRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ReceiptRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ReceiptRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ReceiptRowChanged == null)
          return;
        this.ReceiptRowChanged((object) this, new TempDataSet.ReceiptRowChangeEvent((TempDataSet.ReceiptRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ReceiptRowChanging == null)
          return;
        this.ReceiptRowChanging((object) this, new TempDataSet.ReceiptRowChangeEvent((TempDataSet.ReceiptRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ReceiptRowDeleted == null)
          return;
        this.ReceiptRowDeleted((object) this, new TempDataSet.ReceiptRowChangeEvent((TempDataSet.ReceiptRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ReceiptRowDeleting == null)
          return;
        this.ReceiptRowDeleting((object) this, new TempDataSet.ReceiptRowChangeEvent((TempDataSet.ReceiptRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveReceiptRow(TempDataSet.ReceiptRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ReceiptDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ReservationListDataTable : DataTable, IEnumerable
    {
      private DataColumn columnReserveRef;
      private DataColumn columnRoomNo;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnDeposit;
      private DataColumn columnReserveType;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public ReservationListDataTable()
      {
        this.TableName = "ReservationList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ReservationListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ReservationListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn DepositColumn => this.columnDeposit;

      [DebuggerNonUserCode]
      public DataColumn ReserveTypeColumn => this.columnReserveType;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ReservationListRow this[int index]
      {
        get => (TempDataSet.ReservationListRow) this.Rows[index];
      }

      public event TempDataSet.ReservationListRowChangeEventHandler ReservationListRowChanging;

      public event TempDataSet.ReservationListRowChangeEventHandler ReservationListRowChanged;

      public event TempDataSet.ReservationListRowChangeEventHandler ReservationListRowDeleting;

      public event TempDataSet.ReservationListRowChangeEventHandler ReservationListRowDeleted;

      [DebuggerNonUserCode]
      public void AddReservationListRow(TempDataSet.ReservationListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.ReservationListRow AddReservationListRow(
        string ReserveRef,
        string RoomNo,
        string ClientID,
        string ForeName,
        string SurName,
        Decimal Deposit,
        string ReserveType,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.ReservationListRow row = (TempDataSet.ReservationListRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) ReserveRef,
          (object) RoomNo,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) Deposit,
          (object) ReserveType,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ReservationListDataTable reservationListDataTable = (TempDataSet.ReservationListDataTable) base.Clone();
        reservationListDataTable.InitVars();
        return (DataTable) reservationListDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ReservationListDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnDeposit = this.Columns["Deposit"];
        this.columnReserveType = this.Columns["ReserveType"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnDeposit = new DataColumn("Deposit", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeposit);
        this.columnReserveType = new DataColumn("ReserveType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveType);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnReserveRef
        }, false));
        this.columnReserveRef.Unique = true;
        this.columnReserveRef.MaxLength = 10;
        this.columnRoomNo.MaxLength = 5;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnReserveType.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ReservationListRow NewReservationListRow()
      {
        return (TempDataSet.ReservationListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ReservationListRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ReservationListRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ReservationListRowChanged == null)
          return;
        this.ReservationListRowChanged((object) this, new TempDataSet.ReservationListRowChangeEvent((TempDataSet.ReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ReservationListRowChanging == null)
          return;
        this.ReservationListRowChanging((object) this, new TempDataSet.ReservationListRowChangeEvent((TempDataSet.ReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ReservationListRowDeleted == null)
          return;
        this.ReservationListRowDeleted((object) this, new TempDataSet.ReservationListRowChangeEvent((TempDataSet.ReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ReservationListRowDeleting == null)
          return;
        this.ReservationListRowDeleting((object) this, new TempDataSet.ReservationListRowChangeEvent((TempDataSet.ReservationListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveReservationListRow(TempDataSet.ReservationListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ReservationListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class RoomDetailDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnRmDescription;
      private DataColumn columnDescription;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;

      [DebuggerNonUserCode]
      public RoomDetailDataTable()
      {
        this.TableName = "RoomDetail";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal RoomDetailDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected RoomDetailDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.RoomDetailRow this[int index]
      {
        get => (TempDataSet.RoomDetailRow) this.Rows[index];
      }

      public event TempDataSet.RoomDetailRowChangeEventHandler RoomDetailRowChanging;

      public event TempDataSet.RoomDetailRowChangeEventHandler RoomDetailRowChanged;

      public event TempDataSet.RoomDetailRowChangeEventHandler RoomDetailRowDeleting;

      public event TempDataSet.RoomDetailRowChangeEventHandler RoomDetailRowDeleted;

      [DebuggerNonUserCode]
      public void AddRoomDetailRow(TempDataSet.RoomDetailRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.RoomDetailRow AddRoomDetailRow(
        string RoomNo,
        string RmDescription,
        string Description,
        string ClientID,
        string ForeName,
        string SurName,
        DateTime StartDate,
        DateTime EndDate)
      {
        TempDataSet.RoomDetailRow row = (TempDataSet.RoomDetailRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) RoomNo,
          (object) RmDescription,
          (object) Description,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) StartDate,
          (object) EndDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.RoomDetailDataTable roomDetailDataTable = (TempDataSet.RoomDetailDataTable) base.Clone();
        roomDetailDataTable.InitVars();
        return (DataTable) roomDetailDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.RoomDetailDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnDescription = this.Columns["Description"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.columnRoomNo.MaxLength = 5;
        this.columnRmDescription.MaxLength = 30;
        this.columnDescription.MaxLength = 30;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomDetailRow NewRoomDetailRow()
      {
        return (TempDataSet.RoomDetailRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.RoomDetailRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.RoomDetailRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RoomDetailRowChanged == null)
          return;
        this.RoomDetailRowChanged((object) this, new TempDataSet.RoomDetailRowChangeEvent((TempDataSet.RoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RoomDetailRowChanging == null)
          return;
        this.RoomDetailRowChanging((object) this, new TempDataSet.RoomDetailRowChangeEvent((TempDataSet.RoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RoomDetailRowDeleted == null)
          return;
        this.RoomDetailRowDeleted((object) this, new TempDataSet.RoomDetailRowChangeEvent((TempDataSet.RoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RoomDetailRowDeleting == null)
          return;
        this.RoomDetailRowDeleting((object) this, new TempDataSet.RoomDetailRowChangeEvent((TempDataSet.RoomDetailRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveRoomDetailRow(TempDataSet.RoomDetailRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RoomDetailDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class RoomHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnReserveRef;
      private DataColumn columnTransType;
      private DataColumn columnTransDate;
      private DataColumn columnTransTime;
      private DataColumn columnLastPayment;

      [DebuggerNonUserCode]
      public RoomHistoryDataTable()
      {
        this.TableName = "RoomHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal RoomHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected RoomHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn ReserveRefColumn => this.columnReserveRef;

      [DebuggerNonUserCode]
      public DataColumn TransTypeColumn => this.columnTransType;

      [DebuggerNonUserCode]
      public DataColumn TransDateColumn => this.columnTransDate;

      [DebuggerNonUserCode]
      public DataColumn TransTimeColumn => this.columnTransTime;

      [DebuggerNonUserCode]
      public DataColumn LastPaymentColumn => this.columnLastPayment;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.RoomHistoryRow this[int index]
      {
        get => (TempDataSet.RoomHistoryRow) this.Rows[index];
      }

      public event TempDataSet.RoomHistoryRowChangeEventHandler RoomHistoryRowChanging;

      public event TempDataSet.RoomHistoryRowChangeEventHandler RoomHistoryRowChanged;

      public event TempDataSet.RoomHistoryRowChangeEventHandler RoomHistoryRowDeleting;

      public event TempDataSet.RoomHistoryRowChangeEventHandler RoomHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddRoomHistoryRow(TempDataSet.RoomHistoryRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.RoomHistoryRow AddRoomHistoryRow(
        string ClientID,
        string ForeName,
        string SurName,
        string CardNo,
        string RoomNo,
        string ReserveRef,
        string TransType,
        DateTime TransDate,
        string TransTime,
        Decimal LastPayment)
      {
        TempDataSet.RoomHistoryRow row = (TempDataSet.RoomHistoryRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) CardNo,
          (object) RoomNo,
          (object) ReserveRef,
          (object) TransType,
          (object) TransDate,
          (object) TransTime,
          (object) LastPayment
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.RoomHistoryDataTable historyDataTable = (TempDataSet.RoomHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.RoomHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnReserveRef = this.Columns["ReserveRef"];
        this.columnTransType = this.Columns["TransType"];
        this.columnTransDate = this.Columns["TransDate"];
        this.columnTransTime = this.Columns["TransTime"];
        this.columnLastPayment = this.Columns["LastPayment"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnReserveRef = new DataColumn("ReserveRef", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReserveRef);
        this.columnTransType = new DataColumn("TransType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransType);
        this.columnTransDate = new DataColumn("TransDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransDate);
        this.columnTransTime = new DataColumn("TransTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransTime);
        this.columnLastPayment = new DataColumn("LastPayment", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastPayment);
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnReserveRef.MaxLength = 10;
        this.columnTransType.MaxLength = 2;
        this.columnTransTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomHistoryRow NewRoomHistoryRow()
      {
        return (TempDataSet.RoomHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.RoomHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.RoomHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RoomHistoryRowChanged == null)
          return;
        this.RoomHistoryRowChanged((object) this, new TempDataSet.RoomHistoryRowChangeEvent((TempDataSet.RoomHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RoomHistoryRowChanging == null)
          return;
        this.RoomHistoryRowChanging((object) this, new TempDataSet.RoomHistoryRowChangeEvent((TempDataSet.RoomHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RoomHistoryRowDeleted == null)
          return;
        this.RoomHistoryRowDeleted((object) this, new TempDataSet.RoomHistoryRowChangeEvent((TempDataSet.RoomHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RoomHistoryRowDeleting == null)
          return;
        this.RoomHistoryRowDeleting((object) this, new TempDataSet.RoomHistoryRowChangeEvent((TempDataSet.RoomHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveRoomHistoryRow(TempDataSet.RoomHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RoomHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class RoomInformationDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnRmDescription;
      private DataColumn columnDescription;
      private DataColumn columnClientID;
      private DataColumn columnBuildingNo;
      private DataColumn columnFloorNo;
      private DataColumn columnDailyRate;
      private DataColumn columnWeeklyRate;
      private DataColumn columnMonthlyRate;
      private DataColumn columnDailyRate2;
      private DataColumn columnWeeklyRate2;
      private DataColumn columnMonthlyRate2;
      private DataColumn columnIssuedCard;

      [DebuggerNonUserCode]
      public RoomInformationDataTable()
      {
        this.TableName = "RoomInformation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal RoomInformationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected RoomInformationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn FloorNoColumn => this.columnFloorNo;

      [DebuggerNonUserCode]
      public DataColumn DailyRateColumn => this.columnDailyRate;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRateColumn => this.columnWeeklyRate;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRateColumn => this.columnMonthlyRate;

      [DebuggerNonUserCode]
      public DataColumn DailyRate2Column => this.columnDailyRate2;

      [DebuggerNonUserCode]
      public DataColumn WeeklyRate2Column => this.columnWeeklyRate2;

      [DebuggerNonUserCode]
      public DataColumn MonthlyRate2Column => this.columnMonthlyRate2;

      [DebuggerNonUserCode]
      public DataColumn IssuedCardColumn => this.columnIssuedCard;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.RoomInformationRow this[int index]
      {
        get => (TempDataSet.RoomInformationRow) this.Rows[index];
      }

      public event TempDataSet.RoomInformationRowChangeEventHandler RoomInformationRowChanging;

      public event TempDataSet.RoomInformationRowChangeEventHandler RoomInformationRowChanged;

      public event TempDataSet.RoomInformationRowChangeEventHandler RoomInformationRowDeleting;

      public event TempDataSet.RoomInformationRowChangeEventHandler RoomInformationRowDeleted;

      [DebuggerNonUserCode]
      public void AddRoomInformationRow(TempDataSet.RoomInformationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomInformationRow AddRoomInformationRow(
        string RoomNo,
        string RmDescription,
        string Description,
        string ClientID,
        string BuildingNo,
        string FloorNo,
        Decimal DailyRate,
        Decimal WeeklyRate,
        Decimal MonthlyRate,
        Decimal DailyRate2,
        Decimal WeeklyRate2,
        Decimal MonthlyRate2,
        short IssuedCard)
      {
        TempDataSet.RoomInformationRow row = (TempDataSet.RoomInformationRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) RoomNo,
          (object) RmDescription,
          (object) Description,
          (object) ClientID,
          (object) BuildingNo,
          (object) FloorNo,
          (object) DailyRate,
          (object) WeeklyRate,
          (object) MonthlyRate,
          (object) DailyRate2,
          (object) WeeklyRate2,
          (object) MonthlyRate2,
          (object) IssuedCard
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.RoomInformationDataTable informationDataTable = (TempDataSet.RoomInformationDataTable) base.Clone();
        informationDataTable.InitVars();
        return (DataTable) informationDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.RoomInformationDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnDescription = this.Columns["Description"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnFloorNo = this.Columns["FloorNo"];
        this.columnDailyRate = this.Columns["DailyRate"];
        this.columnWeeklyRate = this.Columns["WeeklyRate"];
        this.columnMonthlyRate = this.Columns["MonthlyRate"];
        this.columnDailyRate2 = this.Columns["DailyRate2"];
        this.columnWeeklyRate2 = this.Columns["WeeklyRate2"];
        this.columnMonthlyRate2 = this.Columns["MonthlyRate2"];
        this.columnIssuedCard = this.Columns["IssuedCard"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnFloorNo = new DataColumn("FloorNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFloorNo);
        this.columnDailyRate = new DataColumn("DailyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate);
        this.columnWeeklyRate = new DataColumn("WeeklyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate);
        this.columnMonthlyRate = new DataColumn("MonthlyRate", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate);
        this.columnDailyRate2 = new DataColumn("DailyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDailyRate2);
        this.columnWeeklyRate2 = new DataColumn("WeeklyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWeeklyRate2);
        this.columnMonthlyRate2 = new DataColumn("MonthlyRate2", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMonthlyRate2);
        this.columnIssuedCard = new DataColumn("IssuedCard", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIssuedCard);
        this.columnRoomNo.MaxLength = 5;
        this.columnRmDescription.MaxLength = 30;
        this.columnDescription.MaxLength = 30;
        this.columnClientID.MaxLength = 10;
        this.columnBuildingNo.MaxLength = 2;
        this.columnFloorNo.MaxLength = 2;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomInformationRow NewRoomInformationRow()
      {
        return (TempDataSet.RoomInformationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.RoomInformationRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.RoomInformationRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RoomInformationRowChanged == null)
          return;
        this.RoomInformationRowChanged((object) this, new TempDataSet.RoomInformationRowChangeEvent((TempDataSet.RoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RoomInformationRowChanging == null)
          return;
        this.RoomInformationRowChanging((object) this, new TempDataSet.RoomInformationRowChangeEvent((TempDataSet.RoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RoomInformationRowDeleted == null)
          return;
        this.RoomInformationRowDeleted((object) this, new TempDataSet.RoomInformationRowChangeEvent((TempDataSet.RoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RoomInformationRowDeleting == null)
          return;
        this.RoomInformationRowDeleting((object) this, new TempDataSet.RoomInformationRowChangeEvent((TempDataSet.RoomInformationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveRoomInformationRow(TempDataSet.RoomInformationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RoomInformationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class RoomTypeTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomType;
      private DataColumn columnRmDescription;
      private DataColumn columnMaxCard;
      private DataColumn columnMinCard;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public RoomTypeTempDataTable()
      {
        this.TableName = "RoomTypeTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal RoomTypeTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected RoomTypeTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomTypeColumn => this.columnRoomType;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [DebuggerNonUserCode]
      public DataColumn MaxCardColumn => this.columnMaxCard;

      [DebuggerNonUserCode]
      public DataColumn MinCardColumn => this.columnMinCard;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.RoomTypeTempRow this[int index]
      {
        get => (TempDataSet.RoomTypeTempRow) this.Rows[index];
      }

      public event TempDataSet.RoomTypeTempRowChangeEventHandler RoomTypeTempRowChanging;

      public event TempDataSet.RoomTypeTempRowChangeEventHandler RoomTypeTempRowChanged;

      public event TempDataSet.RoomTypeTempRowChangeEventHandler RoomTypeTempRowDeleting;

      public event TempDataSet.RoomTypeTempRowChangeEventHandler RoomTypeTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddRoomTypeTempRow(TempDataSet.RoomTypeTempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomTypeTempRow AddRoomTypeTempRow(
        byte RoomType,
        string RmDescription,
        byte MaxCard,
        byte MinCard,
        string StaffID,
        bool Update)
      {
        TempDataSet.RoomTypeTempRow row = (TempDataSet.RoomTypeTempRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) RoomType,
          (object) RmDescription,
          (object) MaxCard,
          (object) MinCard,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.RoomTypeTempDataTable typeTempDataTable = (TempDataSet.RoomTypeTempDataTable) base.Clone();
        typeTempDataTable.InitVars();
        return (DataTable) typeTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.RoomTypeTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomType = this.Columns["RoomType"];
        this.columnRmDescription = this.Columns["RmDescription"];
        this.columnMaxCard = this.Columns["MaxCard"];
        this.columnMinCard = this.Columns["MinCard"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomType = new DataColumn("RoomType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomType);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnMaxCard = new DataColumn("MaxCard", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxCard);
        this.columnMinCard = new DataColumn("MinCard", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinCard);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnRoomType
        }, false));
        this.columnRoomType.Unique = true;
        this.columnRmDescription.MaxLength = 30;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomTypeTempRow NewRoomTypeTempRow()
      {
        return (TempDataSet.RoomTypeTempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.RoomTypeTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.RoomTypeTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RoomTypeTempRowChanged == null)
          return;
        this.RoomTypeTempRowChanged((object) this, new TempDataSet.RoomTypeTempRowChangeEvent((TempDataSet.RoomTypeTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RoomTypeTempRowChanging == null)
          return;
        this.RoomTypeTempRowChanging((object) this, new TempDataSet.RoomTypeTempRowChangeEvent((TempDataSet.RoomTypeTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RoomTypeTempRowDeleted == null)
          return;
        this.RoomTypeTempRowDeleted((object) this, new TempDataSet.RoomTypeTempRowChangeEvent((TempDataSet.RoomTypeTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RoomTypeTempRowDeleting == null)
          return;
        this.RoomTypeTempRowDeleting((object) this, new TempDataSet.RoomTypeTempRowChangeEvent((TempDataSet.RoomTypeTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveRoomTypeTempRow(TempDataSet.RoomTypeTempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RoomTypeTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class StaffTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnStaffID;
      private DataColumn columnAccLevel;
      private DataColumn columnAccBuilding1;
      private DataColumn columnAccBuilding2;
      private DataColumn columnAccBuilding3;
      private DataColumn columnAccBuilding4;
      private DataColumn columnAccBuilding5;
      private DataColumn columnAccBuilding6;
      private DataColumn columnSForeName;
      private DataColumn columnSSurName;
      private DataColumn columnIdentity;
      private DataColumn columnPassword;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public StaffTempDataTable()
      {
        this.TableName = "StaffTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal StaffTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected StaffTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn AccLevelColumn => this.columnAccLevel;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding1Column => this.columnAccBuilding1;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding2Column => this.columnAccBuilding2;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding3Column => this.columnAccBuilding3;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding4Column => this.columnAccBuilding4;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding5Column => this.columnAccBuilding5;

      [DebuggerNonUserCode]
      public DataColumn AccBuilding6Column => this.columnAccBuilding6;

      [DebuggerNonUserCode]
      public DataColumn SForeNameColumn => this.columnSForeName;

      [DebuggerNonUserCode]
      public DataColumn SSurNameColumn => this.columnSSurName;

      [DebuggerNonUserCode]
      public DataColumn IdentityColumn => this.columnIdentity;

      [DebuggerNonUserCode]
      public DataColumn PasswordColumn => this.columnPassword;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.StaffTempRow this[int index]
      {
        get => (TempDataSet.StaffTempRow) this.Rows[index];
      }

      public event TempDataSet.StaffTempRowChangeEventHandler StaffTempRowChanging;

      public event TempDataSet.StaffTempRowChangeEventHandler StaffTempRowChanged;

      public event TempDataSet.StaffTempRowChangeEventHandler StaffTempRowDeleting;

      public event TempDataSet.StaffTempRowChangeEventHandler StaffTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddStaffTempRow(TempDataSet.StaffTempRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.StaffTempRow AddStaffTempRow(
        string StaffID,
        string AccLevel,
        bool AccBuilding1,
        bool AccBuilding2,
        bool AccBuilding3,
        bool AccBuilding4,
        bool AccBuilding5,
        bool AccBuilding6,
        string SForeName,
        string SSurName,
        string Identity,
        string Password,
        bool Update)
      {
        TempDataSet.StaffTempRow row = (TempDataSet.StaffTempRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) StaffID,
          (object) AccLevel,
          (object) AccBuilding1,
          (object) AccBuilding2,
          (object) AccBuilding3,
          (object) AccBuilding4,
          (object) AccBuilding5,
          (object) AccBuilding6,
          (object) SForeName,
          (object) SSurName,
          (object) Identity,
          (object) Password,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.StaffTempDataTable staffTempDataTable = (TempDataSet.StaffTempDataTable) base.Clone();
        staffTempDataTable.InitVars();
        return (DataTable) staffTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.StaffTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnStaffID = this.Columns["StaffID"];
        this.columnAccLevel = this.Columns["AccLevel"];
        this.columnAccBuilding1 = this.Columns["AccBuilding1"];
        this.columnAccBuilding2 = this.Columns["AccBuilding2"];
        this.columnAccBuilding3 = this.Columns["AccBuilding3"];
        this.columnAccBuilding4 = this.Columns["AccBuilding4"];
        this.columnAccBuilding5 = this.Columns["AccBuilding5"];
        this.columnAccBuilding6 = this.Columns["AccBuilding6"];
        this.columnSForeName = this.Columns["SForeName"];
        this.columnSSurName = this.Columns["SSurName"];
        this.columnIdentity = this.Columns["Identity"];
        this.columnPassword = this.Columns["Password"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnAccLevel = new DataColumn("AccLevel", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccLevel);
        this.columnAccBuilding1 = new DataColumn("AccBuilding1", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding1);
        this.columnAccBuilding2 = new DataColumn("AccBuilding2", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding2);
        this.columnAccBuilding3 = new DataColumn("AccBuilding3", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding3);
        this.columnAccBuilding4 = new DataColumn("AccBuilding4", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding4);
        this.columnAccBuilding5 = new DataColumn("AccBuilding5", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding5);
        this.columnAccBuilding6 = new DataColumn("AccBuilding6", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccBuilding6);
        this.columnSForeName = new DataColumn("SForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSForeName);
        this.columnSSurName = new DataColumn("SSurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSSurName);
        this.columnIdentity = new DataColumn("Identity", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdentity);
        this.columnPassword = new DataColumn("Password", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPassword);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnStaffID
        }, false));
        this.columnStaffID.Unique = true;
        this.columnStaffID.MaxLength = 10;
        this.columnAccLevel.MaxLength = 1;
        this.columnSForeName.MaxLength = 20;
        this.columnSSurName.MaxLength = 20;
        this.columnIdentity.MaxLength = 20;
        this.columnPassword.MaxLength = 8;
      }

      [DebuggerNonUserCode]
      public TempDataSet.StaffTempRow NewStaffTempRow() => (TempDataSet.StaffTempRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.StaffTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.StaffTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.StaffTempRowChanged == null)
          return;
        this.StaffTempRowChanged((object) this, new TempDataSet.StaffTempRowChangeEvent((TempDataSet.StaffTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.StaffTempRowChanging == null)
          return;
        this.StaffTempRowChanging((object) this, new TempDataSet.StaffTempRowChangeEvent((TempDataSet.StaffTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.StaffTempRowDeleted == null)
          return;
        this.StaffTempRowDeleted((object) this, new TempDataSet.StaffTempRowChangeEvent((TempDataSet.StaffTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.StaffTempRowDeleting == null)
          return;
        this.StaffTempRowDeleting((object) this, new TempDataSet.StaffTempRowChangeEvent((TempDataSet.StaffTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveStaffTempRow(TempDataSet.StaffTempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (StaffTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class SystemSetTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnSystemID;
      private DataColumn columnDescription;
      private DataColumn columnBuildingType;
      private DataColumn columnComport;
      private DataColumn columnGSTRate;
      private DataColumn columnBonus;
      private DataColumn columnCheckOutTime;
      private DataColumn columnMGraceDefault;
      private DataColumn columnWGraceDefault;
      private DataColumn columnDGraceDefault;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public SystemSetTempDataTable()
      {
        this.TableName = "SystemSetTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal SystemSetTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected SystemSetTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn SystemIDColumn => this.columnSystemID;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn BuildingTypeColumn => this.columnBuildingType;

      [DebuggerNonUserCode]
      public DataColumn ComportColumn => this.columnComport;

      [DebuggerNonUserCode]
      public DataColumn GSTRateColumn => this.columnGSTRate;

      [DebuggerNonUserCode]
      public DataColumn BonusColumn => this.columnBonus;

      [DebuggerNonUserCode]
      public DataColumn CheckOutTimeColumn => this.columnCheckOutTime;

      [DebuggerNonUserCode]
      public DataColumn MGraceDefaultColumn => this.columnMGraceDefault;

      [DebuggerNonUserCode]
      public DataColumn WGraceDefaultColumn => this.columnWGraceDefault;

      [DebuggerNonUserCode]
      public DataColumn DGraceDefaultColumn => this.columnDGraceDefault;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.SystemSetTempRow this[int index]
      {
        get => (TempDataSet.SystemSetTempRow) this.Rows[index];
      }

      public event TempDataSet.SystemSetTempRowChangeEventHandler SystemSetTempRowChanging;

      public event TempDataSet.SystemSetTempRowChangeEventHandler SystemSetTempRowChanged;

      public event TempDataSet.SystemSetTempRowChangeEventHandler SystemSetTempRowDeleting;

      public event TempDataSet.SystemSetTempRowChangeEventHandler SystemSetTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddSystemSetTempRow(TempDataSet.SystemSetTempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.SystemSetTempRow AddSystemSetTempRow(
        short SystemID,
        string Description,
        string BuildingType,
        byte Comport,
        double GSTRate,
        bool Bonus,
        string CheckOutTime,
        int MGraceDefault,
        int WGraceDefault,
        int DGraceDefault,
        string StaffID,
        bool Update)
      {
        TempDataSet.SystemSetTempRow row = (TempDataSet.SystemSetTempRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) SystemID,
          (object) Description,
          (object) BuildingType,
          (object) Comport,
          (object) GSTRate,
          (object) Bonus,
          (object) CheckOutTime,
          (object) MGraceDefault,
          (object) WGraceDefault,
          (object) DGraceDefault,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.SystemSetTempDataTable setTempDataTable = (TempDataSet.SystemSetTempDataTable) base.Clone();
        setTempDataTable.InitVars();
        return (DataTable) setTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.SystemSetTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnSystemID = this.Columns["SystemID"];
        this.columnDescription = this.Columns["Description"];
        this.columnBuildingType = this.Columns["BuildingType"];
        this.columnComport = this.Columns["Comport"];
        this.columnGSTRate = this.Columns["GSTRate"];
        this.columnBonus = this.Columns["Bonus"];
        this.columnCheckOutTime = this.Columns["CheckOutTime"];
        this.columnMGraceDefault = this.Columns["MGraceDefault"];
        this.columnWGraceDefault = this.Columns["WGraceDefault"];
        this.columnDGraceDefault = this.Columns["DGraceDefault"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnSystemID = new DataColumn("SystemID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSystemID);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnBuildingType = new DataColumn("BuildingType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingType);
        this.columnComport = new DataColumn("Comport", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnComport);
        this.columnGSTRate = new DataColumn("GSTRate", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGSTRate);
        this.columnBonus = new DataColumn("Bonus", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBonus);
        this.columnCheckOutTime = new DataColumn("CheckOutTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckOutTime);
        this.columnMGraceDefault = new DataColumn("MGraceDefault", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMGraceDefault);
        this.columnWGraceDefault = new DataColumn("WGraceDefault", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWGraceDefault);
        this.columnDGraceDefault = new DataColumn("DGraceDefault", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDGraceDefault);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnDescription.MaxLength = 50;
        this.columnBuildingType.MaxLength = 20;
        this.columnCheckOutTime.MaxLength = 12;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.SystemSetTempRow NewSystemSetTempRow()
      {
        return (TempDataSet.SystemSetTempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.SystemSetTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.SystemSetTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SystemSetTempRowChanged == null)
          return;
        this.SystemSetTempRowChanged((object) this, new TempDataSet.SystemSetTempRowChangeEvent((TempDataSet.SystemSetTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SystemSetTempRowChanging == null)
          return;
        this.SystemSetTempRowChanging((object) this, new TempDataSet.SystemSetTempRowChangeEvent((TempDataSet.SystemSetTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SystemSetTempRowDeleted == null)
          return;
        this.SystemSetTempRowDeleted((object) this, new TempDataSet.SystemSetTempRowChangeEvent((TempDataSet.SystemSetTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SystemSetTempRowDeleting == null)
          return;
        this.SystemSetTempRowDeleting((object) this, new TempDataSet.SystemSetTempRowChangeEvent((TempDataSet.SystemSetTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveSystemSetTempRow(TempDataSet.SystemSetTempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SystemSetTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class UnLockDoorByRoomNoDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnUnLockSDate;
      private DataColumn columnUnLockSTime;
      private DataColumn columnCollectionSDate;
      private DataColumn columnCollectionSTime;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnStaffID;
      private DataColumn columnID;

      [DebuggerNonUserCode]
      public UnLockDoorByRoomNoDataTable()
      {
        this.TableName = "UnLockDoorByRoomNo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal UnLockDoorByRoomNoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected UnLockDoorByRoomNoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn UnLockSDateColumn => this.columnUnLockSDate;

      [DebuggerNonUserCode]
      public DataColumn UnLockSTimeColumn => this.columnUnLockSTime;

      [DebuggerNonUserCode]
      public DataColumn CollectionSDateColumn => this.columnCollectionSDate;

      [DebuggerNonUserCode]
      public DataColumn CollectionSTimeColumn => this.columnCollectionSTime;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn IDColumn => this.columnID;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.UnLockDoorByRoomNoRow this[int index]
      {
        get => (TempDataSet.UnLockDoorByRoomNoRow) this.Rows[index];
      }

      public event TempDataSet.UnLockDoorByRoomNoRowChangeEventHandler UnLockDoorByRoomNoRowChanging;

      public event TempDataSet.UnLockDoorByRoomNoRowChangeEventHandler UnLockDoorByRoomNoRowChanged;

      public event TempDataSet.UnLockDoorByRoomNoRowChangeEventHandler UnLockDoorByRoomNoRowDeleting;

      public event TempDataSet.UnLockDoorByRoomNoRowChangeEventHandler UnLockDoorByRoomNoRowDeleted;

      [DebuggerNonUserCode]
      public void AddUnLockDoorByRoomNoRow(TempDataSet.UnLockDoorByRoomNoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnLockDoorByRoomNoRow AddUnLockDoorByRoomNoRow(
        string RoomNo,
        string CardNo,
        string CardType,
        DateTime UnLockSDate,
        string UnLockSTime,
        DateTime CollectionSDate,
        string CollectionSTime,
        string ClientID,
        string ForeName,
        string SurName,
        string StaffID)
      {
        TempDataSet.UnLockDoorByRoomNoRow row = (TempDataSet.UnLockDoorByRoomNoRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) RoomNo,
          (object) CardNo,
          (object) CardType,
          (object) UnLockSDate,
          (object) UnLockSTime,
          (object) CollectionSDate,
          (object) CollectionSTime,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) StaffID,
          null
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnLockDoorByRoomNoRow FindByID(int ID)
      {
        return (TempDataSet.UnLockDoorByRoomNoRow) this.Rows.Find(new object[1]
        {
          (object) ID
        });
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.UnLockDoorByRoomNoDataTable byRoomNoDataTable = (TempDataSet.UnLockDoorByRoomNoDataTable) base.Clone();
        byRoomNoDataTable.InitVars();
        return (DataTable) byRoomNoDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.UnLockDoorByRoomNoDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnUnLockSDate = this.Columns["UnLockSDate"];
        this.columnUnLockSTime = this.Columns["UnLockSTime"];
        this.columnCollectionSDate = this.Columns["CollectionSDate"];
        this.columnCollectionSTime = this.Columns["CollectionSTime"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnID = this.Columns["ID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnUnLockSDate = new DataColumn("UnLockSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnLockSDate);
        this.columnUnLockSTime = new DataColumn("UnLockSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnLockSTime);
        this.columnCollectionSDate = new DataColumn("CollectionSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSDate);
        this.columnCollectionSTime = new DataColumn("CollectionSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSTime);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnID = new DataColumn("ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnID
        }, true));
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnUnLockSTime.MaxLength = 12;
        this.columnCollectionSTime.MaxLength = 12;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnStaffID.MaxLength = 10;
        this.columnID.AutoIncrement = true;
        this.columnID.AutoIncrementSeed = -1L;
        this.columnID.AutoIncrementStep = -1L;
        this.columnID.AllowDBNull = false;
        this.columnID.Unique = true;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnLockDoorByRoomNoRow NewUnLockDoorByRoomNoRow()
      {
        return (TempDataSet.UnLockDoorByRoomNoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.UnLockDoorByRoomNoRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.UnLockDoorByRoomNoRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.UnLockDoorByRoomNoRowChanged == null)
          return;
        this.UnLockDoorByRoomNoRowChanged((object) this, new TempDataSet.UnLockDoorByRoomNoRowChangeEvent((TempDataSet.UnLockDoorByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.UnLockDoorByRoomNoRowChanging == null)
          return;
        this.UnLockDoorByRoomNoRowChanging((object) this, new TempDataSet.UnLockDoorByRoomNoRowChangeEvent((TempDataSet.UnLockDoorByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.UnLockDoorByRoomNoRowDeleted == null)
          return;
        this.UnLockDoorByRoomNoRowDeleted((object) this, new TempDataSet.UnLockDoorByRoomNoRowChangeEvent((TempDataSet.UnLockDoorByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.UnLockDoorByRoomNoRowDeleting == null)
          return;
        this.UnLockDoorByRoomNoRowDeleting((object) this, new TempDataSet.UnLockDoorByRoomNoRowChangeEvent((TempDataSet.UnLockDoorByRoomNoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveUnLockDoorByRoomNoRow(TempDataSet.UnLockDoorByRoomNoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (UnLockDoorByRoomNoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class UnlockDoorHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnUnLockSDate;
      private DataColumn columnUnLockSTime;
      private DataColumn columnCollectionSDate;
      private DataColumn columnCollectionSTime;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnStaffID;
      private DataColumn columnID;

      [DebuggerNonUserCode]
      public UnlockDoorHistoryDataTable()
      {
        this.TableName = "UnlockDoorHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal UnlockDoorHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected UnlockDoorHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn UnLockSDateColumn => this.columnUnLockSDate;

      [DebuggerNonUserCode]
      public DataColumn UnLockSTimeColumn => this.columnUnLockSTime;

      [DebuggerNonUserCode]
      public DataColumn CollectionSDateColumn => this.columnCollectionSDate;

      [DebuggerNonUserCode]
      public DataColumn CollectionSTimeColumn => this.columnCollectionSTime;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn IDColumn => this.columnID;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.UnlockDoorHistoryRow this[int index]
      {
        get => (TempDataSet.UnlockDoorHistoryRow) this.Rows[index];
      }

      public event TempDataSet.UnlockDoorHistoryRowChangeEventHandler UnlockDoorHistoryRowChanging;

      public event TempDataSet.UnlockDoorHistoryRowChangeEventHandler UnlockDoorHistoryRowChanged;

      public event TempDataSet.UnlockDoorHistoryRowChangeEventHandler UnlockDoorHistoryRowDeleting;

      public event TempDataSet.UnlockDoorHistoryRowChangeEventHandler UnlockDoorHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddUnlockDoorHistoryRow(TempDataSet.UnlockDoorHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnlockDoorHistoryRow AddUnlockDoorHistoryRow(
        string RoomNo,
        string CardNo,
        string CardType,
        DateTime UnLockSDate,
        string UnLockSTime,
        DateTime CollectionSDate,
        string CollectionSTime,
        string ClientID,
        string ForeName,
        string SurName,
        string StaffID)
      {
        TempDataSet.UnlockDoorHistoryRow row = (TempDataSet.UnlockDoorHistoryRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) RoomNo,
          (object) CardNo,
          (object) CardType,
          (object) UnLockSDate,
          (object) UnLockSTime,
          (object) CollectionSDate,
          (object) CollectionSTime,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) StaffID,
          null
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnlockDoorHistoryRow FindByID(int ID)
      {
        return (TempDataSet.UnlockDoorHistoryRow) this.Rows.Find(new object[1]
        {
          (object) ID
        });
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.UnlockDoorHistoryDataTable historyDataTable = (TempDataSet.UnlockDoorHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.UnlockDoorHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnUnLockSDate = this.Columns["UnLockSDate"];
        this.columnUnLockSTime = this.Columns["UnLockSTime"];
        this.columnCollectionSDate = this.Columns["CollectionSDate"];
        this.columnCollectionSTime = this.Columns["CollectionSTime"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnID = this.Columns["ID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnUnLockSDate = new DataColumn("UnLockSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnLockSDate);
        this.columnUnLockSTime = new DataColumn("UnLockSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnLockSTime);
        this.columnCollectionSDate = new DataColumn("CollectionSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSDate);
        this.columnCollectionSTime = new DataColumn("CollectionSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSTime);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnID = new DataColumn("ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnID
        }, true));
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnUnLockSTime.MaxLength = 12;
        this.columnCollectionSTime.MaxLength = 12;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnStaffID.MaxLength = 10;
        this.columnID.AutoIncrement = true;
        this.columnID.AutoIncrementSeed = -1L;
        this.columnID.AutoIncrementStep = -1L;
        this.columnID.AllowDBNull = false;
        this.columnID.Unique = true;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnlockDoorHistoryRow NewUnlockDoorHistoryRow()
      {
        return (TempDataSet.UnlockDoorHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.UnlockDoorHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.UnlockDoorHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.UnlockDoorHistoryRowChanged == null)
          return;
        this.UnlockDoorHistoryRowChanged((object) this, new TempDataSet.UnlockDoorHistoryRowChangeEvent((TempDataSet.UnlockDoorHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.UnlockDoorHistoryRowChanging == null)
          return;
        this.UnlockDoorHistoryRowChanging((object) this, new TempDataSet.UnlockDoorHistoryRowChangeEvent((TempDataSet.UnlockDoorHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.UnlockDoorHistoryRowDeleted == null)
          return;
        this.UnlockDoorHistoryRowDeleted((object) this, new TempDataSet.UnlockDoorHistoryRowChangeEvent((TempDataSet.UnlockDoorHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.UnlockDoorHistoryRowDeleting == null)
          return;
        this.UnlockDoorHistoryRowDeleting((object) this, new TempDataSet.UnlockDoorHistoryRowChangeEvent((TempDataSet.UnlockDoorHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveUnlockDoorHistoryRow(TempDataSet.UnlockDoorHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (UnlockDoorHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class UploadDataDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnCardNo;
      private DataColumn columnCardType;
      private DataColumn columnUnlockSDate;
      private DataColumn columnUnlockSTime;
      private DataColumn columnCollectionSDate;
      private DataColumn columnCollectionSTime;
      private DataColumn columnClientID;
      private DataColumn columnForeName;
      private DataColumn columnSurName;
      private DataColumn columnStaffID;

      [DebuggerNonUserCode]
      public UploadDataDataTable()
      {
        this.TableName = "UploadData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal UploadDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected UploadDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn UnlockSDateColumn => this.columnUnlockSDate;

      [DebuggerNonUserCode]
      public DataColumn UnlockSTimeColumn => this.columnUnlockSTime;

      [DebuggerNonUserCode]
      public DataColumn CollectionSDateColumn => this.columnCollectionSDate;

      [DebuggerNonUserCode]
      public DataColumn CollectionSTimeColumn => this.columnCollectionSTime;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn ForeNameColumn => this.columnForeName;

      [DebuggerNonUserCode]
      public DataColumn SurNameColumn => this.columnSurName;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.UploadDataRow this[int index]
      {
        get => (TempDataSet.UploadDataRow) this.Rows[index];
      }

      public event TempDataSet.UploadDataRowChangeEventHandler UploadDataRowChanging;

      public event TempDataSet.UploadDataRowChangeEventHandler UploadDataRowChanged;

      public event TempDataSet.UploadDataRowChangeEventHandler UploadDataRowDeleting;

      public event TempDataSet.UploadDataRowChangeEventHandler UploadDataRowDeleted;

      [DebuggerNonUserCode]
      public void AddUploadDataRow(TempDataSet.UploadDataRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.UploadDataRow AddUploadDataRow(
        string RoomNo,
        string CardNo,
        string CardType,
        DateTime UnlockSDate,
        string UnlockSTime,
        DateTime CollectionSDate,
        string CollectionSTime,
        string ClientID,
        string ForeName,
        string SurName,
        string StaffID)
      {
        TempDataSet.UploadDataRow row = (TempDataSet.UploadDataRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) RoomNo,
          (object) CardNo,
          (object) CardType,
          (object) UnlockSDate,
          (object) UnlockSTime,
          (object) CollectionSDate,
          (object) CollectionSTime,
          (object) ClientID,
          (object) ForeName,
          (object) SurName,
          (object) StaffID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.UploadDataDataTable uploadDataDataTable = (TempDataSet.UploadDataDataTable) base.Clone();
        uploadDataDataTable.InitVars();
        return (DataTable) uploadDataDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.UploadDataDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardNo = this.Columns["CardNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnUnlockSDate = this.Columns["UnlockSDate"];
        this.columnUnlockSTime = this.Columns["UnlockSTime"];
        this.columnCollectionSDate = this.Columns["CollectionSDate"];
        this.columnCollectionSTime = this.Columns["CollectionSTime"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnForeName = this.Columns["ForeName"];
        this.columnSurName = this.Columns["SurName"];
        this.columnStaffID = this.Columns["StaffID"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnUnlockSDate = new DataColumn("UnlockSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnlockSDate);
        this.columnUnlockSTime = new DataColumn("UnlockSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnlockSTime);
        this.columnCollectionSDate = new DataColumn("CollectionSDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSDate);
        this.columnCollectionSTime = new DataColumn("CollectionSTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCollectionSTime);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnForeName = new DataColumn("ForeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnForeName);
        this.columnSurName = new DataColumn("SurName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSurName);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnRoomNo.MaxLength = 5;
        this.columnCardNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnUnlockSTime.MaxLength = 12;
        this.columnCollectionSTime.MaxLength = 12;
        this.columnClientID.MaxLength = 10;
        this.columnForeName.MaxLength = 20;
        this.columnSurName.MaxLength = 20;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UploadDataRow NewUploadDataRow()
      {
        return (TempDataSet.UploadDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.UploadDataRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.UploadDataRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.UploadDataRowChanged == null)
          return;
        this.UploadDataRowChanged((object) this, new TempDataSet.UploadDataRowChangeEvent((TempDataSet.UploadDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.UploadDataRowChanging == null)
          return;
        this.UploadDataRowChanging((object) this, new TempDataSet.UploadDataRowChangeEvent((TempDataSet.UploadDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.UploadDataRowDeleted == null)
          return;
        this.UploadDataRowDeleted((object) this, new TempDataSet.UploadDataRowChangeEvent((TempDataSet.UploadDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.UploadDataRowDeleting == null)
          return;
        this.UploadDataRowDeleting((object) this, new TempDataSet.UploadDataRowChangeEvent((TempDataSet.UploadDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveUploadDataRow(TempDataSet.UploadDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (UploadDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class VacantStatus_TempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnRoomNo;
      private DataColumn columnStartDate;
      private DataColumn columnEndDate;
      private DataColumn columnDescription;
      private DataColumn columnRmDescription;

      [DebuggerNonUserCode]
      public VacantStatus_TempDataTable()
      {
        this.TableName = "VacantStatus_Temp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal VacantStatus_TempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected VacantStatus_TempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn StartDateColumn => this.columnStartDate;

      [DebuggerNonUserCode]
      public DataColumn EndDateColumn => this.columnEndDate;

      [DebuggerNonUserCode]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      public DataColumn RmDescriptionColumn => this.columnRmDescription;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.VacantStatus_TempRow this[int index]
      {
        get => (TempDataSet.VacantStatus_TempRow) this.Rows[index];
      }

      public event TempDataSet.VacantStatus_TempRowChangeEventHandler VacantStatus_TempRowChanging;

      public event TempDataSet.VacantStatus_TempRowChangeEventHandler VacantStatus_TempRowChanged;

      public event TempDataSet.VacantStatus_TempRowChangeEventHandler VacantStatus_TempRowDeleting;

      public event TempDataSet.VacantStatus_TempRowChangeEventHandler VacantStatus_TempRowDeleted;

      [DebuggerNonUserCode]
      public void AddVacantStatus_TempRow(TempDataSet.VacantStatus_TempRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.VacantStatus_TempRow AddVacantStatus_TempRow(
        string RoomNo,
        DateTime StartDate,
        DateTime EndDate,
        string Description,
        string RmDescription)
      {
        TempDataSet.VacantStatus_TempRow row = (TempDataSet.VacantStatus_TempRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) RoomNo,
          (object) StartDate,
          (object) EndDate,
          (object) Description,
          (object) RmDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.VacantStatus_TempDataTable statusTempDataTable = (TempDataSet.VacantStatus_TempDataTable) base.Clone();
        statusTempDataTable.InitVars();
        return (DataTable) statusTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.VacantStatus_TempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnStartDate = this.Columns["StartDate"];
        this.columnEndDate = this.Columns["EndDate"];
        this.columnDescription = this.Columns["Description"];
        this.columnRmDescription = this.Columns["RmDescription"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnStartDate = new DataColumn("StartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartDate);
        this.columnEndDate = new DataColumn("EndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndDate);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnRmDescription = new DataColumn("RmDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRmDescription);
        this.columnRoomNo.MaxLength = 5;
        this.columnDescription.MaxLength = 20;
        this.columnRmDescription.MaxLength = 30;
      }

      [DebuggerNonUserCode]
      public TempDataSet.VacantStatus_TempRow NewVacantStatus_TempRow()
      {
        return (TempDataSet.VacantStatus_TempRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.VacantStatus_TempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.VacantStatus_TempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.VacantStatus_TempRowChanged == null)
          return;
        this.VacantStatus_TempRowChanged((object) this, new TempDataSet.VacantStatus_TempRowChangeEvent((TempDataSet.VacantStatus_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.VacantStatus_TempRowChanging == null)
          return;
        this.VacantStatus_TempRowChanging((object) this, new TempDataSet.VacantStatus_TempRowChangeEvent((TempDataSet.VacantStatus_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.VacantStatus_TempRowDeleted == null)
          return;
        this.VacantStatus_TempRowDeleted((object) this, new TempDataSet.VacantStatus_TempRowChangeEvent((TempDataSet.VacantStatus_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.VacantStatus_TempRowDeleting == null)
          return;
        this.VacantStatus_TempRowDeleting((object) this, new TempDataSet.VacantStatus_TempRowChangeEvent((TempDataSet.VacantStatus_TempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveVacantStatus_TempRow(TempDataSet.VacantStatus_TempRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (VacantStatus_TempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class ZoneTempDataTable : DataTable, IEnumerable
    {
      private DataColumn columnZoneNo;
      private DataColumn columnZoneName;
      private DataColumn columnBuildingNo;
      private DataColumn columnStaffID;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public ZoneTempDataTable()
      {
        this.TableName = "ZoneTemp";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal ZoneTempDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected ZoneTempDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn ZoneNoColumn => this.columnZoneNo;

      [DebuggerNonUserCode]
      public DataColumn ZoneNameColumn => this.columnZoneName;

      [DebuggerNonUserCode]
      public DataColumn BuildingNoColumn => this.columnBuildingNo;

      [DebuggerNonUserCode]
      public DataColumn StaffIDColumn => this.columnStaffID;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [DebuggerNonUserCode]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.ZoneTempRow this[int index] => (TempDataSet.ZoneTempRow) this.Rows[index];

      public event TempDataSet.ZoneTempRowChangeEventHandler ZoneTempRowChanging;

      public event TempDataSet.ZoneTempRowChangeEventHandler ZoneTempRowChanged;

      public event TempDataSet.ZoneTempRowChangeEventHandler ZoneTempRowDeleting;

      public event TempDataSet.ZoneTempRowChangeEventHandler ZoneTempRowDeleted;

      [DebuggerNonUserCode]
      public void AddZoneTempRow(TempDataSet.ZoneTempRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      public TempDataSet.ZoneTempRow AddZoneTempRow(
        short ZoneNo,
        string ZoneName,
        string BuildingNo,
        string StaffID,
        bool Update)
      {
        TempDataSet.ZoneTempRow row = (TempDataSet.ZoneTempRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) ZoneNo,
          (object) ZoneName,
          (object) BuildingNo,
          (object) StaffID,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.ZoneTempDataTable zoneTempDataTable = (TempDataSet.ZoneTempDataTable) base.Clone();
        zoneTempDataTable.InitVars();
        return (DataTable) zoneTempDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.ZoneTempDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnZoneNo = this.Columns["ZoneNo"];
        this.columnZoneName = this.Columns["ZoneName"];
        this.columnBuildingNo = this.Columns["BuildingNo"];
        this.columnStaffID = this.Columns["StaffID"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnZoneNo = new DataColumn("ZoneNo", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZoneNo);
        this.columnZoneName = new DataColumn("ZoneName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZoneName);
        this.columnBuildingNo = new DataColumn("BuildingNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBuildingNo);
        this.columnStaffID = new DataColumn("StaffID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStaffID);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.columnZoneName.MaxLength = 20;
        this.columnBuildingNo.MaxLength = 2;
        this.columnStaffID.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ZoneTempRow NewZoneTempRow() => (TempDataSet.ZoneTempRow) this.NewRow();

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.ZoneTempRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.ZoneTempRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZoneTempRowChanged == null)
          return;
        this.ZoneTempRowChanged((object) this, new TempDataSet.ZoneTempRowChangeEvent((TempDataSet.ZoneTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZoneTempRowChanging == null)
          return;
        this.ZoneTempRowChanging((object) this, new TempDataSet.ZoneTempRowChangeEvent((TempDataSet.ZoneTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZoneTempRowDeleted == null)
          return;
        this.ZoneTempRowDeleted((object) this, new TempDataSet.ZoneTempRowChangeEvent((TempDataSet.ZoneTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZoneTempRowDeleting == null)
          return;
        this.ZoneTempRowDeleting((object) this, new TempDataSet.ZoneTempRowChangeEvent((TempDataSet.ZoneTempRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveZoneTempRow(TempDataSet.ZoneTempRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZoneTempDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    public class AccIssuedCardHistoryDataTable : DataTable, IEnumerable
    {
      private DataColumn columnCardNo;
      private DataColumn columnRoomNo;
      private DataColumn columnCardType;
      private DataColumn columnClientID;
      private DataColumn columnCardStatus;
      private DataColumn columnKeyCharge;
      private DataColumn columnTempBld;
      private DataColumn columnReaderID;
      private DataColumn columnRecordDate;
      private DataColumn columnRecordTime;
      private DataColumn columnUpdate;

      [DebuggerNonUserCode]
      public AccIssuedCardHistoryDataTable()
      {
        this.TableName = "AccIssuedCardHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      internal AccIssuedCardHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      protected AccIssuedCardHistoryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      public DataColumn CardNoColumn => this.columnCardNo;

      [DebuggerNonUserCode]
      public DataColumn RoomNoColumn => this.columnRoomNo;

      [DebuggerNonUserCode]
      public DataColumn CardTypeColumn => this.columnCardType;

      [DebuggerNonUserCode]
      public DataColumn ClientIDColumn => this.columnClientID;

      [DebuggerNonUserCode]
      public DataColumn CardStatusColumn => this.columnCardStatus;

      [DebuggerNonUserCode]
      public DataColumn KeyChargeColumn => this.columnKeyCharge;

      [DebuggerNonUserCode]
      public DataColumn TempBldColumn => this.columnTempBld;

      [DebuggerNonUserCode]
      public DataColumn ReaderIDColumn => this.columnReaderID;

      [DebuggerNonUserCode]
      public DataColumn RecordDateColumn => this.columnRecordDate;

      [DebuggerNonUserCode]
      public DataColumn RecordTimeColumn => this.columnRecordTime;

      [DebuggerNonUserCode]
      public DataColumn UpdateColumn => this.columnUpdate;

      [Browsable(false)]
      [DebuggerNonUserCode]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      public TempDataSet.AccIssuedCardHistoryRow this[int index]
      {
        get => (TempDataSet.AccIssuedCardHistoryRow) this.Rows[index];
      }

      public event TempDataSet.AccIssuedCardHistoryRowChangeEventHandler AccIssuedCardHistoryRowChanging;

      public event TempDataSet.AccIssuedCardHistoryRowChangeEventHandler AccIssuedCardHistoryRowChanged;

      public event TempDataSet.AccIssuedCardHistoryRowChangeEventHandler AccIssuedCardHistoryRowDeleting;

      public event TempDataSet.AccIssuedCardHistoryRowChangeEventHandler AccIssuedCardHistoryRowDeleted;

      [DebuggerNonUserCode]
      public void AddAccIssuedCardHistoryRow(TempDataSet.AccIssuedCardHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccIssuedCardHistoryRow AddAccIssuedCardHistoryRow(
        string CardNo,
        string RoomNo,
        string CardType,
        string ClientID,
        byte CardStatus,
        Decimal KeyCharge,
        string TempBld,
        string ReaderID,
        DateTime RecordDate,
        string RecordTime,
        bool Update)
      {
        TempDataSet.AccIssuedCardHistoryRow row = (TempDataSet.AccIssuedCardHistoryRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) CardNo,
          (object) RoomNo,
          (object) CardType,
          (object) ClientID,
          (object) CardStatus,
          (object) KeyCharge,
          (object) TempBld,
          (object) ReaderID,
          (object) RecordDate,
          (object) RecordTime,
          (object) Update
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      public virtual IEnumerator GetEnumerator() => this.Rows.GetEnumerator();

      [DebuggerNonUserCode]
      public override DataTable Clone()
      {
        TempDataSet.AccIssuedCardHistoryDataTable historyDataTable = (TempDataSet.AccIssuedCardHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TempDataSet.AccIssuedCardHistoryDataTable();
      }

      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnCardNo = this.Columns["CardNo"];
        this.columnRoomNo = this.Columns["RoomNo"];
        this.columnCardType = this.Columns["CardType"];
        this.columnClientID = this.Columns["ClientID"];
        this.columnCardStatus = this.Columns["CardStatus"];
        this.columnKeyCharge = this.Columns["KeyCharge"];
        this.columnTempBld = this.Columns["TempBld"];
        this.columnReaderID = this.Columns["ReaderID"];
        this.columnRecordDate = this.Columns["RecordDate"];
        this.columnRecordTime = this.Columns["RecordTime"];
        this.columnUpdate = this.Columns["Update"];
      }

      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnCardNo = new DataColumn("CardNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNo);
        this.columnRoomNo = new DataColumn("RoomNo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNo);
        this.columnCardType = new DataColumn("CardType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardType);
        this.columnClientID = new DataColumn("ClientID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientID);
        this.columnCardStatus = new DataColumn("CardStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardStatus);
        this.columnKeyCharge = new DataColumn("KeyCharge", typeof (Decimal), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyCharge);
        this.columnTempBld = new DataColumn("TempBld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempBld);
        this.columnReaderID = new DataColumn("ReaderID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReaderID);
        this.columnRecordDate = new DataColumn("RecordDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordDate);
        this.columnRecordTime = new DataColumn("RecordTime", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordTime);
        this.columnUpdate = new DataColumn("Update", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUpdate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCardNo
        }, false));
        this.columnCardNo.Unique = true;
        this.columnCardNo.MaxLength = 5;
        this.columnRoomNo.MaxLength = 5;
        this.columnCardType.MaxLength = 15;
        this.columnClientID.MaxLength = 10;
        this.columnTempBld.MaxLength = 1;
        this.columnReaderID.MaxLength = 16;
        this.columnRecordTime.MaxLength = 12;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccIssuedCardHistoryRow NewAccIssuedCardHistoryRow()
      {
        return (TempDataSet.AccIssuedCardHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TempDataSet.AccIssuedCardHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (TempDataSet.AccIssuedCardHistoryRow);

      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AccIssuedCardHistoryRowChanged == null)
          return;
        this.AccIssuedCardHistoryRowChanged((object) this, new TempDataSet.AccIssuedCardHistoryRowChangeEvent((TempDataSet.AccIssuedCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AccIssuedCardHistoryRowChanging == null)
          return;
        this.AccIssuedCardHistoryRowChanging((object) this, new TempDataSet.AccIssuedCardHistoryRowChangeEvent((TempDataSet.AccIssuedCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AccIssuedCardHistoryRowDeleted == null)
          return;
        this.AccIssuedCardHistoryRowDeleted((object) this, new TempDataSet.AccIssuedCardHistoryRowChangeEvent((TempDataSet.AccIssuedCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AccIssuedCardHistoryRowDeleting == null)
          return;
        this.AccIssuedCardHistoryRowDeleting((object) this, new TempDataSet.AccIssuedCardHistoryRowChangeEvent((TempDataSet.AccIssuedCardHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      public void RemoveAccIssuedCardHistoryRow(TempDataSet.AccIssuedCardHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TempDataSet tempDataSet = new TempDataSet();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = tempDataSet.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AccIssuedCardHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = tempDataSet.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccBonusEntitleListRow : DataRow
    {
      private TempDataSet.AccBonusEntitleListDataTable tableAccBonusEntitleList;

      [DebuggerNonUserCode]
      internal AccBonusEntitleListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccBonusEntitleList = (TempDataSet.AccBonusEntitleListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccBonusEntitleList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccBonusEntitleList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccBonusEntitleList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccBonusEntitleList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccBonusEntitleList.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccBonusEntitleList.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccBonusEntitleList.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccBonusEntitleList.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccBonusEntitleList.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccBonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccBonusEntitleList.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccBonusEntitleList.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccBonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccBonusEntitleList.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccBonusEntitleList.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccBonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccBonusEntitleList.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusDate
      {
        get
        {
          try
          {
            return (string) this[this.tableAccBonusEntitleList.BonusDateColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccBonusEntitleList.BonusDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccBonusEntitleList.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'AccBonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccBonusEntitleList.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EntitleDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccBonusEntitleList.EntitleDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EntitleDate' in table 'AccBonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccBonusEntitleList.EntitleDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccBonusEntitleList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccBonusEntitleList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccBonusEntitleList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccBonusEntitleList.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableAccBonusEntitleList.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull()
      {
        this[this.tableAccBonusEntitleList.ChargeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccBonusEntitleList.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccBonusEntitleList.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccBonusEntitleList.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableAccBonusEntitleList.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccBonusEntitleList.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableAccBonusEntitleList.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull()
      {
        return this.IsNull(this.tableAccBonusEntitleList.CheckInDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccBonusEntitleList.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusDateNull() => this.IsNull(this.tableAccBonusEntitleList.BonusDateColumn);

      [DebuggerNonUserCode]
      public void SetBonusDateNull()
      {
        this[this.tableAccBonusEntitleList.BonusDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableAccBonusEntitleList.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableAccBonusEntitleList.RoomStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEntitleDateNull()
      {
        return this.IsNull(this.tableAccBonusEntitleList.EntitleDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetEntitleDateNull()
      {
        this[this.tableAccBonusEntitleList.EntitleDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccCurrentGByFloorNoRow : DataRow
    {
      private TempDataSet.AccCurrentGByFloorNoDataTable tableAccCurrentGByFloorNo;

      [DebuggerNonUserCode]
      internal AccCurrentGByFloorNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccCurrentGByFloorNo = (TempDataSet.AccCurrentGByFloorNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGByFloorNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGByFloorNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGByFloorNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGByFloorNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGByFloorNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccCurrentGByFloorNo.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccCurrentGByFloorNo.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccCurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccCurrentGByFloorNo.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccCurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccCurrentGByFloorNo.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccCurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccCurrentGByFloorNo.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'AccCurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccCurrentGByFloorNo.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'AccCurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGByFloorNo.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccCurrentGByFloorNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccCurrentGByFloorNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccCurrentGByFloorNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccCurrentGByFloorNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccCurrentGByFloorNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccCurrentGByFloorNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccCurrentGByFloorNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccCurrentGByFloorNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccCurrentGByFloorNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableAccCurrentGByFloorNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull()
      {
        return this.IsNull(this.tableAccCurrentGByFloorNo.LastPaymentColumn);
      }

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableAccCurrentGByFloorNo.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull()
      {
        return this.IsNull(this.tableAccCurrentGByFloorNo.ValidStartColumn);
      }

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableAccCurrentGByFloorNo.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccCurrentGByFloorNo.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableAccCurrentGByFloorNo.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull()
      {
        return this.IsNull(this.tableAccCurrentGByFloorNo.CheckInDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccCurrentGByFloorNo.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull()
      {
        return this.IsNull(this.tableAccCurrentGByFloorNo.CheckOutDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableAccCurrentGByFloorNo.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableAccCurrentGByFloorNo.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableAccCurrentGByFloorNo.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccCurrentGInfoRow : DataRow
    {
      private TempDataSet.AccCurrentGInfoDataTable tableAccCurrentGInfo;

      [DebuggerNonUserCode]
      internal AccCurrentGInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccCurrentGInfo = (TempDataSet.AccCurrentGInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TempBld' in table 'AccCurrentGInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccCurrentGInfo.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Sex
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.SexColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.SexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Identity
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.IdentityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.IdentityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Nationality
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.NationalityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.NationalityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Address
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Contact
      {
        get
        {
          try
          {
            return (string) this[this.tableAccCurrentGInfo.ContactColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccCurrentGInfo.ContactColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccCurrentGInfo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccCurrentGInfo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccCurrentGInfo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccCurrentGInfo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccCurrentGInfo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccCurrentGInfo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccCurrentGInfo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccCurrentGInfo.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccCurrentGInfo.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccCurrentGInfo.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSexNull() => this.IsNull(this.tableAccCurrentGInfo.SexColumn);

      [DebuggerNonUserCode]
      public void SetSexNull() => this[this.tableAccCurrentGInfo.SexColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsIdentityNull() => this.IsNull(this.tableAccCurrentGInfo.IdentityColumn);

      [DebuggerNonUserCode]
      public void SetIdentityNull()
      {
        this[this.tableAccCurrentGInfo.IdentityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsNationalityNull() => this.IsNull(this.tableAccCurrentGInfo.NationalityColumn);

      [DebuggerNonUserCode]
      public void SetNationalityNull()
      {
        this[this.tableAccCurrentGInfo.NationalityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAddressNull() => this.IsNull(this.tableAccCurrentGInfo.AddressColumn);

      [DebuggerNonUserCode]
      public void SetAddressNull()
      {
        this[this.tableAccCurrentGInfo.AddressColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCountryNull() => this.IsNull(this.tableAccCurrentGInfo.CountryColumn);

      [DebuggerNonUserCode]
      public void SetCountryNull()
      {
        this[this.tableAccCurrentGInfo.CountryColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContactNull() => this.IsNull(this.tableAccCurrentGInfo.ContactColumn);

      [DebuggerNonUserCode]
      public void SetContactNull()
      {
        this[this.tableAccCurrentGInfo.ContactColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccErrorRecordsRow : DataRow
    {
      private TempDataSet.AccErrorRecordsDataTable tableAccErrorRecords;

      [DebuggerNonUserCode]
      internal AccErrorRecordsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccErrorRecords = (TempDataSet.AccErrorRecordsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int PaymentNoteNo
      {
        get
        {
          try
          {
            return (int) this[this.tableAccErrorRecords.PaymentNoteNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccErrorRecords.PaymentNoteNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ErrDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.ErrDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.ErrDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ErrAmount
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccErrorRecords.ErrAmountColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccErrorRecords.ErrAmountColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BondErrDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.BondErrDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.BondErrDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BondErrAmount
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccErrorRecords.BondErrAmountColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccErrorRecords.BondErrAmountColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccErrorRecords.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'AccErrorRecords' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccErrorRecords.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransTime' in table 'AccErrorRecords' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccErrorRecords.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CurrDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccErrorRecords.CurrDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CurrDate' in table 'AccErrorRecords' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccErrorRecords.CurrDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CurrTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.CurrTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.CurrTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccErrorRecords.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccErrorRecords.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsPaymentNoteNoNull()
      {
        return this.IsNull(this.tableAccErrorRecords.PaymentNoteNoColumn);
      }

      [DebuggerNonUserCode]
      public void SetPaymentNoteNoNull()
      {
        this[this.tableAccErrorRecords.PaymentNoteNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccErrorRecords.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccErrorRecords.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccErrorRecords.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccErrorRecords.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsErrDescriptionNull()
      {
        return this.IsNull(this.tableAccErrorRecords.ErrDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetErrDescriptionNull()
      {
        this[this.tableAccErrorRecords.ErrDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsErrAmountNull() => this.IsNull(this.tableAccErrorRecords.ErrAmountColumn);

      [DebuggerNonUserCode]
      public void SetErrAmountNull()
      {
        this[this.tableAccErrorRecords.ErrAmountColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondErrDescriptionNull()
      {
        return this.IsNull(this.tableAccErrorRecords.BondErrDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetBondErrDescriptionNull()
      {
        this[this.tableAccErrorRecords.BondErrDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondErrAmountNull()
      {
        return this.IsNull(this.tableAccErrorRecords.BondErrAmountColumn);
      }

      [DebuggerNonUserCode]
      public void SetBondErrAmountNull()
      {
        this[this.tableAccErrorRecords.BondErrAmountColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableAccErrorRecords.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableAccErrorRecords.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableAccErrorRecords.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableAccErrorRecords.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableAccErrorRecords.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableAccErrorRecords.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCurrDateNull() => this.IsNull(this.tableAccErrorRecords.CurrDateColumn);

      [DebuggerNonUserCode]
      public void SetCurrDateNull()
      {
        this[this.tableAccErrorRecords.CurrDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCurrTimeNull() => this.IsNull(this.tableAccErrorRecords.CurrTimeColumn);

      [DebuggerNonUserCode]
      public void SetCurrTimeNull()
      {
        this[this.tableAccErrorRecords.CurrTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableAccErrorRecords.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull()
      {
        this[this.tableAccErrorRecords.StaffIDColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccExtraRow : DataRow
    {
      private TempDataSet.AccExtraDataTable tableAccExtra;

      [DebuggerNonUserCode]
      internal AccExtraRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccExtra = (TempDataSet.AccExtraDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int ReceiptID
      {
        get
        {
          try
          {
            return (int) this[this.tableAccExtra.ReceiptIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccExtra.ReceiptIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccExtra.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccExtra.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccExtra.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'AccExtra' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccExtra.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccExtra.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccExtra.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccExtra.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccExtra.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReceiptIDNull() => this.IsNull(this.tableAccExtra.ReceiptIDColumn);

      [DebuggerNonUserCode]
      public void SetReceiptIDNull() => this[this.tableAccExtra.ReceiptIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccExtra.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableAccExtra.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccExtra.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableAccExtra.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull() => this.IsNull(this.tableAccExtra.ExDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableAccExtra.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableAccExtra.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableAccExtra.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableAccExtra.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableAccExtra.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableAccExtra.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableAccExtra.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableAccExtra.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull() => this[this.tableAccExtra.TransTimeColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGInfo_TempRow : DataRow
    {
      private TempDataSet.AccGInfo_TempDataTable tableAccGInfo_Temp;

      [DebuggerNonUserCode]
      internal AccGInfo_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGInfo_Temp = (TempDataSet.AccGInfo_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGInfo_Temp.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGInfo_Temp.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGInfo_Temp.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGInfo_Temp.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGInfo_Temp.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGInfo_Temp.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGInfo_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGInfo_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGInfo_Temp.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGInfo_Temp.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGInfo_Temp.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccGInfo_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGInfo_Temp.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGInfo_Temp.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccGInfo_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGInfo_Temp.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGInfo_Temp.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccGInfo_Temp.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccGInfo_Temp.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccGInfo_Temp.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccGInfo_Temp.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableAccGInfo_Temp.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccGInfo_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccGInfo_Temp.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccGInfo_Temp.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableAccGInfo_Temp.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccGInfo_Temp.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableAccGInfo_Temp.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccGInfo_Temp.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableAccGInfo_Temp.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGracePeriodListRow : DataRow
    {
      private TempDataSet.AccGracePeriodListDataTable tableAccGracePeriodList;

      [DebuggerNonUserCode]
      internal AccGracePeriodListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGracePeriodList = (TempDataSet.AccGracePeriodListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGracePeriodList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGracePeriodList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGracePeriodList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGracePeriodList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGracePeriodList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGracePeriodList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGracePeriodList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGracePeriodList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGracePeriodList.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGracePeriodList.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableAccGracePeriodList.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccGracePeriodList.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGracePeriodList.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccGracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGracePeriodList.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGracePeriodList.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccGracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGracePeriodList.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGracePeriodList.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'AccGracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGracePeriodList.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGracePeriodList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccGracePeriodList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccGracePeriodList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccGracePeriodList.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccGracePeriodList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccGracePeriodList.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccGracePeriodList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccGracePeriodList.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccGracePeriodList.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccGracePeriodList.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull()
      {
        return this.IsNull(this.tableAccGracePeriodList.GracePeriodColumn);
      }

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableAccGracePeriodList.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccGracePeriodList.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableAccGracePeriodList.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccGracePeriodList.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableAccGracePeriodList.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull()
      {
        return this.IsNull(this.tableAccGracePeriodList.CheckOutDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableAccGracePeriodList.CheckOutDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestAccountRow : DataRow
    {
      private TempDataSet.AccGuestAccountDataTable tableAccGuestAccount;

      [DebuggerNonUserCode]
      internal AccGuestAccountRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGuestAccount = (TempDataSet.AccGuestAccountDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccGuestAccount.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccGuestAccount.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccGuestAccount.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccGuestAccount.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestAccount.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestAccount.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccGuestAccount.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccGuestAccount.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AmountPaid
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccGuestAccount.AmountPaidColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccGuestAccount.AmountPaidColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGuestAccount.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccGuestAccount.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccGuestAccount.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccGuestAccount.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccGuestAccount.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccGuestAccount.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccGuestAccount.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccGuestAccount.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccGuestAccount.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccGuestAccount.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccGuestAccount.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableAccGuestAccount.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableAccGuestAccount.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull()
      {
        this[this.tableAccGuestAccount.DepositColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableAccGuestAccount.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableAccGuestAccount.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableAccGuestAccount.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull()
      {
        this[this.tableAccGuestAccount.ChargeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableAccGuestAccount.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableAccGuestAccount.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAmountPaidNull() => this.IsNull(this.tableAccGuestAccount.AmountPaidColumn);

      [DebuggerNonUserCode]
      public void SetAmountPaidNull()
      {
        this[this.tableAccGuestAccount.AmountPaidColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestHistoryRow : DataRow
    {
      private TempDataSet.AccGuestHistoryDataTable tableAccGuestHistory;

      [DebuggerNonUserCode]
      internal AccGuestHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGuestHistory = (TempDataSet.AccGuestHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestHistory.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'AccGuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestHistory.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestHistory.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestHistory.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccGuestHistory.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccGuestHistory.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestHistory.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccGuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestHistory.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestHistory.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'AccGuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestHistory.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGuestHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccGuestHistory.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccGuestHistory.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccGuestHistory.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccGuestHistory.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccGuestHistory.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccGuestHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableAccGuestHistory.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccGuestHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccGuestHistory.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccGuestHistory.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccGuestHistory.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableAccGuestHistory.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableAccGuestHistory.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableAccGuestHistory.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableAccGuestHistory.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableAccGuestHistory.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableAccGuestHistory.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableAccGuestHistory.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableAccGuestHistory.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableAccGuestHistory.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableAccGuestHistory.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableAccGuestHistory.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccGuestHistory.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableAccGuestHistory.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableAccGuestHistory.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestListRow : DataRow
    {
      private TempDataSet.AccGuestListDataTable tableAccGuestList;

      [DebuggerNonUserCode]
      internal AccGuestListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGuestList = (TempDataSet.AccGuestListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.ClientTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.ClientTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Sex
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.SexColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.SexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Identity
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.IdentityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.IdentityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Nationality
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.NationalityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.NationalityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Address
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Contact
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestList.ContactColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestList.ContactColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableAccGuestList.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'AccGuestList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestList.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGuestList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableAccGuestList.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientTypeNull() => this.IsNull(this.tableAccGuestList.ClientTypeColumn);

      [DebuggerNonUserCode]
      public void SetClientTypeNull()
      {
        this[this.tableAccGuestList.ClientTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccGuestList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableAccGuestList.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccGuestList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableAccGuestList.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccGuestList.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableAccGuestList.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSexNull() => this.IsNull(this.tableAccGuestList.SexColumn);

      [DebuggerNonUserCode]
      public void SetSexNull() => this[this.tableAccGuestList.SexColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsIdentityNull() => this.IsNull(this.tableAccGuestList.IdentityColumn);

      [DebuggerNonUserCode]
      public void SetIdentityNull() => this[this.tableAccGuestList.IdentityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsNationalityNull() => this.IsNull(this.tableAccGuestList.NationalityColumn);

      [DebuggerNonUserCode]
      public void SetNationalityNull()
      {
        this[this.tableAccGuestList.NationalityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAddressNull() => this.IsNull(this.tableAccGuestList.AddressColumn);

      [DebuggerNonUserCode]
      public void SetAddressNull() => this[this.tableAccGuestList.AddressColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCountryNull() => this.IsNull(this.tableAccGuestList.CountryColumn);

      [DebuggerNonUserCode]
      public void SetCountryNull() => this[this.tableAccGuestList.CountryColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsContactNull() => this.IsNull(this.tableAccGuestList.ContactColumn);

      [DebuggerNonUserCode]
      public void SetContactNull() => this[this.tableAccGuestList.ContactColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableAccGuestList.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableAccGuestList.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestRecordDateRow : DataRow
    {
      private TempDataSet.AccGuestRecordDateDataTable tableAccGuestRecordDate;

      [DebuggerNonUserCode]
      internal AccGuestRecordDateRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccGuestRecordDate = (TempDataSet.AccGuestRecordDateDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestRecordDate.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestRecordDate.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestRecordDate.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestRecordDate.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestRecordDate.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestRecordDate.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.ContractStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractStart' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.ContractStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.ContractEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractEnd' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.ContractEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableAccGuestRecordDate.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccGuestRecordDate.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusDate
      {
        get
        {
          try
          {
            return (string) this[this.tableAccGuestRecordDate.BonusDateColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccGuestRecordDate.BonusDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccGuestRecordDate.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'AccGuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccGuestRecordDate.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccGuestRecordDate.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccGuestRecordDate.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccGuestRecordDate.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccGuestRecordDate.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccGuestRecordDate.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccGuestRecordDate.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractStartNull()
      {
        return this.IsNull(this.tableAccGuestRecordDate.ContractStartColumn);
      }

      [DebuggerNonUserCode]
      public void SetContractStartNull()
      {
        this[this.tableAccGuestRecordDate.ContractStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractEndNull()
      {
        return this.IsNull(this.tableAccGuestRecordDate.ContractEndColumn);
      }

      [DebuggerNonUserCode]
      public void SetContractEndNull()
      {
        this[this.tableAccGuestRecordDate.ContractEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull()
      {
        return this.IsNull(this.tableAccGuestRecordDate.GracePeriodColumn);
      }

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableAccGuestRecordDate.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccGuestRecordDate.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableAccGuestRecordDate.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccGuestRecordDate.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableAccGuestRecordDate.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull()
      {
        return this.IsNull(this.tableAccGuestRecordDate.CheckInDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccGuestRecordDate.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull()
      {
        return this.IsNull(this.tableAccGuestRecordDate.CheckOutDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableAccGuestRecordDate.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusDateNull() => this.IsNull(this.tableAccGuestRecordDate.BonusDateColumn);

      [DebuggerNonUserCode]
      public void SetBonusDateNull()
      {
        this[this.tableAccGuestRecordDate.BonusDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableAccGuestRecordDate.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableAccGuestRecordDate.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccReservationListRow : DataRow
    {
      private TempDataSet.AccReservationListDataTable tableAccReservationList;

      [DebuggerNonUserCode]
      internal AccReservationListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccReservationList = (TempDataSet.AccReservationListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccReservationList.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccReservationList.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccReservationList.ReserveTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccReservationList.ReserveTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccReservationList.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'AccReservationList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccReservationList.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccReservationList.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'AccReservationList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccReservationList.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableAccReservationList.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableAccReservationList.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccReservationList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccReservationList.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccReservationList.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccReservationList.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccReservationList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccReservationList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccReservationList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccReservationList.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccReservationList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableAccReservationList.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableAccReservationList.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull()
      {
        this[this.tableAccReservationList.DepositColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReserveTypeNull()
      {
        return this.IsNull(this.tableAccReservationList.ReserveTypeColumn);
      }

      [DebuggerNonUserCode]
      public void SetReserveTypeNull()
      {
        this[this.tableAccReservationList.ReserveTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableAccReservationList.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableAccReservationList.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableAccReservationList.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull()
      {
        this[this.tableAccReservationList.EndDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccRoomDetailRow : DataRow
    {
      private TempDataSet.AccRoomDetailDataTable tableAccRoomDetail;

      [DebuggerNonUserCode]
      internal AccRoomDetailRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccRoomDetail = (TempDataSet.AccRoomDetailDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomDetail.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomDetail.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccRoomDetail.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'AccRoomDetail' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccRoomDetail.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccRoomDetail.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'AccRoomDetail' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccRoomDetail.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccRoomDetail.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccRoomDetail.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccRoomDetail.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableAccRoomDetail.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull() => this.IsNull(this.tableAccRoomDetail.RmDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableAccRoomDetail.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableAccRoomDetail.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableAccRoomDetail.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccRoomDetail.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccRoomDetail.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccRoomDetail.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableAccRoomDetail.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccRoomDetail.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableAccRoomDetail.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableAccRoomDetail.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableAccRoomDetail.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableAccRoomDetail.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull() => this[this.tableAccRoomDetail.EndDateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccRoomInformationRow : DataRow
    {
      private TempDataSet.AccRoomInformationDataTable tableAccRoomInformation;

      [DebuggerNonUserCode]
      internal AccRoomInformationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccRoomInformation = (TempDataSet.AccRoomInformationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string FloorNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccRoomInformation.FloorNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccRoomInformation.FloorNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.DailyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.DailyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.WeeklyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.WeeklyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.MonthlyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.MonthlyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.DailyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.DailyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.WeeklyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.WeeklyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccRoomInformation.MonthlyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccRoomInformation.MonthlyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public short IssuedCard
      {
        get
        {
          try
          {
            return (short) this[this.tableAccRoomInformation.IssuedCardColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccRoomInformation.IssuedCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccRoomInformation.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccRoomInformation.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull()
      {
        return this.IsNull(this.tableAccRoomInformation.RmDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableAccRoomInformation.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableAccRoomInformation.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableAccRoomInformation.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccRoomInformation.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccRoomInformation.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableAccRoomInformation.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull()
      {
        this[this.tableAccRoomInformation.BuildingNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsFloorNoNull() => this.IsNull(this.tableAccRoomInformation.FloorNoColumn);

      [DebuggerNonUserCode]
      public void SetFloorNoNull()
      {
        this[this.tableAccRoomInformation.FloorNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRateNull() => this.IsNull(this.tableAccRoomInformation.DailyRateColumn);

      [DebuggerNonUserCode]
      public void SetDailyRateNull()
      {
        this[this.tableAccRoomInformation.DailyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRateNull() => this.IsNull(this.tableAccRoomInformation.WeeklyRateColumn);

      [DebuggerNonUserCode]
      public void SetWeeklyRateNull()
      {
        this[this.tableAccRoomInformation.WeeklyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRateNull()
      {
        return this.IsNull(this.tableAccRoomInformation.MonthlyRateColumn);
      }

      [DebuggerNonUserCode]
      public void SetMonthlyRateNull()
      {
        this[this.tableAccRoomInformation.MonthlyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRate2Null() => this.IsNull(this.tableAccRoomInformation.DailyRate2Column);

      [DebuggerNonUserCode]
      public void SetDailyRate2Null()
      {
        this[this.tableAccRoomInformation.DailyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRate2Null()
      {
        return this.IsNull(this.tableAccRoomInformation.WeeklyRate2Column);
      }

      [DebuggerNonUserCode]
      public void SetWeeklyRate2Null()
      {
        this[this.tableAccRoomInformation.WeeklyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRate2Null()
      {
        return this.IsNull(this.tableAccRoomInformation.MonthlyRate2Column);
      }

      [DebuggerNonUserCode]
      public void SetMonthlyRate2Null()
      {
        this[this.tableAccRoomInformation.MonthlyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsIssuedCardNull() => this.IsNull(this.tableAccRoomInformation.IssuedCardColumn);

      [DebuggerNonUserCode]
      public void SetIssuedCardNull()
      {
        this[this.tableAccRoomInformation.IssuedCardColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccSalesRow : DataRow
    {
      private TempDataSet.AccSalesDataTable tableAccSales;

      [DebuggerNonUserCode]
      internal AccSalesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccSales = (TempDataSet.AccSalesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableAccSales.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccSales.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempMonth
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.TempMonthColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.TempMonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal PreviousAdvance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.PreviousAdvanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.PreviousAdvanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AdvancedPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.AdvancedPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.AdvancedPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RBA
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.RBAColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.RBAColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RoomCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.RoomChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.RoomChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BonusClaim
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.BonusClaimColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.BonusClaimColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal GST
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.GSTColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.GSTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccSales.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccSales.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccSales.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccSales.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.ContractStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractStart' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.ContractStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.ContractEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractEnd' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.ContractEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccSales.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccSales.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableAccSales.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull() => this[this.tableAccSales.TransIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccSales.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableAccSales.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableAccSales.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableAccSales.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableAccSales.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableAccSales.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccSales.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccSales.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccSales.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableAccSales.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempMonthNull() => this.IsNull(this.tableAccSales.TempMonthColumn);

      [DebuggerNonUserCode]
      public void SetTempMonthNull() => this[this.tableAccSales.TempMonthColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccSales.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableAccSales.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableAccSales.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull() => this[this.tableAccSales.ReserveRefColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableAccSales.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableAccSales.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableAccSales.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableAccSales.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableAccSales.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull() => this[this.tableAccSales.ChargeTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPreviousAdvanceNull() => this.IsNull(this.tableAccSales.PreviousAdvanceColumn);

      [DebuggerNonUserCode]
      public void SetPreviousAdvanceNull()
      {
        this[this.tableAccSales.PreviousAdvanceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAdvancedPaymentNull() => this.IsNull(this.tableAccSales.AdvancedPaymentColumn);

      [DebuggerNonUserCode]
      public void SetAdvancedPaymentNull()
      {
        this[this.tableAccSales.AdvancedPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableAccSales.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableAccSales.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRBANull() => this.IsNull(this.tableAccSales.RBAColumn);

      [DebuggerNonUserCode]
      public void SetRBANull() => this[this.tableAccSales.RBAColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableAccSales.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableAccSales.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableAccSales.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull() => this[this.tableAccSales.KeyDepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableAccSales.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableAccSales.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomChargeNull() => this.IsNull(this.tableAccSales.RoomChargeColumn);

      [DebuggerNonUserCode]
      public void SetRoomChargeNull() => this[this.tableAccSales.RoomChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBonusClaimNull() => this.IsNull(this.tableAccSales.BonusClaimColumn);

      [DebuggerNonUserCode]
      public void SetBonusClaimNull() => this[this.tableAccSales.BonusClaimColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGSTNull() => this.IsNull(this.tableAccSales.GSTColumn);

      [DebuggerNonUserCode]
      public void SetGSTNull() => this[this.tableAccSales.GSTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableAccSales.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableAccSales.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableAccSales.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableAccSales.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableAccSales.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccSales.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractStartNull() => this.IsNull(this.tableAccSales.ContractStartColumn);

      [DebuggerNonUserCode]
      public void SetContractStartNull()
      {
        this[this.tableAccSales.ContractStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractEndNull() => this.IsNull(this.tableAccSales.ContractEndColumn);

      [DebuggerNonUserCode]
      public void SetContractEndNull()
      {
        this[this.tableAccSales.ContractEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableAccSales.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableAccSales.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccSales.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull() => this[this.tableAccSales.ValidStartColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccSales.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull() => this[this.tableAccSales.ValidEndColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccTransRow : DataRow
    {
      private TempDataSet.AccTransDataTable tableAccTrans;

      [DebuggerNonUserCode]
      internal AccTransRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccTrans = (TempDataSet.AccTransDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableAccTrans.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccTrans.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Condition
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.ConditionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.ConditionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string OldRoom
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.OldRoomColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.OldRoomColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal PreviousAdvance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.PreviousAdvanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.PreviousAdvanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AdvancedPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.AdvancedPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.AdvancedPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Balance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.BalanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.BalanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RBA
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.RBAColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.RBAColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RoomCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.RoomChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.RoomChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccTrans.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccTrans.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccTrans.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccTrans.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CheckInTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.CheckInTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.CheckInTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CheckOutTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.CheckOutTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.CheckOutTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccTrans.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableAccTrans.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableAccTrans.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BonusClaim
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.BonusClaimColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.BonusClaimColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal GST
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.GSTColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.GSTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccTrans.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccTrans.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccTrans.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccTrans.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableAccTrans.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'AccTrans' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccTrans.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableAccTrans.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull() => this[this.tableAccTrans.TransIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccTrans.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableAccTrans.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccTrans.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableAccTrans.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableAccTrans.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull() => this[this.tableAccTrans.CardTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccTrans.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableAccTrans.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsConditionNull() => this.IsNull(this.tableAccTrans.ConditionColumn);

      [DebuggerNonUserCode]
      public void SetConditionNull() => this[this.tableAccTrans.ConditionColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccTrans.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableAccTrans.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableAccTrans.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull() => this[this.tableAccTrans.ReserveRefColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsOldRoomNull() => this.IsNull(this.tableAccTrans.OldRoomColumn);

      [DebuggerNonUserCode]
      public void SetOldRoomNull() => this[this.tableAccTrans.OldRoomColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPreviousAdvanceNull() => this.IsNull(this.tableAccTrans.PreviousAdvanceColumn);

      [DebuggerNonUserCode]
      public void SetPreviousAdvanceNull()
      {
        this[this.tableAccTrans.PreviousAdvanceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAdvancedPaymentNull() => this.IsNull(this.tableAccTrans.AdvancedPaymentColumn);

      [DebuggerNonUserCode]
      public void SetAdvancedPaymentNull()
      {
        this[this.tableAccTrans.AdvancedPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBalanceNull() => this.IsNull(this.tableAccTrans.BalanceColumn);

      [DebuggerNonUserCode]
      public void SetBalanceNull() => this[this.tableAccTrans.BalanceColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableAccTrans.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableAccTrans.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRBANull() => this.IsNull(this.tableAccTrans.RBAColumn);

      [DebuggerNonUserCode]
      public void SetRBANull() => this[this.tableAccTrans.RBAColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableAccTrans.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableAccTrans.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableAccTrans.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull() => this[this.tableAccTrans.KeyDepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableAccTrans.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableAccTrans.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull() => this.IsNull(this.tableAccTrans.ExDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableAccTrans.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomChargeNull() => this.IsNull(this.tableAccTrans.RoomChargeColumn);

      [DebuggerNonUserCode]
      public void SetRoomChargeNull() => this[this.tableAccTrans.RoomChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableAccTrans.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableAccTrans.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableAccTrans.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableAccTrans.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableAccTrans.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull() => this[this.tableAccTrans.TransTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableAccTrans.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull() => this[this.tableAccTrans.ValidStartColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableAccTrans.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull() => this[this.tableAccTrans.ValidEndColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableAccTrans.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableAccTrans.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInTimeNull() => this.IsNull(this.tableAccTrans.CheckInTimeColumn);

      [DebuggerNonUserCode]
      public void SetCheckInTimeNull()
      {
        this[this.tableAccTrans.CheckInTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutTimeNull() => this.IsNull(this.tableAccTrans.CheckOutTimeColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutTimeNull()
      {
        this[this.tableAccTrans.CheckOutTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableAccTrans.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableAccTrans.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableAccTrans.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull() => this[this.tableAccTrans.ChargeTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull() => this.IsNull(this.tableAccTrans.GracePeriodColumn);

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableAccTrans.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusClaimNull() => this.IsNull(this.tableAccTrans.BonusClaimColumn);

      [DebuggerNonUserCode]
      public void SetBonusClaimNull() => this[this.tableAccTrans.BonusClaimColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGSTNull() => this.IsNull(this.tableAccTrans.GSTColumn);

      [DebuggerNonUserCode]
      public void SetGSTNull() => this[this.tableAccTrans.GSTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableAccTrans.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableAccTrans.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableAccTrans.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableAccTrans.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableAccTrans.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableAccTrans.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AvailableRoom_TempRow : DataRow
    {
      private TempDataSet.AvailableRoom_TempDataTable tableAvailableRoom_Temp;

      [DebuggerNonUserCode]
      internal AvailableRoom_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAvailableRoom_Temp = (TempDataSet.AvailableRoom_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAvailableRoom_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAvailableRoom_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableAvailableRoom_Temp.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAvailableRoom_Temp.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string FloorNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAvailableRoom_Temp.FloorNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAvailableRoom_Temp.FloorNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAvailableRoom_Temp.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAvailableRoom_Temp.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.DailyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.DailyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.WeeklyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.WeeklyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.MonthlyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.MonthlyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.DailyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.DailyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.WeeklyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.WeeklyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAvailableRoom_Temp.MonthlyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAvailableRoom_Temp.MonthlyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableAvailableRoom_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAvailableRoom_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAvailableRoom_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAvailableRoom_Temp.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull()
      {
        return this.IsNull(this.tableAvailableRoom_Temp.RmDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableAvailableRoom_Temp.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsFloorNoNull() => this.IsNull(this.tableAvailableRoom_Temp.FloorNoColumn);

      [DebuggerNonUserCode]
      public void SetFloorNoNull()
      {
        this[this.tableAvailableRoom_Temp.FloorNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableAvailableRoom_Temp.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull()
      {
        this[this.tableAvailableRoom_Temp.BuildingNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRateNull() => this.IsNull(this.tableAvailableRoom_Temp.DailyRateColumn);

      [DebuggerNonUserCode]
      public void SetDailyRateNull()
      {
        this[this.tableAvailableRoom_Temp.DailyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRateNull() => this.IsNull(this.tableAvailableRoom_Temp.WeeklyRateColumn);

      [DebuggerNonUserCode]
      public void SetWeeklyRateNull()
      {
        this[this.tableAvailableRoom_Temp.WeeklyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRateNull()
      {
        return this.IsNull(this.tableAvailableRoom_Temp.MonthlyRateColumn);
      }

      [DebuggerNonUserCode]
      public void SetMonthlyRateNull()
      {
        this[this.tableAvailableRoom_Temp.MonthlyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRate2Null() => this.IsNull(this.tableAvailableRoom_Temp.DailyRate2Column);

      [DebuggerNonUserCode]
      public void SetDailyRate2Null()
      {
        this[this.tableAvailableRoom_Temp.DailyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRate2Null()
      {
        return this.IsNull(this.tableAvailableRoom_Temp.WeeklyRate2Column);
      }

      [DebuggerNonUserCode]
      public void SetWeeklyRate2Null()
      {
        this[this.tableAvailableRoom_Temp.WeeklyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRate2Null()
      {
        return this.IsNull(this.tableAvailableRoom_Temp.MonthlyRate2Column);
      }

      [DebuggerNonUserCode]
      public void SetMonthlyRate2Null()
      {
        this[this.tableAvailableRoom_Temp.MonthlyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableAvailableRoom_Temp.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableAvailableRoom_Temp.DescriptionColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class Banking_TempRow : DataRow
    {
      private TempDataSet.Banking_TempDataTable tableBanking_Temp;

      [DebuggerNonUserCode]
      internal Banking_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableBanking_Temp = (TempDataSet.Banking_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CodeDesc
      {
        get
        {
          try
          {
            return (string) this[this.tableBanking_Temp.CodeDescColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBanking_Temp.CodeDescColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChequeNo
      {
        get
        {
          try
          {
            return (string) this[this.tableBanking_Temp.ChequeNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBanking_Temp.ChequeNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Amount
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableBanking_Temp.AmountColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableBanking_Temp.AmountColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime Date
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBanking_Temp.DateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Date' in table 'Banking_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBanking_Temp.DateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Time
      {
        get
        {
          try
          {
            return (string) this[this.tableBanking_Temp.TimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBanking_Temp.TimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Operator
      {
        get
        {
          try
          {
            return (string) this[this.tableBanking_Temp.OperatorColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBanking_Temp.OperatorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCodeDescNull() => this.IsNull(this.tableBanking_Temp.CodeDescColumn);

      [DebuggerNonUserCode]
      public void SetCodeDescNull() => this[this.tableBanking_Temp.CodeDescColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChequeNoNull() => this.IsNull(this.tableBanking_Temp.ChequeNoColumn);

      [DebuggerNonUserCode]
      public void SetChequeNoNull() => this[this.tableBanking_Temp.ChequeNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsAmountNull() => this.IsNull(this.tableBanking_Temp.AmountColumn);

      [DebuggerNonUserCode]
      public void SetAmountNull() => this[this.tableBanking_Temp.AmountColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDateNull() => this.IsNull(this.tableBanking_Temp.DateColumn);

      [DebuggerNonUserCode]
      public void SetDateNull() => this[this.tableBanking_Temp.DateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTimeNull() => this.IsNull(this.tableBanking_Temp.TimeColumn);

      [DebuggerNonUserCode]
      public void SetTimeNull() => this[this.tableBanking_Temp.TimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsOperatorNull() => this.IsNull(this.tableBanking_Temp.OperatorColumn);

      [DebuggerNonUserCode]
      public void SetOperatorNull() => this[this.tableBanking_Temp.OperatorColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class BonusEntitleListRow : DataRow
    {
      private TempDataSet.BonusEntitleListDataTable tableBonusEntitleList;

      [DebuggerNonUserCode]
      internal BonusEntitleListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableBonusEntitleList = (TempDataSet.BonusEntitleListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusEntitleList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusEntitleList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusEntitleList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusEntitleList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusEntitleList.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusEntitleList.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusEntitleList.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusEntitleList.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBonusEntitleList.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'BonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBonusEntitleList.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBonusEntitleList.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'BonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBonusEntitleList.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBonusEntitleList.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'BonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBonusEntitleList.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusDate
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusEntitleList.BonusDateColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusEntitleList.BonusDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBonusEntitleList.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'BonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBonusEntitleList.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EntitleDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableBonusEntitleList.EntitleDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EntitleDate' in table 'BonusEntitleList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBonusEntitleList.EntitleDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableBonusEntitleList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableBonusEntitleList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableBonusEntitleList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableBonusEntitleList.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableBonusEntitleList.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull()
      {
        this[this.tableBonusEntitleList.ChargeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableBonusEntitleList.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableBonusEntitleList.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableBonusEntitleList.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableBonusEntitleList.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableBonusEntitleList.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableBonusEntitleList.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableBonusEntitleList.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableBonusEntitleList.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusDateNull() => this.IsNull(this.tableBonusEntitleList.BonusDateColumn);

      [DebuggerNonUserCode]
      public void SetBonusDateNull()
      {
        this[this.tableBonusEntitleList.BonusDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableBonusEntitleList.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableBonusEntitleList.RoomStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEntitleDateNull() => this.IsNull(this.tableBonusEntitleList.EntitleDateColumn);

      [DebuggerNonUserCode]
      public void SetEntitleDateNull()
      {
        this[this.tableBonusEntitleList.EntitleDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class BonusTempRow : DataRow
    {
      private TempDataSet.BonusTempDataTable tableBonusTemp;

      [DebuggerNonUserCode]
      internal BonusTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableBonusTemp = (TempDataSet.BonusTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string StayType
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusTemp.StayTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusTemp.StayTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short StayLength
      {
        get
        {
          try
          {
            return (short) this[this.tableBonusTemp.StayLengthColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableBonusTemp.StayLengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusType
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusTemp.BonusTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusTemp.BonusTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short BonusLength
      {
        get
        {
          try
          {
            return (short) this[this.tableBonusTemp.BonusLengthColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableBonusTemp.BonusLengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusStart
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusTemp.BonusStartColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusTemp.BonusStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string DateUpdate
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusTemp.DateUpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusTemp.DateUpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Staff
      {
        get
        {
          try
          {
            return (string) this[this.tableBonusTemp.StaffColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableBonusTemp.StaffColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsStayTypeNull() => this.IsNull(this.tableBonusTemp.StayTypeColumn);

      [DebuggerNonUserCode]
      public void SetStayTypeNull() => this[this.tableBonusTemp.StayTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStayLengthNull() => this.IsNull(this.tableBonusTemp.StayLengthColumn);

      [DebuggerNonUserCode]
      public void SetStayLengthNull()
      {
        this[this.tableBonusTemp.StayLengthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusTypeNull() => this.IsNull(this.tableBonusTemp.BonusTypeColumn);

      [DebuggerNonUserCode]
      public void SetBonusTypeNull() => this[this.tableBonusTemp.BonusTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBonusLengthNull() => this.IsNull(this.tableBonusTemp.BonusLengthColumn);

      [DebuggerNonUserCode]
      public void SetBonusLengthNull()
      {
        this[this.tableBonusTemp.BonusLengthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusStartNull() => this.IsNull(this.tableBonusTemp.BonusStartColumn);

      [DebuggerNonUserCode]
      public void SetBonusStartNull()
      {
        this[this.tableBonusTemp.BonusStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDateUpdateNull() => this.IsNull(this.tableBonusTemp.DateUpdateColumn);

      [DebuggerNonUserCode]
      public void SetDateUpdateNull()
      {
        this[this.tableBonusTemp.DateUpdateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffNull() => this.IsNull(this.tableBonusTemp.StaffColumn);

      [DebuggerNonUserCode]
      public void SetStaffNull() => this[this.tableBonusTemp.StaffColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CheckRoom_TempRow : DataRow
    {
      private TempDataSet.CheckRoom_TempDataTable tableCheckRoom_Temp;

      [DebuggerNonUserCode]
      internal CheckRoom_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCheckRoom_Temp = (TempDataSet.CheckRoom_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string FloorNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.FloorNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.FloorNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Condition
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.ConditionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.ConditionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.DailyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.DailyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.WeeklyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.WeeklyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.MonthlyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.MonthlyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.DailyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.DailyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.WeeklyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.WeeklyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCheckRoom_Temp.MonthlyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCheckRoom_Temp.MonthlyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableCheckRoom_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCheckRoom_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableCheckRoom_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableCheckRoom_Temp.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull()
      {
        return this.IsNull(this.tableCheckRoom_Temp.RmDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableCheckRoom_Temp.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsFloorNoNull() => this.IsNull(this.tableCheckRoom_Temp.FloorNoColumn);

      [DebuggerNonUserCode]
      public void SetFloorNoNull() => this[this.tableCheckRoom_Temp.FloorNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableCheckRoom_Temp.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull()
      {
        this[this.tableCheckRoom_Temp.BuildingNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsConditionNull() => this.IsNull(this.tableCheckRoom_Temp.ConditionColumn);

      [DebuggerNonUserCode]
      public void SetConditionNull()
      {
        this[this.tableCheckRoom_Temp.ConditionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRateNull() => this.IsNull(this.tableCheckRoom_Temp.DailyRateColumn);

      [DebuggerNonUserCode]
      public void SetDailyRateNull()
      {
        this[this.tableCheckRoom_Temp.DailyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRateNull() => this.IsNull(this.tableCheckRoom_Temp.WeeklyRateColumn);

      [DebuggerNonUserCode]
      public void SetWeeklyRateNull()
      {
        this[this.tableCheckRoom_Temp.WeeklyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRateNull() => this.IsNull(this.tableCheckRoom_Temp.MonthlyRateColumn);

      [DebuggerNonUserCode]
      public void SetMonthlyRateNull()
      {
        this[this.tableCheckRoom_Temp.MonthlyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRate2Null() => this.IsNull(this.tableCheckRoom_Temp.DailyRate2Column);

      [DebuggerNonUserCode]
      public void SetDailyRate2Null()
      {
        this[this.tableCheckRoom_Temp.DailyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRate2Null() => this.IsNull(this.tableCheckRoom_Temp.WeeklyRate2Column);

      [DebuggerNonUserCode]
      public void SetWeeklyRate2Null()
      {
        this[this.tableCheckRoom_Temp.WeeklyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRate2Null() => this.IsNull(this.tableCheckRoom_Temp.MonthlyRate2Column);

      [DebuggerNonUserCode]
      public void SetMonthlyRate2Null()
      {
        this[this.tableCheckRoom_Temp.MonthlyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableCheckRoom_Temp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableCheckRoom_Temp.DescriptionColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CurrentGByFloorNoRow : DataRow
    {
      private TempDataSet.CurrentGByFloorNoDataTable tableCurrentGByFloorNo;

      [DebuggerNonUserCode]
      internal CurrentGByFloorNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCurrentGByFloorNo = (TempDataSet.CurrentGByFloorNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGByFloorNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGByFloorNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGByFloorNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGByFloorNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGByFloorNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGByFloorNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGByFloorNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGByFloorNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGByFloorNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGByFloorNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableCurrentGByFloorNo.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableCurrentGByFloorNo.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableCurrentGByFloorNo.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'CurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCurrentGByFloorNo.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableCurrentGByFloorNo.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'CurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCurrentGByFloorNo.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableCurrentGByFloorNo.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'CurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCurrentGByFloorNo.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableCurrentGByFloorNo.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'CurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCurrentGByFloorNo.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableCurrentGByFloorNo.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'CurrentGByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCurrentGByFloorNo.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableCurrentGByFloorNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableCurrentGByFloorNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableCurrentGByFloorNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableCurrentGByFloorNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableCurrentGByFloorNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableCurrentGByFloorNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableCurrentGByFloorNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableCurrentGByFloorNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableCurrentGByFloorNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableCurrentGByFloorNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableCurrentGByFloorNo.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableCurrentGByFloorNo.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableCurrentGByFloorNo.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableCurrentGByFloorNo.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableCurrentGByFloorNo.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableCurrentGByFloorNo.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableCurrentGByFloorNo.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableCurrentGByFloorNo.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull()
      {
        return this.IsNull(this.tableCurrentGByFloorNo.CheckOutDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableCurrentGByFloorNo.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableCurrentGByFloorNo.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableCurrentGByFloorNo.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CurrentGInfoRow : DataRow
    {
      private TempDataSet.CurrentGInfoDataTable tableCurrentGInfo;

      [DebuggerNonUserCode]
      internal CurrentGInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCurrentGInfo = (TempDataSet.CurrentGInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Sex
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.SexColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.SexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Identity
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.IdentityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.IdentityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Nationality
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.NationalityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.NationalityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Address
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Contact
      {
        get
        {
          try
          {
            return (string) this[this.tableCurrentGInfo.ContactColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableCurrentGInfo.ContactColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableCurrentGInfo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableCurrentGInfo.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableCurrentGInfo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableCurrentGInfo.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableCurrentGInfo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableCurrentGInfo.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableCurrentGInfo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableCurrentGInfo.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSexNull() => this.IsNull(this.tableCurrentGInfo.SexColumn);

      [DebuggerNonUserCode]
      public void SetSexNull() => this[this.tableCurrentGInfo.SexColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsIdentityNull() => this.IsNull(this.tableCurrentGInfo.IdentityColumn);

      [DebuggerNonUserCode]
      public void SetIdentityNull() => this[this.tableCurrentGInfo.IdentityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsNationalityNull() => this.IsNull(this.tableCurrentGInfo.NationalityColumn);

      [DebuggerNonUserCode]
      public void SetNationalityNull()
      {
        this[this.tableCurrentGInfo.NationalityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAddressNull() => this.IsNull(this.tableCurrentGInfo.AddressColumn);

      [DebuggerNonUserCode]
      public void SetAddressNull() => this[this.tableCurrentGInfo.AddressColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCountryNull() => this.IsNull(this.tableCurrentGInfo.CountryColumn);

      [DebuggerNonUserCode]
      public void SetCountryNull() => this[this.tableCurrentGInfo.CountryColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsContactNull() => this.IsNull(this.tableCurrentGInfo.ContactColumn);

      [DebuggerNonUserCode]
      public void SetContactNull() => this[this.tableCurrentGInfo.ContactColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DetailGuestIssuedRow : DataRow
    {
      private TempDataSet.DetailGuestIssuedDataTable tableDetailGuestIssued;

      [DebuggerNonUserCode]
      internal DetailGuestIssuedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDetailGuestIssued = (TempDataSet.DetailGuestIssuedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableDetailGuestIssued.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'DetailGuestIssued' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDetailGuestIssued.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDetailGuestIssued.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'DetailGuestIssued' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDetailGuestIssued.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDetailGuestIssued.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDetailGuestIssued.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDetailGuestIssued.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'DetailGuestIssued' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDetailGuestIssued.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDetailGuestIssued.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'DetailGuestIssued' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDetailGuestIssued.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableDetailGuestIssued.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableDetailGuestIssued.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableDetailGuestIssued.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableDetailGuestIssued.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableDetailGuestIssued.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableDetailGuestIssued.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableDetailGuestIssued.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableDetailGuestIssued.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableDetailGuestIssued.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableDetailGuestIssued.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableDetailGuestIssued.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableDetailGuestIssued.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableDetailGuestIssued.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableDetailGuestIssued.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableDetailGuestIssued.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableDetailGuestIssued.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableDetailGuestIssued.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableDetailGuestIssued.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableDetailGuestIssued.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableDetailGuestIssued.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableDetailGuestIssued.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableDetailGuestIssued.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableDetailGuestIssued.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableDetailGuestIssued.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DisplayRooms_TempRow : DataRow
    {
      private TempDataSet.DisplayRooms_TempDataTable tableDisplayRooms_Temp;

      [DebuggerNonUserCode]
      internal DisplayRooms_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDisplayRooms_Temp = (TempDataSet.DisplayRooms_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableDisplayRooms_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDisplayRooms_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.DailyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.DailyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.WeeklyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.WeeklyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.MonthlyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.MonthlyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.DailyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.DailyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.WeeklyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.WeeklyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDisplayRooms_Temp.MonthlyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDisplayRooms_Temp.MonthlyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte IssuedCard
      {
        get
        {
          try
          {
            return (byte) this[this.tableDisplayRooms_Temp.IssuedCardColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IssuedCard' in table 'DisplayRooms_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayRooms_Temp.IssuedCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableDisplayRooms_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDisplayRooms_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDisplayRooms_Temp.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'DisplayRooms_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayRooms_Temp.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDisplayRooms_Temp.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'DisplayRooms_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayRooms_Temp.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableDisplayRooms_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableDisplayRooms_Temp.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRateNull() => this.IsNull(this.tableDisplayRooms_Temp.DailyRateColumn);

      [DebuggerNonUserCode]
      public void SetDailyRateNull()
      {
        this[this.tableDisplayRooms_Temp.DailyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRateNull() => this.IsNull(this.tableDisplayRooms_Temp.WeeklyRateColumn);

      [DebuggerNonUserCode]
      public void SetWeeklyRateNull()
      {
        this[this.tableDisplayRooms_Temp.WeeklyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRateNull() => this.IsNull(this.tableDisplayRooms_Temp.MonthlyRateColumn);

      [DebuggerNonUserCode]
      public void SetMonthlyRateNull()
      {
        this[this.tableDisplayRooms_Temp.MonthlyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRate2Null() => this.IsNull(this.tableDisplayRooms_Temp.DailyRate2Column);

      [DebuggerNonUserCode]
      public void SetDailyRate2Null()
      {
        this[this.tableDisplayRooms_Temp.DailyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRate2Null() => this.IsNull(this.tableDisplayRooms_Temp.WeeklyRate2Column);

      [DebuggerNonUserCode]
      public void SetWeeklyRate2Null()
      {
        this[this.tableDisplayRooms_Temp.WeeklyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRate2Null()
      {
        return this.IsNull(this.tableDisplayRooms_Temp.MonthlyRate2Column);
      }

      [DebuggerNonUserCode]
      public void SetMonthlyRate2Null()
      {
        this[this.tableDisplayRooms_Temp.MonthlyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsIssuedCardNull() => this.IsNull(this.tableDisplayRooms_Temp.IssuedCardColumn);

      [DebuggerNonUserCode]
      public void SetIssuedCardNull()
      {
        this[this.tableDisplayRooms_Temp.IssuedCardColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableDisplayRooms_Temp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableDisplayRooms_Temp.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableDisplayRooms_Temp.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableDisplayRooms_Temp.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableDisplayRooms_Temp.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull()
      {
        this[this.tableDisplayRooms_Temp.EndDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DLogRow : DataRow
    {
      private TempDataSet.DLogDataTable tableDLog;

      [DebuggerNonUserCode]
      internal DLogRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDLog = (TempDataSet.DLogDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableDLog.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDLog.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime LogDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDLog.LogDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LogDate' in table 'DLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDLog.LogDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string InTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDLog.InTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDLog.InTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string OutTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDLog.OutTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDLog.OutTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableDLog.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'DLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDLog.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableDLog.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableDLog.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLogDateNull() => this.IsNull(this.tableDLog.LogDateColumn);

      [DebuggerNonUserCode]
      public void SetLogDateNull() => this[this.tableDLog.LogDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsInTimeNull() => this.IsNull(this.tableDLog.InTimeColumn);

      [DebuggerNonUserCode]
      public void SetInTimeNull() => this[this.tableDLog.InTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsOutTimeNull() => this.IsNull(this.tableDLog.OutTimeColumn);

      [DebuggerNonUserCode]
      public void SetOutTimeNull() => this[this.tableDLog.OutTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableDLog.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableDLog.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DTransactionsRow : DataRow
    {
      private TempDataSet.DTransactionsDataTable tableDTransactions;

      [DebuggerNonUserCode]
      internal DTransactionsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDTransactions = (TempDataSet.DTransactionsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableDTransactions.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableDTransactions.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Condition
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.ConditionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.ConditionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string OldRoom
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.OldRoomColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.OldRoomColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal PreviousAdvance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.PreviousAdvanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.PreviousAdvanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AdvancedPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.AdvancedPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.AdvancedPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Balance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.BalanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.BalanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RBA
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.RBAColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.RBAColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RoomCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.RoomChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.RoomChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDTransactions.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDTransactions.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDTransactions.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDTransactions.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CheckInTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.CheckInTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.CheckInTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CheckOutTime
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.CheckOutTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.CheckOutTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableDTransactions.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableDTransactions.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableDTransactions.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BonusClaim
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.BonusClaimColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.BonusClaimColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal GST
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.GSTColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.GSTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableDTransactions.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableDTransactions.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableDTransactions.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableDTransactions.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableDTransactions.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'DTransactions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDTransactions.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableDTransactions.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull() => this[this.tableDTransactions.TransIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableDTransactions.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableDTransactions.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableDTransactions.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableDTransactions.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableDTransactions.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableDTransactions.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableDTransactions.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableDTransactions.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsConditionNull() => this.IsNull(this.tableDTransactions.ConditionColumn);

      [DebuggerNonUserCode]
      public void SetConditionNull()
      {
        this[this.tableDTransactions.ConditionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableDTransactions.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableDTransactions.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsOldRoomNull() => this.IsNull(this.tableDTransactions.OldRoomColumn);

      [DebuggerNonUserCode]
      public void SetOldRoomNull() => this[this.tableDTransactions.OldRoomColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPreviousAdvanceNull()
      {
        return this.IsNull(this.tableDTransactions.PreviousAdvanceColumn);
      }

      [DebuggerNonUserCode]
      public void SetPreviousAdvanceNull()
      {
        this[this.tableDTransactions.PreviousAdvanceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAdvancedPaymentNull()
      {
        return this.IsNull(this.tableDTransactions.AdvancedPaymentColumn);
      }

      [DebuggerNonUserCode]
      public void SetAdvancedPaymentNull()
      {
        this[this.tableDTransactions.AdvancedPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBalanceNull() => this.IsNull(this.tableDTransactions.BalanceColumn);

      [DebuggerNonUserCode]
      public void SetBalanceNull() => this[this.tableDTransactions.BalanceColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableDTransactions.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableDTransactions.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRBANull() => this.IsNull(this.tableDTransactions.RBAColumn);

      [DebuggerNonUserCode]
      public void SetRBANull() => this[this.tableDTransactions.RBAColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableDTransactions.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableDTransactions.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableDTransactions.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull()
      {
        this[this.tableDTransactions.KeyDepositColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableDTransactions.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableDTransactions.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull() => this.IsNull(this.tableDTransactions.ExDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableDTransactions.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomChargeNull() => this.IsNull(this.tableDTransactions.RoomChargeColumn);

      [DebuggerNonUserCode]
      public void SetRoomChargeNull()
      {
        this[this.tableDTransactions.RoomChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableDTransactions.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableDTransactions.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableDTransactions.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableDTransactions.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableDTransactions.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableDTransactions.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableDTransactions.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableDTransactions.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableDTransactions.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableDTransactions.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableDTransactions.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableDTransactions.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInTimeNull() => this.IsNull(this.tableDTransactions.CheckInTimeColumn);

      [DebuggerNonUserCode]
      public void SetCheckInTimeNull()
      {
        this[this.tableDTransactions.CheckInTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutTimeNull() => this.IsNull(this.tableDTransactions.CheckOutTimeColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutTimeNull()
      {
        this[this.tableDTransactions.CheckOutTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableDTransactions.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableDTransactions.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableDTransactions.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull()
      {
        this[this.tableDTransactions.ChargeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull() => this.IsNull(this.tableDTransactions.GracePeriodColumn);

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableDTransactions.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusClaimNull() => this.IsNull(this.tableDTransactions.BonusClaimColumn);

      [DebuggerNonUserCode]
      public void SetBonusClaimNull()
      {
        this[this.tableDTransactions.BonusClaimColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsGSTNull() => this.IsNull(this.tableDTransactions.GSTColumn);

      [DebuggerNonUserCode]
      public void SetGSTNull() => this[this.tableDTransactions.GSTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableDTransactions.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableDTransactions.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableDTransactions.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableDTransactions.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableDTransactions.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableDTransactions.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ErrorRecordsRow : DataRow
    {
      private TempDataSet.ErrorRecordsDataTable tableErrorRecords;

      [DebuggerNonUserCode]
      internal ErrorRecordsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableErrorRecords = (TempDataSet.ErrorRecordsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int PaymentNoteNo
      {
        get
        {
          try
          {
            return (int) this[this.tableErrorRecords.PaymentNoteNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableErrorRecords.PaymentNoteNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ErrDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.ErrDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.ErrDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ErrAmount
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableErrorRecords.ErrAmountColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableErrorRecords.ErrAmountColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BondErrDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.BondErrDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.BondErrDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BondErrAmount
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableErrorRecords.BondErrAmountColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableErrorRecords.BondErrAmountColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErrorRecords.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'ErrorRecords' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErrorRecords.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CurrDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErrorRecords.CurrDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CurrDate' in table 'ErrorRecords' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErrorRecords.CurrDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CurrTime
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.CurrTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.CurrTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorRecords.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableErrorRecords.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsPaymentNoteNoNull() => this.IsNull(this.tableErrorRecords.PaymentNoteNoColumn);

      [DebuggerNonUserCode]
      public void SetPaymentNoteNoNull()
      {
        this[this.tableErrorRecords.PaymentNoteNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableErrorRecords.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableErrorRecords.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsErrDescriptionNull()
      {
        return this.IsNull(this.tableErrorRecords.ErrDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetErrDescriptionNull()
      {
        this[this.tableErrorRecords.ErrDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsErrAmountNull() => this.IsNull(this.tableErrorRecords.ErrAmountColumn);

      [DebuggerNonUserCode]
      public void SetErrAmountNull()
      {
        this[this.tableErrorRecords.ErrAmountColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondErrDescriptionNull()
      {
        return this.IsNull(this.tableErrorRecords.BondErrDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetBondErrDescriptionNull()
      {
        this[this.tableErrorRecords.BondErrDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondErrAmountNull() => this.IsNull(this.tableErrorRecords.BondErrAmountColumn);

      [DebuggerNonUserCode]
      public void SetBondErrAmountNull()
      {
        this[this.tableErrorRecords.BondErrAmountColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableErrorRecords.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableErrorRecords.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableErrorRecords.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableErrorRecords.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableErrorRecords.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableErrorRecords.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCurrDateNull() => this.IsNull(this.tableErrorRecords.CurrDateColumn);

      [DebuggerNonUserCode]
      public void SetCurrDateNull() => this[this.tableErrorRecords.CurrDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCurrTimeNull() => this.IsNull(this.tableErrorRecords.CurrTimeColumn);

      [DebuggerNonUserCode]
      public void SetCurrTimeNull() => this[this.tableErrorRecords.CurrTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableErrorRecords.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableErrorRecords.StaffIDColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraRow : DataRow
    {
      private TempDataSet.ExtraDataTable tableExtra;

      [DebuggerNonUserCode]
      internal ExtraRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableExtra = (TempDataSet.ExtraDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableExtra.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtra.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int ReceiptID
      {
        get
        {
          try
          {
            return (int) this[this.tableExtra.ReceiptIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableExtra.ReceiptIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableExtra.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtra.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableExtra.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtra.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableExtra.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableExtra.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableExtra.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtra.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableExtra.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'Extra' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableExtra.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableExtra.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtra.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableExtra.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableExtra.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReceiptIDNull() => this.IsNull(this.tableExtra.ReceiptIDColumn);

      [DebuggerNonUserCode]
      public void SetReceiptIDNull() => this[this.tableExtra.ReceiptIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableExtra.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableExtra.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull() => this.IsNull(this.tableExtra.ExDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableExtra.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableExtra.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull() => this[this.tableExtra.ExtraChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableExtra.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableExtra.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableExtra.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableExtra.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableExtra.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull() => this[this.tableExtra.TransTimeColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraCardRow : DataRow
    {
      private TempDataSet.ExtraCardDataTable tableExtraCard;

      [DebuggerNonUserCode]
      internal ExtraCardRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableExtraCard = (TempDataSet.ExtraCardDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableExtraCard.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'ExtraCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableExtraCard.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableExtraCard.KeyChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableExtraCard.KeyChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableExtraCard.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'ExtraCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableExtraCard.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCard.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCard.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableExtraCard.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'ExtraCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableExtraCard.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableExtraCard.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableExtraCard.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableExtraCard.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableExtraCard.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableExtraCard.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull() => this[this.tableExtraCard.CardTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableExtraCard.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableExtraCard.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableExtraCard.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableExtraCard.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsKeyChargeNull() => this.IsNull(this.tableExtraCard.KeyChargeColumn);

      [DebuggerNonUserCode]
      public void SetKeyChargeNull() => this[this.tableExtraCard.KeyChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableExtraCard.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull() => this[this.tableExtraCard.ReaderIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableExtraCard.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableExtraCard.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableExtraCard.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableExtraCard.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableExtraCard.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableExtraCard.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraCharge_TempRow : DataRow
    {
      private TempDataSet.ExtraCharge_TempDataTable tableExtraCharge_Temp;

      [DebuggerNonUserCode]
      internal ExtraCharge_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableExtraCharge_Temp = (TempDataSet.ExtraCharge_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int ReceiptID
      {
        get
        {
          try
          {
            return (int) this[this.tableExtraCharge_Temp.ReceiptIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableExtraCharge_Temp.ReceiptIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCharge_Temp.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCharge_Temp.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableExtraCharge_Temp.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableExtraCharge_Temp.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableExtraCharge_Temp.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableExtraCharge_Temp.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsReceiptIDNull() => this.IsNull(this.tableExtraCharge_Temp.ReceiptIDColumn);

      [DebuggerNonUserCode]
      public void SetReceiptIDNull()
      {
        this[this.tableExtraCharge_Temp.ReceiptIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableExtraCharge_Temp.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableExtraCharge_Temp.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull()
      {
        return this.IsNull(this.tableExtraCharge_Temp.ExDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableExtraCharge_Temp.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableExtraCharge_Temp.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableExtraCharge_Temp.ExtraChargeColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GData_TempRow : DataRow
    {
      private TempDataSet.GData_TempDataTable tableGData_Temp;

      [DebuggerNonUserCode]
      internal GData_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGData_Temp = (TempDataSet.GData_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGData_Temp.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGData_Temp.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGData_Temp.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGData_Temp.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGData_Temp.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGData_Temp.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableGData_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGData_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGData_Temp.ContractStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractStart' in table 'GData_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGData_Temp.ContractStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGData_Temp.ContractEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractEnd' in table 'GData_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGData_Temp.ContractEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGData_Temp.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'GData_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGData_Temp.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGData_Temp.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'GData_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGData_Temp.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGData_Temp.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGData_Temp.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGData_Temp.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGData_Temp.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGData_Temp.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGData_Temp.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableGData_Temp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableGData_Temp.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractStartNull() => this.IsNull(this.tableGData_Temp.ContractStartColumn);

      [DebuggerNonUserCode]
      public void SetContractStartNull()
      {
        this[this.tableGData_Temp.ContractStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractEndNull() => this.IsNull(this.tableGData_Temp.ContractEndColumn);

      [DebuggerNonUserCode]
      public void SetContractEndNull()
      {
        this[this.tableGData_Temp.ContractEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableGData_Temp.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableGData_Temp.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableGData_Temp.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableGData_Temp.CheckOutDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GDSalesRow : DataRow
    {
      private TempDataSet.GDSalesDataTable tableGDSales;

      [DebuggerNonUserCode]
      internal GDSalesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGDSales = (TempDataSet.GDSalesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableGDSales.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableGDSales.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempMonth
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.TempMonthColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.TempMonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal PreviousAdvance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.PreviousAdvanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.PreviousAdvanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AdvancedPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.AdvancedPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.AdvancedPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RBA
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.RBAColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.RBAColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RoomCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.RoomChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.RoomChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BonusClaim
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.BonusClaimColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.BonusClaimColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal GST
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.GSTColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGDSales.GSTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGDSales.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LastPayment' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableGDSales.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGDSales.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.ContractStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractStart' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.ContractStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.ContractEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractEnd' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.ContractEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGDSales.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GDSales' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGDSales.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableGDSales.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull() => this[this.tableGDSales.TransIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGDSales.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGDSales.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGDSales.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGDSales.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGDSales.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGDSales.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGDSales.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGDSales.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableGDSales.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull() => this[this.tableGDSales.TempBldColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTempMonthNull() => this.IsNull(this.tableGDSales.TempMonthColumn);

      [DebuggerNonUserCode]
      public void SetTempMonthNull() => this[this.tableGDSales.TempMonthColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGDSales.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableGDSales.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableGDSales.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull() => this[this.tableGDSales.ReserveRefColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableGDSales.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableGDSales.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableGDSales.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableGDSales.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableGDSales.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull() => this[this.tableGDSales.ChargeTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPreviousAdvanceNull() => this.IsNull(this.tableGDSales.PreviousAdvanceColumn);

      [DebuggerNonUserCode]
      public void SetPreviousAdvanceNull()
      {
        this[this.tableGDSales.PreviousAdvanceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAdvancedPaymentNull() => this.IsNull(this.tableGDSales.AdvancedPaymentColumn);

      [DebuggerNonUserCode]
      public void SetAdvancedPaymentNull()
      {
        this[this.tableGDSales.AdvancedPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableGDSales.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableGDSales.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRBANull() => this.IsNull(this.tableGDSales.RBAColumn);

      [DebuggerNonUserCode]
      public void SetRBANull() => this[this.tableGDSales.RBAColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableGDSales.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableGDSales.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableGDSales.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull() => this[this.tableGDSales.KeyDepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableGDSales.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableGDSales.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomChargeNull() => this.IsNull(this.tableGDSales.RoomChargeColumn);

      [DebuggerNonUserCode]
      public void SetRoomChargeNull() => this[this.tableGDSales.RoomChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBonusClaimNull() => this.IsNull(this.tableGDSales.BonusClaimColumn);

      [DebuggerNonUserCode]
      public void SetBonusClaimNull() => this[this.tableGDSales.BonusClaimColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGSTNull() => this.IsNull(this.tableGDSales.GSTColumn);

      [DebuggerNonUserCode]
      public void SetGSTNull() => this[this.tableGDSales.GSTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableGDSales.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableGDSales.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableGDSales.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableGDSales.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableGDSales.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableGDSales.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractStartNull() => this.IsNull(this.tableGDSales.ContractStartColumn);

      [DebuggerNonUserCode]
      public void SetContractStartNull()
      {
        this[this.tableGDSales.ContractStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractEndNull() => this.IsNull(this.tableGDSales.ContractEndColumn);

      [DebuggerNonUserCode]
      public void SetContractEndNull()
      {
        this[this.tableGDSales.ContractEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableGDSales.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableGDSales.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGDSales.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull() => this[this.tableGDSales.ValidStartColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGDSales.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull() => this[this.tableGDSales.ValidEndColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GInfo_TempRow : DataRow
    {
      private TempDataSet.GInfo_TempDataTable tableGInfo_Temp;

      [DebuggerNonUserCode]
      internal GInfo_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGInfo_Temp = (TempDataSet.GInfo_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGInfo_Temp.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGInfo_Temp.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGInfo_Temp.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGInfo_Temp.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGInfo_Temp.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGInfo_Temp.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGInfo_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGInfo_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGInfo_Temp.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGInfo_Temp.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGInfo_Temp.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GInfo_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGInfo_Temp.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGInfo_Temp.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GInfo_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGInfo_Temp.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGInfo_Temp.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGInfo_Temp.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGInfo_Temp.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGInfo_Temp.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGInfo_Temp.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGInfo_Temp.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGInfo_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGInfo_Temp.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGInfo_Temp.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableGInfo_Temp.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGInfo_Temp.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGInfo_Temp.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGInfo_Temp.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull() => this[this.tableGInfo_Temp.ValidEndColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GracePeriodListRow : DataRow
    {
      private TempDataSet.GracePeriodListDataTable tableGracePeriodList;

      [DebuggerNonUserCode]
      internal GracePeriodListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGracePeriodList = (TempDataSet.GracePeriodListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGracePeriodList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGracePeriodList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGracePeriodList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGracePeriodList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGracePeriodList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGracePeriodList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGracePeriodList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGracePeriodList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableGracePeriodList.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableGracePeriodList.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGracePeriodList.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGracePeriodList.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGracePeriodList.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGracePeriodList.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGracePeriodList.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'GracePeriodList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGracePeriodList.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGracePeriodList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGracePeriodList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGracePeriodList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGracePeriodList.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGracePeriodList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableGracePeriodList.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGracePeriodList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGracePeriodList.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull() => this.IsNull(this.tableGracePeriodList.GracePeriodColumn);

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableGracePeriodList.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGracePeriodList.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGracePeriodList.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGracePeriodList.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGracePeriodList.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableGracePeriodList.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableGracePeriodList.CheckOutDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GTransactions_TempRow : DataRow
    {
      private TempDataSet.GTransactions_TempDataTable tableGTransactions_Temp;

      [DebuggerNonUserCode]
      internal GTransactions_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGTransactions_Temp = (TempDataSet.GTransactions_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableGTransactions_Temp.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableGTransactions_Temp.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableGTransactions_Temp.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGTransactions_Temp.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGTransactions_Temp.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'GTransactions_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGTransactions_Temp.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGTransactions_Temp.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGTransactions_Temp.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGTransactions_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGTransactions_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGTransactions_Temp.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGTransactions_Temp.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableGTransactions_Temp.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull()
      {
        this[this.tableGTransactions_Temp.TransIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableGTransactions_Temp.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableGTransactions_Temp.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableGTransactions_Temp.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableGTransactions_Temp.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableGTransactions_Temp.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableGTransactions_Temp.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGTransactions_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableGTransactions_Temp.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull()
      {
        return this.IsNull(this.tableGTransactions_Temp.LastPaymentColumn);
      }

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableGTransactions_Temp.LastPaymentColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestAccountRow : DataRow
    {
      private TempDataSet.GuestAccountDataTable tableGuestAccount;

      [DebuggerNonUserCode]
      internal GuestAccountRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestAccount = (TempDataSet.GuestAccountDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGuestAccount.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGuestAccount.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGuestAccount.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGuestAccount.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestAccount.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestAccount.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGuestAccount.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGuestAccount.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AmountPaid
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGuestAccount.AmountPaidColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGuestAccount.AmountPaidColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestAccount.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGuestAccount.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestAccount.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGuestAccount.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestAccount.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGuestAccount.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestAccount.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGuestAccount.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestAccount.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableGuestAccount.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableGuestAccount.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableGuestAccount.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableGuestAccount.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableGuestAccount.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableGuestAccount.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull()
      {
        this[this.tableGuestAccount.ChargeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableGuestAccount.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableGuestAccount.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAmountPaidNull() => this.IsNull(this.tableGuestAccount.AmountPaidColumn);

      [DebuggerNonUserCode]
      public void SetAmountPaidNull()
      {
        this[this.tableGuestAccount.AmountPaidColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestHistoryRow : DataRow
    {
      private TempDataSet.GuestHistoryDataTable tableGuestHistory;

      [DebuggerNonUserCode]
      internal GuestHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestHistory = (TempDataSet.GuestHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestHistory.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'GuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestHistory.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestHistory.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestHistory.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableGuestHistory.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableGuestHistory.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestHistory.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'GuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestHistory.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestHistory.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'GuestHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestHistory.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGuestHistory.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestHistory.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGuestHistory.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestHistory.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGuestHistory.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableGuestHistory.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGuestHistory.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableGuestHistory.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableGuestHistory.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableGuestHistory.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableGuestHistory.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableGuestHistory.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableGuestHistory.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableGuestHistory.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableGuestHistory.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableGuestHistory.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableGuestHistory.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableGuestHistory.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableGuestHistory.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableGuestHistory.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableGuestHistory.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByBldNoRow : DataRow
    {
      private TempDataSet.GuestIssuedByBldNoDataTable tableGuestIssuedByBldNo;

      [DebuggerNonUserCode]
      internal GuestIssuedByBldNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestIssuedByBldNo = (TempDataSet.GuestIssuedByBldNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableGuestIssuedByBldNo.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'GuestIssuedByBldNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByBldNo.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByBldNo.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'GuestIssuedByBldNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByBldNo.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByBldNo.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByBldNo.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByBldNo.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GuestIssuedByBldNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByBldNo.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByBldNo.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GuestIssuedByBldNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByBldNo.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestIssuedByBldNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableGuestIssuedByBldNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableGuestIssuedByBldNo.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableGuestIssuedByBldNo.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestIssuedByBldNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableGuestIssuedByBldNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestIssuedByBldNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGuestIssuedByBldNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestIssuedByBldNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGuestIssuedByBldNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestIssuedByBldNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableGuestIssuedByBldNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableGuestIssuedByBldNo.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableGuestIssuedByBldNo.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableGuestIssuedByBldNo.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableGuestIssuedByBldNo.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableGuestIssuedByBldNo.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableGuestIssuedByBldNo.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableGuestIssuedByBldNo.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableGuestIssuedByBldNo.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGuestIssuedByBldNo.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGuestIssuedByBldNo.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGuestIssuedByBldNo.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGuestIssuedByBldNo.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByFloorNoRow : DataRow
    {
      private TempDataSet.GuestIssuedByFloorNoDataTable tableGuestIssuedByFloorNo;

      [DebuggerNonUserCode]
      internal GuestIssuedByFloorNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestIssuedByFloorNo = (TempDataSet.GuestIssuedByFloorNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableGuestIssuedByFloorNo.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'GuestIssuedByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByFloorNo.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'GuestIssuedByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByFloorNo.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByFloorNo.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GuestIssuedByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByFloorNo.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GuestIssuedByFloorNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByFloorNo.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestIssuedByFloorNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableGuestIssuedByFloorNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableGuestIssuedByFloorNo.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableGuestIssuedByFloorNo.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestIssuedByFloorNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableGuestIssuedByFloorNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestIssuedByFloorNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGuestIssuedByFloorNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestIssuedByFloorNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGuestIssuedByFloorNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestIssuedByFloorNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableGuestIssuedByFloorNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull()
      {
        return this.IsNull(this.tableGuestIssuedByFloorNo.CardStatusColumn);
      }

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableGuestIssuedByFloorNo.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableGuestIssuedByFloorNo.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableGuestIssuedByFloorNo.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull()
      {
        return this.IsNull(this.tableGuestIssuedByFloorNo.RecordDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableGuestIssuedByFloorNo.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull()
      {
        return this.IsNull(this.tableGuestIssuedByFloorNo.RecordTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableGuestIssuedByFloorNo.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull()
      {
        return this.IsNull(this.tableGuestIssuedByFloorNo.ValidStartColumn);
      }

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGuestIssuedByFloorNo.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGuestIssuedByFloorNo.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGuestIssuedByFloorNo.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByGuestIDRow : DataRow
    {
      private TempDataSet.GuestIssuedByGuestIDDataTable tableGuestIssuedByGuestID;

      [DebuggerNonUserCode]
      internal GuestIssuedByGuestIDRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestIssuedByGuestID = (TempDataSet.GuestIssuedByGuestIDDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableGuestIssuedByGuestID.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'GuestIssuedByGuestID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByGuestID.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByGuestID.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'GuestIssuedByGuestID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByGuestID.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByGuestID.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByGuestID.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByGuestID.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GuestIssuedByGuestID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByGuestID.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByGuestID.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GuestIssuedByGuestID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByGuestID.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestIssuedByGuestID.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableGuestIssuedByGuestID.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableGuestIssuedByGuestID.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableGuestIssuedByGuestID.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestIssuedByGuestID.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableGuestIssuedByGuestID.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestIssuedByGuestID.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGuestIssuedByGuestID.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestIssuedByGuestID.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGuestIssuedByGuestID.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestIssuedByGuestID.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableGuestIssuedByGuestID.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull()
      {
        return this.IsNull(this.tableGuestIssuedByGuestID.CardStatusColumn);
      }

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableGuestIssuedByGuestID.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableGuestIssuedByGuestID.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableGuestIssuedByGuestID.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull()
      {
        return this.IsNull(this.tableGuestIssuedByGuestID.RecordDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableGuestIssuedByGuestID.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull()
      {
        return this.IsNull(this.tableGuestIssuedByGuestID.RecordTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableGuestIssuedByGuestID.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull()
      {
        return this.IsNull(this.tableGuestIssuedByGuestID.ValidStartColumn);
      }

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGuestIssuedByGuestID.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGuestIssuedByGuestID.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGuestIssuedByGuestID.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByRoomNoRow : DataRow
    {
      private TempDataSet.GuestIssuedByRoomNoDataTable tableGuestIssuedByRoomNo;

      [DebuggerNonUserCode]
      internal GuestIssuedByRoomNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestIssuedByRoomNo = (TempDataSet.GuestIssuedByRoomNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableGuestIssuedByRoomNo.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'GuestIssuedByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByRoomNo.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'GuestIssuedByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestIssuedByRoomNo.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByRoomNo.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GuestIssuedByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestIssuedByRoomNo.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GuestIssuedByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestIssuedByRoomNo.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableGuestIssuedByRoomNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableGuestIssuedByRoomNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableGuestIssuedByRoomNo.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableGuestIssuedByRoomNo.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestIssuedByRoomNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableGuestIssuedByRoomNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestIssuedByRoomNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGuestIssuedByRoomNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestIssuedByRoomNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGuestIssuedByRoomNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestIssuedByRoomNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableGuestIssuedByRoomNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableGuestIssuedByRoomNo.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableGuestIssuedByRoomNo.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableGuestIssuedByRoomNo.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableGuestIssuedByRoomNo.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableGuestIssuedByRoomNo.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableGuestIssuedByRoomNo.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableGuestIssuedByRoomNo.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableGuestIssuedByRoomNo.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGuestIssuedByRoomNo.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGuestIssuedByRoomNo.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGuestIssuedByRoomNo.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGuestIssuedByRoomNo.ValidEndColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestListRow : DataRow
    {
      private TempDataSet.GuestListDataTable tableGuestList;

      [DebuggerNonUserCode]
      internal GuestListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestList = (TempDataSet.GuestListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientType
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.ClientTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.ClientTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Sex
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.SexColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.SexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Identity
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.IdentityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.IdentityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Nationality
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.NationalityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.NationalityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Address
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Contact
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestList.ContactColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestList.ContactColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableGuestList.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'GuestList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestList.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableGuestList.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientTypeNull() => this.IsNull(this.tableGuestList.ClientTypeColumn);

      [DebuggerNonUserCode]
      public void SetClientTypeNull()
      {
        this[this.tableGuestList.ClientTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGuestList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableGuestList.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGuestList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGuestList.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSexNull() => this.IsNull(this.tableGuestList.SexColumn);

      [DebuggerNonUserCode]
      public void SetSexNull() => this[this.tableGuestList.SexColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsIdentityNull() => this.IsNull(this.tableGuestList.IdentityColumn);

      [DebuggerNonUserCode]
      public void SetIdentityNull() => this[this.tableGuestList.IdentityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsNationalityNull() => this.IsNull(this.tableGuestList.NationalityColumn);

      [DebuggerNonUserCode]
      public void SetNationalityNull()
      {
        this[this.tableGuestList.NationalityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAddressNull() => this.IsNull(this.tableGuestList.AddressColumn);

      [DebuggerNonUserCode]
      public void SetAddressNull() => this[this.tableGuestList.AddressColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCountryNull() => this.IsNull(this.tableGuestList.CountryColumn);

      [DebuggerNonUserCode]
      public void SetCountryNull() => this[this.tableGuestList.CountryColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsContactNull() => this.IsNull(this.tableGuestList.ContactColumn);

      [DebuggerNonUserCode]
      public void SetContactNull() => this[this.tableGuestList.ContactColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableGuestList.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableGuestList.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestRecordDateRow : DataRow
    {
      private TempDataSet.GuestRecordDateDataTable tableGuestRecordDate;

      [DebuggerNonUserCode]
      internal GuestRecordDateRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGuestRecordDate = (TempDataSet.GuestRecordDateDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestRecordDate.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestRecordDate.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestRecordDate.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestRecordDate.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.ContractStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractStart' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.ContractStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ContractEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.ContractEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ContractEnd' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.ContractEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public short GracePeriod
      {
        get
        {
          try
          {
            return (short) this[this.tableGuestRecordDate.GracePeriodColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableGuestRecordDate.GracePeriodColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckOutDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.CheckOutDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckOutDate' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.CheckOutDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BonusDate
      {
        get
        {
          try
          {
            return (string) this[this.tableGuestRecordDate.BonusDateColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGuestRecordDate.BonusDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RoomStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGuestRecordDate.RoomStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomStart' in table 'GuestRecordDate' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGuestRecordDate.RoomStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGuestRecordDate.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGuestRecordDate.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableGuestRecordDate.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableGuestRecordDate.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsContractStartNull()
      {
        return this.IsNull(this.tableGuestRecordDate.ContractStartColumn);
      }

      [DebuggerNonUserCode]
      public void SetContractStartNull()
      {
        this[this.tableGuestRecordDate.ContractStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsContractEndNull() => this.IsNull(this.tableGuestRecordDate.ContractEndColumn);

      [DebuggerNonUserCode]
      public void SetContractEndNull()
      {
        this[this.tableGuestRecordDate.ContractEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsGracePeriodNull() => this.IsNull(this.tableGuestRecordDate.GracePeriodColumn);

      [DebuggerNonUserCode]
      public void SetGracePeriodNull()
      {
        this[this.tableGuestRecordDate.GracePeriodColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableGuestRecordDate.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull()
      {
        this[this.tableGuestRecordDate.ValidStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableGuestRecordDate.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull()
      {
        this[this.tableGuestRecordDate.ValidEndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableGuestRecordDate.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableGuestRecordDate.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCheckOutDateNull() => this.IsNull(this.tableGuestRecordDate.CheckOutDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutDateNull()
      {
        this[this.tableGuestRecordDate.CheckOutDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBonusDateNull() => this.IsNull(this.tableGuestRecordDate.BonusDateColumn);

      [DebuggerNonUserCode]
      public void SetBonusDateNull()
      {
        this[this.tableGuestRecordDate.BonusDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomStartNull() => this.IsNull(this.tableGuestRecordDate.RoomStartColumn);

      [DebuggerNonUserCode]
      public void SetRoomStartNull()
      {
        this[this.tableGuestRecordDate.RoomStartColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GViewRoom_TempRow : DataRow
    {
      private TempDataSet.GViewRoom_TempDataTable tableGViewRoom_Temp;

      [DebuggerNonUserCode]
      internal GViewRoom_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGViewRoom_Temp = (TempDataSet.GViewRoom_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableGViewRoom_Temp.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGViewRoom_Temp.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableGViewRoom_Temp.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGViewRoom_Temp.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableGViewRoom_Temp.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGViewRoom_Temp.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableGViewRoom_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableGViewRoom_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGViewRoom_Temp.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'GViewRoom_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGViewRoom_Temp.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGViewRoom_Temp.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'GViewRoom_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGViewRoom_Temp.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableGViewRoom_Temp.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableGViewRoom_Temp.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableGViewRoom_Temp.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableGViewRoom_Temp.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableGViewRoom_Temp.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableGViewRoom_Temp.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableGViewRoom_Temp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableGViewRoom_Temp.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableGViewRoom_Temp.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableGViewRoom_Temp.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableGViewRoom_Temp.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull() => this[this.tableGViewRoom_Temp.EndDateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class IssueCardHistoryRow : DataRow
    {
      private TempDataSet.IssueCardHistoryDataTable tableIssueCardHistory;

      [DebuggerNonUserCode]
      internal IssueCardHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableIssueCardHistory = (TempDataSet.IssueCardHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableIssueCardHistory.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'IssueCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableIssueCardHistory.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableIssueCardHistory.KeyChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableIssueCardHistory.KeyChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableIssueCardHistory.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'IssueCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableIssueCardHistory.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableIssueCardHistory.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableIssueCardHistory.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableIssueCardHistory.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'IssueCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableIssueCardHistory.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableIssueCardHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableIssueCardHistory.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableIssueCardHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableIssueCardHistory.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableIssueCardHistory.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableIssueCardHistory.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableIssueCardHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableIssueCardHistory.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableIssueCardHistory.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableIssueCardHistory.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsKeyChargeNull() => this.IsNull(this.tableIssueCardHistory.KeyChargeColumn);

      [DebuggerNonUserCode]
      public void SetKeyChargeNull()
      {
        this[this.tableIssueCardHistory.KeyChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableIssueCardHistory.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableIssueCardHistory.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableIssueCardHistory.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableIssueCardHistory.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableIssueCardHistory.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableIssueCardHistory.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableIssueCardHistory.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableIssueCardHistory.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class KeyChargesTempRow : DataRow
    {
      private TempDataSet.KeyChargesTempDataTable tableKeyChargesTemp;

      [DebuggerNonUserCode]
      internal KeyChargesTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableKeyChargesTemp = (TempDataSet.KeyChargesTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableKeyChargesTemp.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableKeyChargesTemp.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableKeyChargesTemp.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableKeyChargesTemp.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal SpareKeyCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableKeyChargesTemp.SpareKeyChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableKeyChargesTemp.SpareKeyChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableKeyChargesTemp.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableKeyChargesTemp.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableKeyChargesTemp.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'KeyChargesTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableKeyChargesTemp.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableKeyChargesTemp.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull()
      {
        this[this.tableKeyChargesTemp.BuildingNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableKeyChargesTemp.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull()
      {
        this[this.tableKeyChargesTemp.KeyDepositColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSpareKeyChargeNull()
      {
        return this.IsNull(this.tableKeyChargesTemp.SpareKeyChargeColumn);
      }

      [DebuggerNonUserCode]
      public void SetSpareKeyChargeNull()
      {
        this[this.tableKeyChargesTemp.SpareKeyChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableKeyChargesTemp.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableKeyChargesTemp.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableKeyChargesTemp.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableKeyChargesTemp.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class LossCardRow : DataRow
    {
      private TempDataSet.LossCardDataTable tableLossCard;

      [DebuggerNonUserCode]
      internal LossCardRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableLossCard = (TempDataSet.LossCardDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableLossCard.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'LossCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLossCard.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableLossCard.KeyChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableLossCard.KeyChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableLossCard.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'LossCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLossCard.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableLossCard.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableLossCard.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableLossCard.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'LossCard' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLossCard.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableLossCard.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableLossCard.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableLossCard.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableLossCard.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableLossCard.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull() => this[this.tableLossCard.CardTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableLossCard.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableLossCard.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardStatusNull() => this.IsNull(this.tableLossCard.CardStatusColumn);

      [DebuggerNonUserCode]
      public void SetCardStatusNull() => this[this.tableLossCard.CardStatusColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyChargeNull() => this.IsNull(this.tableLossCard.KeyChargeColumn);

      [DebuggerNonUserCode]
      public void SetKeyChargeNull() => this[this.tableLossCard.KeyChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableLossCard.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull() => this[this.tableLossCard.ReaderIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRecordDateNull() => this.IsNull(this.tableLossCard.RecordDateColumn);

      [DebuggerNonUserCode]
      public void SetRecordDateNull() => this[this.tableLossCard.RecordDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull() => this.IsNull(this.tableLossCard.RecordTimeColumn);

      [DebuggerNonUserCode]
      public void SetRecordTimeNull() => this[this.tableLossCard.RecordTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableLossCard.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableLossCard.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class MLogRow : DataRow
    {
      private TempDataSet.MLogDataTable tableMLog;

      [DebuggerNonUserCode]
      internal MLogRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMLog = (TempDataSet.MLogDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableMLog.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableMLog.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime LogDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMLog.LogDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LogDate' in table 'MLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMLog.LogDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string InTime
      {
        get
        {
          try
          {
            return (string) this[this.tableMLog.InTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableMLog.InTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string OutTime
      {
        get
        {
          try
          {
            return (string) this[this.tableMLog.OutTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableMLog.OutTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableMLog.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'MLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMLog.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableMLog.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableMLog.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLogDateNull() => this.IsNull(this.tableMLog.LogDateColumn);

      [DebuggerNonUserCode]
      public void SetLogDateNull() => this[this.tableMLog.LogDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsInTimeNull() => this.IsNull(this.tableMLog.InTimeColumn);

      [DebuggerNonUserCode]
      public void SetInTimeNull() => this[this.tableMLog.InTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsOutTimeNull() => this.IsNull(this.tableMLog.OutTimeColumn);

      [DebuggerNonUserCode]
      public void SetOutTimeNull() => this[this.tableMLog.OutTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableMLog.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableMLog.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ReceiptRow : DataRow
    {
      private TempDataSet.ReceiptDataTable tableReceipt;

      [DebuggerNonUserCode]
      internal ReceiptRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableReceipt = (TempDataSet.ReceiptDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public int TransID
      {
        get
        {
          try
          {
            return (int) this[this.tableReceipt.TransIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableReceipt.TransIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string OldRoom
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.OldRoomColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.OldRoomColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Condition
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ConditionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ConditionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal PreviousAdvance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.PreviousAdvanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.PreviousAdvanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal AdvancedPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.AdvancedPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.AdvancedPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Balance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.BalanceColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.BalanceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Bond
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.BondColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.BondColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RBA
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.RBAColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.RBAColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyDeposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.KeyDepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.KeyDepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal ExtraCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.ExtraChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.ExtraChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ExDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ExDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ExDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal RoomCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.RoomChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.RoomChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReceipt.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'Receipt' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReceipt.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidStart
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReceipt.ValidStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidStart' in table 'Receipt' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReceipt.ValidStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime ValidEnd
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReceipt.ValidEndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidEnd' in table 'Receipt' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReceipt.ValidEndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CheckInDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReceipt.CheckInDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckInDate' in table 'Receipt' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReceipt.CheckInDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ChargeType
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.ChargeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.ChargeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal BonusClaim
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.BonusClaimColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.BonusClaimColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal GST
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.GSTColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.GSTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReceipt.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReceipt.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableReceipt.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReceipt.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsTransIDNull() => this.IsNull(this.tableReceipt.TransIDColumn);

      [DebuggerNonUserCode]
      public void SetTransIDNull() => this[this.tableReceipt.TransIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableReceipt.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableReceipt.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableReceipt.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableReceipt.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableReceipt.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableReceipt.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableReceipt.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableReceipt.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsOldRoomNull() => this.IsNull(this.tableReceipt.OldRoomColumn);

      [DebuggerNonUserCode]
      public void SetOldRoomNull() => this[this.tableReceipt.OldRoomColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableReceipt.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull() => this[this.tableReceipt.ReserveRefColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableReceipt.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableReceipt.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsConditionNull() => this.IsNull(this.tableReceipt.ConditionColumn);

      [DebuggerNonUserCode]
      public void SetConditionNull() => this[this.tableReceipt.ConditionColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPreviousAdvanceNull() => this.IsNull(this.tableReceipt.PreviousAdvanceColumn);

      [DebuggerNonUserCode]
      public void SetPreviousAdvanceNull()
      {
        this[this.tableReceipt.PreviousAdvanceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAdvancedPaymentNull() => this.IsNull(this.tableReceipt.AdvancedPaymentColumn);

      [DebuggerNonUserCode]
      public void SetAdvancedPaymentNull()
      {
        this[this.tableReceipt.AdvancedPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBalanceNull() => this.IsNull(this.tableReceipt.BalanceColumn);

      [DebuggerNonUserCode]
      public void SetBalanceNull() => this[this.tableReceipt.BalanceColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBondNull() => this.IsNull(this.tableReceipt.BondColumn);

      [DebuggerNonUserCode]
      public void SetBondNull() => this[this.tableReceipt.BondColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRBANull() => this.IsNull(this.tableReceipt.RBAColumn);

      [DebuggerNonUserCode]
      public void SetRBANull() => this[this.tableReceipt.RBAColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableReceipt.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull() => this[this.tableReceipt.DepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsKeyDepositNull() => this.IsNull(this.tableReceipt.KeyDepositColumn);

      [DebuggerNonUserCode]
      public void SetKeyDepositNull() => this[this.tableReceipt.KeyDepositColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsExtraChargeNull() => this.IsNull(this.tableReceipt.ExtraChargeColumn);

      [DebuggerNonUserCode]
      public void SetExtraChargeNull()
      {
        this[this.tableReceipt.ExtraChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsExDescriptionNull() => this.IsNull(this.tableReceipt.ExDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetExDescriptionNull()
      {
        this[this.tableReceipt.ExDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomChargeNull() => this.IsNull(this.tableReceipt.RoomChargeColumn);

      [DebuggerNonUserCode]
      public void SetRoomChargeNull() => this[this.tableReceipt.RoomChargeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableReceipt.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull() => this[this.tableReceipt.TransTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableReceipt.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull() => this[this.tableReceipt.TransDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableReceipt.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull() => this[this.tableReceipt.TransTimeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidStartNull() => this.IsNull(this.tableReceipt.ValidStartColumn);

      [DebuggerNonUserCode]
      public void SetValidStartNull() => this[this.tableReceipt.ValidStartColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsValidEndNull() => this.IsNull(this.tableReceipt.ValidEndColumn);

      [DebuggerNonUserCode]
      public void SetValidEndNull() => this[this.tableReceipt.ValidEndColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCheckInDateNull() => this.IsNull(this.tableReceipt.CheckInDateColumn);

      [DebuggerNonUserCode]
      public void SetCheckInDateNull()
      {
        this[this.tableReceipt.CheckInDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsChargeTypeNull() => this.IsNull(this.tableReceipt.ChargeTypeColumn);

      [DebuggerNonUserCode]
      public void SetChargeTypeNull() => this[this.tableReceipt.ChargeTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBonusClaimNull() => this.IsNull(this.tableReceipt.BonusClaimColumn);

      [DebuggerNonUserCode]
      public void SetBonusClaimNull() => this[this.tableReceipt.BonusClaimColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGSTNull() => this.IsNull(this.tableReceipt.GSTColumn);

      [DebuggerNonUserCode]
      public void SetGSTNull() => this[this.tableReceipt.GSTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableReceipt.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableReceipt.LastPaymentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableReceipt.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableReceipt.StaffIDColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ReservationListRow : DataRow
    {
      private TempDataSet.ReservationListDataTable tableReservationList;

      [DebuggerNonUserCode]
      internal ReservationListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableReservationList = (TempDataSet.ReservationListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal Deposit
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableReservationList.DepositColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableReservationList.DepositColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveType
      {
        get
        {
          try
          {
            return (string) this[this.tableReservationList.ReserveTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableReservationList.ReserveTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReservationList.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'ReservationList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReservationList.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableReservationList.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'ReservationList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableReservationList.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableReservationList.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableReservationList.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableReservationList.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableReservationList.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableReservationList.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableReservationList.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableReservationList.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableReservationList.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableReservationList.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableReservationList.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDepositNull() => this.IsNull(this.tableReservationList.DepositColumn);

      [DebuggerNonUserCode]
      public void SetDepositNull()
      {
        this[this.tableReservationList.DepositColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReserveTypeNull() => this.IsNull(this.tableReservationList.ReserveTypeColumn);

      [DebuggerNonUserCode]
      public void SetReserveTypeNull()
      {
        this[this.tableReservationList.ReserveTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableReservationList.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableReservationList.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableReservationList.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull()
      {
        this[this.tableReservationList.EndDateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomDetailRow : DataRow
    {
      private TempDataSet.RoomDetailDataTable tableRoomDetail;

      [DebuggerNonUserCode]
      internal RoomDetailRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRoomDetail = (TempDataSet.RoomDetailDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomDetail.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomDetail.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableRoomDetail.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'RoomDetail' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomDetail.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableRoomDetail.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'RoomDetail' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomDetail.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableRoomDetail.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableRoomDetail.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull() => this.IsNull(this.tableRoomDetail.RmDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableRoomDetail.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableRoomDetail.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableRoomDetail.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableRoomDetail.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableRoomDetail.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableRoomDetail.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableRoomDetail.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableRoomDetail.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableRoomDetail.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableRoomDetail.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull() => this[this.tableRoomDetail.StartDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableRoomDetail.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull() => this[this.tableRoomDetail.EndDateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomHistoryRow : DataRow
    {
      private TempDataSet.RoomHistoryDataTable tableRoomHistory;

      [DebuggerNonUserCode]
      internal RoomHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRoomHistory = (TempDataSet.RoomHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReserveRef
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.ReserveRefColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.ReserveRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransType
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.TransTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.TransTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime TransDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableRoomHistory.TransDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TransDate' in table 'RoomHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomHistory.TransDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TransTime
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomHistory.TransTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomHistory.TransTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal LastPayment
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomHistory.LastPaymentColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomHistory.LastPaymentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableRoomHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableRoomHistory.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableRoomHistory.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableRoomHistory.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableRoomHistory.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableRoomHistory.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableRoomHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableRoomHistory.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableRoomHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableRoomHistory.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsReserveRefNull() => this.IsNull(this.tableRoomHistory.ReserveRefColumn);

      [DebuggerNonUserCode]
      public void SetReserveRefNull()
      {
        this[this.tableRoomHistory.ReserveRefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTypeNull() => this.IsNull(this.tableRoomHistory.TransTypeColumn);

      [DebuggerNonUserCode]
      public void SetTransTypeNull()
      {
        this[this.tableRoomHistory.TransTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransDateNull() => this.IsNull(this.tableRoomHistory.TransDateColumn);

      [DebuggerNonUserCode]
      public void SetTransDateNull()
      {
        this[this.tableRoomHistory.TransDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTransTimeNull() => this.IsNull(this.tableRoomHistory.TransTimeColumn);

      [DebuggerNonUserCode]
      public void SetTransTimeNull()
      {
        this[this.tableRoomHistory.TransTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsLastPaymentNull() => this.IsNull(this.tableRoomHistory.LastPaymentColumn);

      [DebuggerNonUserCode]
      public void SetLastPaymentNull()
      {
        this[this.tableRoomHistory.LastPaymentColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomInformationRow : DataRow
    {
      private TempDataSet.RoomInformationDataTable tableRoomInformation;

      [DebuggerNonUserCode]
      internal RoomInformationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRoomInformation = (TempDataSet.RoomInformationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string FloorNo
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomInformation.FloorNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomInformation.FloorNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.DailyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.DailyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.WeeklyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.WeeklyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.MonthlyRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.MonthlyRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal DailyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.DailyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.DailyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal WeeklyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.WeeklyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.WeeklyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal MonthlyRate2
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableRoomInformation.MonthlyRate2Column];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableRoomInformation.MonthlyRate2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public short IssuedCard
      {
        get
        {
          try
          {
            return (short) this[this.tableRoomInformation.IssuedCardColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableRoomInformation.IssuedCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableRoomInformation.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableRoomInformation.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull()
      {
        return this.IsNull(this.tableRoomInformation.RmDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableRoomInformation.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableRoomInformation.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableRoomInformation.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableRoomInformation.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableRoomInformation.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableRoomInformation.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull()
      {
        this[this.tableRoomInformation.BuildingNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsFloorNoNull() => this.IsNull(this.tableRoomInformation.FloorNoColumn);

      [DebuggerNonUserCode]
      public void SetFloorNoNull()
      {
        this[this.tableRoomInformation.FloorNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRateNull() => this.IsNull(this.tableRoomInformation.DailyRateColumn);

      [DebuggerNonUserCode]
      public void SetDailyRateNull()
      {
        this[this.tableRoomInformation.DailyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRateNull() => this.IsNull(this.tableRoomInformation.WeeklyRateColumn);

      [DebuggerNonUserCode]
      public void SetWeeklyRateNull()
      {
        this[this.tableRoomInformation.WeeklyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRateNull() => this.IsNull(this.tableRoomInformation.MonthlyRateColumn);

      [DebuggerNonUserCode]
      public void SetMonthlyRateNull()
      {
        this[this.tableRoomInformation.MonthlyRateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDailyRate2Null() => this.IsNull(this.tableRoomInformation.DailyRate2Column);

      [DebuggerNonUserCode]
      public void SetDailyRate2Null()
      {
        this[this.tableRoomInformation.DailyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWeeklyRate2Null() => this.IsNull(this.tableRoomInformation.WeeklyRate2Column);

      [DebuggerNonUserCode]
      public void SetWeeklyRate2Null()
      {
        this[this.tableRoomInformation.WeeklyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMonthlyRate2Null() => this.IsNull(this.tableRoomInformation.MonthlyRate2Column);

      [DebuggerNonUserCode]
      public void SetMonthlyRate2Null()
      {
        this[this.tableRoomInformation.MonthlyRate2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsIssuedCardNull() => this.IsNull(this.tableRoomInformation.IssuedCardColumn);

      [DebuggerNonUserCode]
      public void SetIssuedCardNull()
      {
        this[this.tableRoomInformation.IssuedCardColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomTypeTempRow : DataRow
    {
      private TempDataSet.RoomTypeTempDataTable tableRoomTypeTemp;

      [DebuggerNonUserCode]
      internal RoomTypeTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRoomTypeTemp = (TempDataSet.RoomTypeTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public byte RoomType
      {
        get
        {
          try
          {
            return (byte) this[this.tableRoomTypeTemp.RoomTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomType' in table 'RoomTypeTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomTypeTemp.RoomTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomTypeTemp.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomTypeTemp.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte MaxCard
      {
        get
        {
          try
          {
            return (byte) this[this.tableRoomTypeTemp.MaxCardColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxCard' in table 'RoomTypeTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomTypeTemp.MaxCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte MinCard
      {
        get
        {
          try
          {
            return (byte) this[this.tableRoomTypeTemp.MinCardColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinCard' in table 'RoomTypeTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomTypeTemp.MinCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableRoomTypeTemp.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableRoomTypeTemp.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableRoomTypeTemp.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'RoomTypeTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRoomTypeTemp.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomTypeNull() => this.IsNull(this.tableRoomTypeTemp.RoomTypeColumn);

      [DebuggerNonUserCode]
      public void SetRoomTypeNull() => this[this.tableRoomTypeTemp.RoomTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull() => this.IsNull(this.tableRoomTypeTemp.RmDescriptionColumn);

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableRoomTypeTemp.RmDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMaxCardNull() => this.IsNull(this.tableRoomTypeTemp.MaxCardColumn);

      [DebuggerNonUserCode]
      public void SetMaxCardNull() => this[this.tableRoomTypeTemp.MaxCardColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsMinCardNull() => this.IsNull(this.tableRoomTypeTemp.MinCardColumn);

      [DebuggerNonUserCode]
      public void SetMinCardNull() => this[this.tableRoomTypeTemp.MinCardColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableRoomTypeTemp.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableRoomTypeTemp.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableRoomTypeTemp.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableRoomTypeTemp.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class StaffTempRow : DataRow
    {
      private TempDataSet.StaffTempDataTable tableStaffTemp;

      [DebuggerNonUserCode]
      internal StaffTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableStaffTemp = (TempDataSet.StaffTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string AccLevel
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.AccLevelColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.AccLevelColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding1
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding1' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding2
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding2' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding3
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding3Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding3' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding3Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding4
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding4Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding4' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding4Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding5
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding5Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding5' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding5Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool AccBuilding6
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.AccBuilding6Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccBuilding6' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.AccBuilding6Column] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.SForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.SForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SSurName
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.SSurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.SSurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Identity
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.IdentityColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.IdentityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Password
      {
        get
        {
          try
          {
            return (string) this[this.tableStaffTemp.PasswordColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableStaffTemp.PasswordColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableStaffTemp.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'StaffTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableStaffTemp.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableStaffTemp.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableStaffTemp.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsAccLevelNull() => this.IsNull(this.tableStaffTemp.AccLevelColumn);

      [DebuggerNonUserCode]
      public void SetAccLevelNull() => this[this.tableStaffTemp.AccLevelColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsAccBuilding1Null() => this.IsNull(this.tableStaffTemp.AccBuilding1Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding1Null()
      {
        this[this.tableStaffTemp.AccBuilding1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAccBuilding2Null() => this.IsNull(this.tableStaffTemp.AccBuilding2Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding2Null()
      {
        this[this.tableStaffTemp.AccBuilding2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAccBuilding3Null() => this.IsNull(this.tableStaffTemp.AccBuilding3Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding3Null()
      {
        this[this.tableStaffTemp.AccBuilding3Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAccBuilding4Null() => this.IsNull(this.tableStaffTemp.AccBuilding4Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding4Null()
      {
        this[this.tableStaffTemp.AccBuilding4Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAccBuilding5Null() => this.IsNull(this.tableStaffTemp.AccBuilding5Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding5Null()
      {
        this[this.tableStaffTemp.AccBuilding5Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsAccBuilding6Null() => this.IsNull(this.tableStaffTemp.AccBuilding6Column);

      [DebuggerNonUserCode]
      public void SetAccBuilding6Null()
      {
        this[this.tableStaffTemp.AccBuilding6Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSForeNameNull() => this.IsNull(this.tableStaffTemp.SForeNameColumn);

      [DebuggerNonUserCode]
      public void SetSForeNameNull() => this[this.tableStaffTemp.SForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSSurNameNull() => this.IsNull(this.tableStaffTemp.SSurNameColumn);

      [DebuggerNonUserCode]
      public void SetSSurNameNull() => this[this.tableStaffTemp.SSurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsIdentityNull() => this.IsNull(this.tableStaffTemp.IdentityColumn);

      [DebuggerNonUserCode]
      public void SetIdentityNull() => this[this.tableStaffTemp.IdentityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsPasswordNull() => this.IsNull(this.tableStaffTemp.PasswordColumn);

      [DebuggerNonUserCode]
      public void SetPasswordNull() => this[this.tableStaffTemp.PasswordColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableStaffTemp.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableStaffTemp.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class SystemSetTempRow : DataRow
    {
      private TempDataSet.SystemSetTempDataTable tableSystemSetTemp;

      [DebuggerNonUserCode]
      internal SystemSetTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSystemSetTemp = (TempDataSet.SystemSetTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public short SystemID
      {
        get
        {
          try
          {
            return (short) this[this.tableSystemSetTemp.SystemIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableSystemSetTemp.SystemIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableSystemSetTemp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableSystemSetTemp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingType
      {
        get
        {
          try
          {
            return (string) this[this.tableSystemSetTemp.BuildingTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableSystemSetTemp.BuildingTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte Comport
      {
        get
        {
          try
          {
            return (byte) this[this.tableSystemSetTemp.ComportColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Comport' in table 'SystemSetTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSystemSetTemp.ComportColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public double GSTRate
      {
        get
        {
          try
          {
            return (double) this[this.tableSystemSetTemp.GSTRateColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0.0;
          }
        }
        set => this[this.tableSystemSetTemp.GSTRateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Bonus
      {
        get
        {
          try
          {
            return (bool) this[this.tableSystemSetTemp.BonusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Bonus' in table 'SystemSetTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSystemSetTemp.BonusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CheckOutTime
      {
        get
        {
          try
          {
            return (string) this[this.tableSystemSetTemp.CheckOutTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableSystemSetTemp.CheckOutTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int MGraceDefault
      {
        get
        {
          try
          {
            return (int) this[this.tableSystemSetTemp.MGraceDefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableSystemSetTemp.MGraceDefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int WGraceDefault
      {
        get
        {
          try
          {
            return (int) this[this.tableSystemSetTemp.WGraceDefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableSystemSetTemp.WGraceDefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int DGraceDefault
      {
        get
        {
          try
          {
            return (int) this[this.tableSystemSetTemp.DGraceDefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableSystemSetTemp.DGraceDefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableSystemSetTemp.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableSystemSetTemp.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableSystemSetTemp.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'SystemSetTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSystemSetTemp.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsSystemIDNull() => this.IsNull(this.tableSystemSetTemp.SystemIDColumn);

      [DebuggerNonUserCode]
      public void SetSystemIDNull()
      {
        this[this.tableSystemSetTemp.SystemIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableSystemSetTemp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableSystemSetTemp.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsBuildingTypeNull() => this.IsNull(this.tableSystemSetTemp.BuildingTypeColumn);

      [DebuggerNonUserCode]
      public void SetBuildingTypeNull()
      {
        this[this.tableSystemSetTemp.BuildingTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsComportNull() => this.IsNull(this.tableSystemSetTemp.ComportColumn);

      [DebuggerNonUserCode]
      public void SetComportNull() => this[this.tableSystemSetTemp.ComportColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsGSTRateNull() => this.IsNull(this.tableSystemSetTemp.GSTRateColumn);

      [DebuggerNonUserCode]
      public void SetGSTRateNull() => this[this.tableSystemSetTemp.GSTRateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBonusNull() => this.IsNull(this.tableSystemSetTemp.BonusColumn);

      [DebuggerNonUserCode]
      public void SetBonusNull() => this[this.tableSystemSetTemp.BonusColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCheckOutTimeNull() => this.IsNull(this.tableSystemSetTemp.CheckOutTimeColumn);

      [DebuggerNonUserCode]
      public void SetCheckOutTimeNull()
      {
        this[this.tableSystemSetTemp.CheckOutTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsMGraceDefaultNull() => this.IsNull(this.tableSystemSetTemp.MGraceDefaultColumn);

      [DebuggerNonUserCode]
      public void SetMGraceDefaultNull()
      {
        this[this.tableSystemSetTemp.MGraceDefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsWGraceDefaultNull() => this.IsNull(this.tableSystemSetTemp.WGraceDefaultColumn);

      [DebuggerNonUserCode]
      public void SetWGraceDefaultNull()
      {
        this[this.tableSystemSetTemp.WGraceDefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDGraceDefaultNull() => this.IsNull(this.tableSystemSetTemp.DGraceDefaultColumn);

      [DebuggerNonUserCode]
      public void SetDGraceDefaultNull()
      {
        this[this.tableSystemSetTemp.DGraceDefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableSystemSetTemp.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableSystemSetTemp.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableSystemSetTemp.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableSystemSetTemp.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UnLockDoorByRoomNoRow : DataRow
    {
      private TempDataSet.UnLockDoorByRoomNoDataTable tableUnLockDoorByRoomNo;

      [DebuggerNonUserCode]
      internal UnLockDoorByRoomNoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableUnLockDoorByRoomNo = (TempDataSet.UnLockDoorByRoomNoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime UnLockSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUnLockDoorByRoomNo.UnLockSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UnLockSDate' in table 'UnLockDoorByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.UnLockSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string UnLockSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.UnLockSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.UnLockSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CollectionSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUnLockDoorByRoomNo.CollectionSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CollectionSDate' in table 'UnLockDoorByRoomNo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.CollectionSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CollectionSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.CollectionSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.CollectionSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableUnLockDoorByRoomNo.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnLockDoorByRoomNo.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int ID
      {
        get => (int) this[this.tableUnLockDoorByRoomNo.IDColumn];
        set => this[this.tableUnLockDoorByRoomNo.IDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableUnLockDoorByRoomNo.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableUnLockDoorByRoomNo.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableUnLockDoorByRoomNo.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableUnLockDoorByRoomNo.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableUnLockDoorByRoomNo.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableUnLockDoorByRoomNo.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUnLockSDateNull()
      {
        return this.IsNull(this.tableUnLockDoorByRoomNo.UnLockSDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetUnLockSDateNull()
      {
        this[this.tableUnLockDoorByRoomNo.UnLockSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUnLockSTimeNull()
      {
        return this.IsNull(this.tableUnLockDoorByRoomNo.UnLockSTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetUnLockSTimeNull()
      {
        this[this.tableUnLockDoorByRoomNo.UnLockSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSDateNull()
      {
        return this.IsNull(this.tableUnLockDoorByRoomNo.CollectionSDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSDateNull()
      {
        this[this.tableUnLockDoorByRoomNo.CollectionSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSTimeNull()
      {
        return this.IsNull(this.tableUnLockDoorByRoomNo.CollectionSTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSTimeNull()
      {
        this[this.tableUnLockDoorByRoomNo.CollectionSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableUnLockDoorByRoomNo.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableUnLockDoorByRoomNo.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableUnLockDoorByRoomNo.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableUnLockDoorByRoomNo.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableUnLockDoorByRoomNo.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableUnLockDoorByRoomNo.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableUnLockDoorByRoomNo.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull()
      {
        this[this.tableUnLockDoorByRoomNo.StaffIDColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UnlockDoorHistoryRow : DataRow
    {
      private TempDataSet.UnlockDoorHistoryDataTable tableUnlockDoorHistory;

      [DebuggerNonUserCode]
      internal UnlockDoorHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableUnlockDoorHistory = (TempDataSet.UnlockDoorHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime UnLockSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUnlockDoorHistory.UnLockSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UnLockSDate' in table 'UnlockDoorHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUnlockDoorHistory.UnLockSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string UnLockSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.UnLockSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.UnLockSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CollectionSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUnlockDoorHistory.CollectionSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CollectionSDate' in table 'UnlockDoorHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUnlockDoorHistory.CollectionSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CollectionSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.CollectionSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.CollectionSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableUnlockDoorHistory.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUnlockDoorHistory.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public int ID
      {
        get => (int) this[this.tableUnlockDoorHistory.IDColumn];
        set => this[this.tableUnlockDoorHistory.IDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableUnlockDoorHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableUnlockDoorHistory.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableUnlockDoorHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableUnlockDoorHistory.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableUnlockDoorHistory.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableUnlockDoorHistory.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUnLockSDateNull() => this.IsNull(this.tableUnlockDoorHistory.UnLockSDateColumn);

      [DebuggerNonUserCode]
      public void SetUnLockSDateNull()
      {
        this[this.tableUnlockDoorHistory.UnLockSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUnLockSTimeNull() => this.IsNull(this.tableUnlockDoorHistory.UnLockSTimeColumn);

      [DebuggerNonUserCode]
      public void SetUnLockSTimeNull()
      {
        this[this.tableUnlockDoorHistory.UnLockSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSDateNull()
      {
        return this.IsNull(this.tableUnlockDoorHistory.CollectionSDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSDateNull()
      {
        this[this.tableUnlockDoorHistory.CollectionSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSTimeNull()
      {
        return this.IsNull(this.tableUnlockDoorHistory.CollectionSTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSTimeNull()
      {
        this[this.tableUnlockDoorHistory.CollectionSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableUnlockDoorHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableUnlockDoorHistory.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableUnlockDoorHistory.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull()
      {
        this[this.tableUnlockDoorHistory.ForeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableUnlockDoorHistory.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull()
      {
        this[this.tableUnlockDoorHistory.SurNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableUnlockDoorHistory.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull()
      {
        this[this.tableUnlockDoorHistory.StaffIDColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UploadDataRow : DataRow
    {
      private TempDataSet.UploadDataDataTable tableUploadData;

      [DebuggerNonUserCode]
      internal UploadDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableUploadData = (TempDataSet.UploadDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime UnlockSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUploadData.UnlockSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UnlockSDate' in table 'UploadData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUploadData.UnlockSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string UnlockSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.UnlockSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.UnlockSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime CollectionSDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableUploadData.CollectionSDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CollectionSDate' in table 'UploadData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUploadData.CollectionSDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CollectionSTime
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.CollectionSTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.CollectionSTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ForeName
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.ForeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.ForeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string SurName
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.SurNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.SurNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableUploadData.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableUploadData.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableUploadData.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull() => this[this.tableUploadData.RoomNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableUploadData.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull() => this[this.tableUploadData.CardNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableUploadData.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull() => this[this.tableUploadData.CardTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUnlockSDateNull() => this.IsNull(this.tableUploadData.UnlockSDateColumn);

      [DebuggerNonUserCode]
      public void SetUnlockSDateNull()
      {
        this[this.tableUploadData.UnlockSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUnlockSTimeNull() => this.IsNull(this.tableUploadData.UnlockSTimeColumn);

      [DebuggerNonUserCode]
      public void SetUnlockSTimeNull()
      {
        this[this.tableUploadData.UnlockSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSDateNull()
      {
        return this.IsNull(this.tableUploadData.CollectionSDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSDateNull()
      {
        this[this.tableUploadData.CollectionSDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCollectionSTimeNull()
      {
        return this.IsNull(this.tableUploadData.CollectionSTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetCollectionSTimeNull()
      {
        this[this.tableUploadData.CollectionSTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableUploadData.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull() => this[this.tableUploadData.ClientIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsForeNameNull() => this.IsNull(this.tableUploadData.ForeNameColumn);

      [DebuggerNonUserCode]
      public void SetForeNameNull() => this[this.tableUploadData.ForeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsSurNameNull() => this.IsNull(this.tableUploadData.SurNameColumn);

      [DebuggerNonUserCode]
      public void SetSurNameNull() => this[this.tableUploadData.SurNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableUploadData.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableUploadData.StaffIDColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class VacantStatus_TempRow : DataRow
    {
      private TempDataSet.VacantStatus_TempDataTable tableVacantStatus_Temp;

      [DebuggerNonUserCode]
      internal VacantStatus_TempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableVacantStatus_Temp = (TempDataSet.VacantStatus_TempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableVacantStatus_Temp.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableVacantStatus_Temp.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime StartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableVacantStatus_Temp.StartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartDate' in table 'VacantStatus_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableVacantStatus_Temp.StartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime EndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableVacantStatus_Temp.EndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndDate' in table 'VacantStatus_Temp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableVacantStatus_Temp.EndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableVacantStatus_Temp.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableVacantStatus_Temp.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RmDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableVacantStatus_Temp.RmDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableVacantStatus_Temp.RmDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableVacantStatus_Temp.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableVacantStatus_Temp.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsStartDateNull() => this.IsNull(this.tableVacantStatus_Temp.StartDateColumn);

      [DebuggerNonUserCode]
      public void SetStartDateNull()
      {
        this[this.tableVacantStatus_Temp.StartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsEndDateNull() => this.IsNull(this.tableVacantStatus_Temp.EndDateColumn);

      [DebuggerNonUserCode]
      public void SetEndDateNull()
      {
        this[this.tableVacantStatus_Temp.EndDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsDescriptionNull() => this.IsNull(this.tableVacantStatus_Temp.DescriptionColumn);

      [DebuggerNonUserCode]
      public void SetDescriptionNull()
      {
        this[this.tableVacantStatus_Temp.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRmDescriptionNull()
      {
        return this.IsNull(this.tableVacantStatus_Temp.RmDescriptionColumn);
      }

      [DebuggerNonUserCode]
      public void SetRmDescriptionNull()
      {
        this[this.tableVacantStatus_Temp.RmDescriptionColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ZoneTempRow : DataRow
    {
      private TempDataSet.ZoneTempDataTable tableZoneTemp;

      [DebuggerNonUserCode]
      internal ZoneTempRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZoneTemp = (TempDataSet.ZoneTempDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public short ZoneNo
      {
        get
        {
          try
          {
            return (short) this[this.tableZoneTemp.ZoneNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0;
          }
        }
        set => this[this.tableZoneTemp.ZoneNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ZoneName
      {
        get
        {
          try
          {
            return (string) this[this.tableZoneTemp.ZoneNameColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableZoneTemp.ZoneNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string BuildingNo
      {
        get
        {
          try
          {
            return (string) this[this.tableZoneTemp.BuildingNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableZoneTemp.BuildingNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string StaffID
      {
        get
        {
          try
          {
            return (string) this[this.tableZoneTemp.StaffIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableZoneTemp.StaffIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableZoneTemp.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'ZoneTemp' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZoneTemp.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsZoneNoNull() => this.IsNull(this.tableZoneTemp.ZoneNoColumn);

      [DebuggerNonUserCode]
      public void SetZoneNoNull() => this[this.tableZoneTemp.ZoneNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsZoneNameNull() => this.IsNull(this.tableZoneTemp.ZoneNameColumn);

      [DebuggerNonUserCode]
      public void SetZoneNameNull() => this[this.tableZoneTemp.ZoneNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsBuildingNoNull() => this.IsNull(this.tableZoneTemp.BuildingNoColumn);

      [DebuggerNonUserCode]
      public void SetBuildingNoNull() => this[this.tableZoneTemp.BuildingNoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsStaffIDNull() => this.IsNull(this.tableZoneTemp.StaffIDColumn);

      [DebuggerNonUserCode]
      public void SetStaffIDNull() => this[this.tableZoneTemp.StaffIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableZoneTemp.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull() => this[this.tableZoneTemp.UpdateColumn] = Convert.DBNull;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccIssuedCardHistoryRow : DataRow
    {
      private TempDataSet.AccIssuedCardHistoryDataTable tableAccIssuedCardHistory;

      [DebuggerNonUserCode]
      internal AccIssuedCardHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAccIssuedCardHistory = (TempDataSet.AccIssuedCardHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      public string CardNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.CardNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.CardNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RoomNo
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.RoomNoColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.RoomNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string CardType
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.CardTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.CardTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ClientID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.ClientIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.ClientIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public byte CardStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableAccIssuedCardHistory.CardStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardStatus' in table 'AccIssuedCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccIssuedCardHistory.CardStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public Decimal KeyCharge
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableAccIssuedCardHistory.KeyChargeColumn];
          }
          catch (InvalidCastException ex)
          {
            return 0M;
          }
        }
        set => this[this.tableAccIssuedCardHistory.KeyChargeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string TempBld
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.TempBldColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.TempBldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string ReaderID
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.ReaderIDColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.ReaderIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public DateTime RecordDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableAccIssuedCardHistory.RecordDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordDate' in table 'AccIssuedCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccIssuedCardHistory.RecordDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public string RecordTime
      {
        get
        {
          try
          {
            return (string) this[this.tableAccIssuedCardHistory.RecordTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            return "";
          }
        }
        set => this[this.tableAccIssuedCardHistory.RecordTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool Update
      {
        get
        {
          try
          {
            return (bool) this[this.tableAccIssuedCardHistory.UpdateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Update' in table 'AccIssuedCardHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAccIssuedCardHistory.UpdateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      public bool IsCardNoNull() => this.IsNull(this.tableAccIssuedCardHistory.CardNoColumn);

      [DebuggerNonUserCode]
      public void SetCardNoNull()
      {
        this[this.tableAccIssuedCardHistory.CardNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRoomNoNull() => this.IsNull(this.tableAccIssuedCardHistory.RoomNoColumn);

      [DebuggerNonUserCode]
      public void SetRoomNoNull()
      {
        this[this.tableAccIssuedCardHistory.RoomNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardTypeNull() => this.IsNull(this.tableAccIssuedCardHistory.CardTypeColumn);

      [DebuggerNonUserCode]
      public void SetCardTypeNull()
      {
        this[this.tableAccIssuedCardHistory.CardTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsClientIDNull() => this.IsNull(this.tableAccIssuedCardHistory.ClientIDColumn);

      [DebuggerNonUserCode]
      public void SetClientIDNull()
      {
        this[this.tableAccIssuedCardHistory.ClientIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsCardStatusNull()
      {
        return this.IsNull(this.tableAccIssuedCardHistory.CardStatusColumn);
      }

      [DebuggerNonUserCode]
      public void SetCardStatusNull()
      {
        this[this.tableAccIssuedCardHistory.CardStatusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsKeyChargeNull() => this.IsNull(this.tableAccIssuedCardHistory.KeyChargeColumn);

      [DebuggerNonUserCode]
      public void SetKeyChargeNull()
      {
        this[this.tableAccIssuedCardHistory.KeyChargeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsTempBldNull() => this.IsNull(this.tableAccIssuedCardHistory.TempBldColumn);

      [DebuggerNonUserCode]
      public void SetTempBldNull()
      {
        this[this.tableAccIssuedCardHistory.TempBldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsReaderIDNull() => this.IsNull(this.tableAccIssuedCardHistory.ReaderIDColumn);

      [DebuggerNonUserCode]
      public void SetReaderIDNull()
      {
        this[this.tableAccIssuedCardHistory.ReaderIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordDateNull()
      {
        return this.IsNull(this.tableAccIssuedCardHistory.RecordDateColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordDateNull()
      {
        this[this.tableAccIssuedCardHistory.RecordDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsRecordTimeNull()
      {
        return this.IsNull(this.tableAccIssuedCardHistory.RecordTimeColumn);
      }

      [DebuggerNonUserCode]
      public void SetRecordTimeNull()
      {
        this[this.tableAccIssuedCardHistory.RecordTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      public bool IsUpdateNull() => this.IsNull(this.tableAccIssuedCardHistory.UpdateColumn);

      [DebuggerNonUserCode]
      public void SetUpdateNull()
      {
        this[this.tableAccIssuedCardHistory.UpdateColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccBonusEntitleListRowChangeEvent : EventArgs
    {
      private TempDataSet.AccBonusEntitleListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccBonusEntitleListRowChangeEvent(
        TempDataSet.AccBonusEntitleListRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccBonusEntitleListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccCurrentGByFloorNoRowChangeEvent : EventArgs
    {
      private TempDataSet.AccCurrentGByFloorNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccCurrentGByFloorNoRowChangeEvent(
        TempDataSet.AccCurrentGByFloorNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGByFloorNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccCurrentGInfoRowChangeEvent : EventArgs
    {
      private TempDataSet.AccCurrentGInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccCurrentGInfoRowChangeEvent(TempDataSet.AccCurrentGInfoRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccCurrentGInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccErrorRecordsRowChangeEvent : EventArgs
    {
      private TempDataSet.AccErrorRecordsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccErrorRecordsRowChangeEvent(TempDataSet.AccErrorRecordsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccErrorRecordsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccExtraRowChangeEvent : EventArgs
    {
      private TempDataSet.AccExtraRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccExtraRowChangeEvent(TempDataSet.AccExtraRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccExtraRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGInfo_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGInfo_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGInfo_TempRowChangeEvent(TempDataSet.AccGInfo_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGInfo_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGracePeriodListRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGracePeriodListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGracePeriodListRowChangeEvent(
        TempDataSet.AccGracePeriodListRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGracePeriodListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestAccountRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGuestAccountRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGuestAccountRowChangeEvent(TempDataSet.AccGuestAccountRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestAccountRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGuestHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGuestHistoryRowChangeEvent(TempDataSet.AccGuestHistoryRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestListRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGuestListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGuestListRowChangeEvent(TempDataSet.AccGuestListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccGuestRecordDateRowChangeEvent : EventArgs
    {
      private TempDataSet.AccGuestRecordDateRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccGuestRecordDateRowChangeEvent(
        TempDataSet.AccGuestRecordDateRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccGuestRecordDateRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccReservationListRowChangeEvent : EventArgs
    {
      private TempDataSet.AccReservationListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccReservationListRowChangeEvent(
        TempDataSet.AccReservationListRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccReservationListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccRoomDetailRowChangeEvent : EventArgs
    {
      private TempDataSet.AccRoomDetailRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccRoomDetailRowChangeEvent(TempDataSet.AccRoomDetailRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomDetailRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccRoomInformationRowChangeEvent : EventArgs
    {
      private TempDataSet.AccRoomInformationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccRoomInformationRowChangeEvent(
        TempDataSet.AccRoomInformationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccRoomInformationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccSalesRowChangeEvent : EventArgs
    {
      private TempDataSet.AccSalesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccSalesRowChangeEvent(TempDataSet.AccSalesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccSalesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccTransRowChangeEvent : EventArgs
    {
      private TempDataSet.AccTransRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccTransRowChangeEvent(TempDataSet.AccTransRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccTransRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AvailableRoom_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.AvailableRoom_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AvailableRoom_TempRowChangeEvent(
        TempDataSet.AvailableRoom_TempRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AvailableRoom_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class Banking_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.Banking_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public Banking_TempRowChangeEvent(TempDataSet.Banking_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.Banking_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class BonusEntitleListRowChangeEvent : EventArgs
    {
      private TempDataSet.BonusEntitleListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public BonusEntitleListRowChangeEvent(
        TempDataSet.BonusEntitleListRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.BonusEntitleListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class BonusTempRowChangeEvent : EventArgs
    {
      private TempDataSet.BonusTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public BonusTempRowChangeEvent(TempDataSet.BonusTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.BonusTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CheckRoom_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.CheckRoom_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public CheckRoom_TempRowChangeEvent(TempDataSet.CheckRoom_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CheckRoom_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CurrentGByFloorNoRowChangeEvent : EventArgs
    {
      private TempDataSet.CurrentGByFloorNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public CurrentGByFloorNoRowChangeEvent(
        TempDataSet.CurrentGByFloorNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGByFloorNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CurrentGInfoRowChangeEvent : EventArgs
    {
      private TempDataSet.CurrentGInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public CurrentGInfoRowChangeEvent(TempDataSet.CurrentGInfoRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.CurrentGInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DetailGuestIssuedRowChangeEvent : EventArgs
    {
      private TempDataSet.DetailGuestIssuedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public DetailGuestIssuedRowChangeEvent(
        TempDataSet.DetailGuestIssuedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DetailGuestIssuedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DisplayRooms_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.DisplayRooms_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public DisplayRooms_TempRowChangeEvent(
        TempDataSet.DisplayRooms_TempRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DisplayRooms_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DLogRowChangeEvent : EventArgs
    {
      private TempDataSet.DLogRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public DLogRowChangeEvent(TempDataSet.DLogRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DLogRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DTransactionsRowChangeEvent : EventArgs
    {
      private TempDataSet.DTransactionsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public DTransactionsRowChangeEvent(TempDataSet.DTransactionsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.DTransactionsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ErrorRecordsRowChangeEvent : EventArgs
    {
      private TempDataSet.ErrorRecordsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ErrorRecordsRowChangeEvent(TempDataSet.ErrorRecordsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ErrorRecordsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraRowChangeEvent : EventArgs
    {
      private TempDataSet.ExtraRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ExtraRowChangeEvent(TempDataSet.ExtraRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraCardRowChangeEvent : EventArgs
    {
      private TempDataSet.ExtraCardRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ExtraCardRowChangeEvent(TempDataSet.ExtraCardRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCardRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExtraCharge_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.ExtraCharge_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ExtraCharge_TempRowChangeEvent(
        TempDataSet.ExtraCharge_TempRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ExtraCharge_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GData_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.GData_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GData_TempRowChangeEvent(TempDataSet.GData_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GData_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GDSalesRowChangeEvent : EventArgs
    {
      private TempDataSet.GDSalesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GDSalesRowChangeEvent(TempDataSet.GDSalesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GDSalesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GInfo_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.GInfo_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GInfo_TempRowChangeEvent(TempDataSet.GInfo_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GInfo_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GracePeriodListRowChangeEvent : EventArgs
    {
      private TempDataSet.GracePeriodListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GracePeriodListRowChangeEvent(TempDataSet.GracePeriodListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GracePeriodListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GTransactions_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.GTransactions_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GTransactions_TempRowChangeEvent(
        TempDataSet.GTransactions_TempRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GTransactions_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestAccountRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestAccountRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestAccountRowChangeEvent(TempDataSet.GuestAccountRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestAccountRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestHistoryRowChangeEvent(TempDataSet.GuestHistoryRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByBldNoRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestIssuedByBldNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestIssuedByBldNoRowChangeEvent(
        TempDataSet.GuestIssuedByBldNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByBldNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByFloorNoRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestIssuedByFloorNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestIssuedByFloorNoRowChangeEvent(
        TempDataSet.GuestIssuedByFloorNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByFloorNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByGuestIDRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestIssuedByGuestIDRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestIssuedByGuestIDRowChangeEvent(
        TempDataSet.GuestIssuedByGuestIDRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByGuestIDRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestIssuedByRoomNoRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestIssuedByRoomNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestIssuedByRoomNoRowChangeEvent(
        TempDataSet.GuestIssuedByRoomNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestIssuedByRoomNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestListRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestListRowChangeEvent(TempDataSet.GuestListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GuestRecordDateRowChangeEvent : EventArgs
    {
      private TempDataSet.GuestRecordDateRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GuestRecordDateRowChangeEvent(TempDataSet.GuestRecordDateRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GuestRecordDateRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class GViewRoom_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.GViewRoom_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public GViewRoom_TempRowChangeEvent(TempDataSet.GViewRoom_TempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.GViewRoom_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class IssueCardHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.IssueCardHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public IssueCardHistoryRowChangeEvent(
        TempDataSet.IssueCardHistoryRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.IssueCardHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class KeyChargesTempRowChangeEvent : EventArgs
    {
      private TempDataSet.KeyChargesTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public KeyChargesTempRowChangeEvent(TempDataSet.KeyChargesTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.KeyChargesTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class LossCardRowChangeEvent : EventArgs
    {
      private TempDataSet.LossCardRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public LossCardRowChangeEvent(TempDataSet.LossCardRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.LossCardRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class MLogRowChangeEvent : EventArgs
    {
      private TempDataSet.MLogRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public MLogRowChangeEvent(TempDataSet.MLogRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.MLogRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ReceiptRowChangeEvent : EventArgs
    {
      private TempDataSet.ReceiptRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ReceiptRowChangeEvent(TempDataSet.ReceiptRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ReceiptRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ReservationListRowChangeEvent : EventArgs
    {
      private TempDataSet.ReservationListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ReservationListRowChangeEvent(TempDataSet.ReservationListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ReservationListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomDetailRowChangeEvent : EventArgs
    {
      private TempDataSet.RoomDetailRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public RoomDetailRowChangeEvent(TempDataSet.RoomDetailRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomDetailRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.RoomHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public RoomHistoryRowChangeEvent(TempDataSet.RoomHistoryRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomInformationRowChangeEvent : EventArgs
    {
      private TempDataSet.RoomInformationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public RoomInformationRowChangeEvent(TempDataSet.RoomInformationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomInformationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class RoomTypeTempRowChangeEvent : EventArgs
    {
      private TempDataSet.RoomTypeTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public RoomTypeTempRowChangeEvent(TempDataSet.RoomTypeTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.RoomTypeTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class StaffTempRowChangeEvent : EventArgs
    {
      private TempDataSet.StaffTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public StaffTempRowChangeEvent(TempDataSet.StaffTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.StaffTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class SystemSetTempRowChangeEvent : EventArgs
    {
      private TempDataSet.SystemSetTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public SystemSetTempRowChangeEvent(TempDataSet.SystemSetTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.SystemSetTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UnLockDoorByRoomNoRowChangeEvent : EventArgs
    {
      private TempDataSet.UnLockDoorByRoomNoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public UnLockDoorByRoomNoRowChangeEvent(
        TempDataSet.UnLockDoorByRoomNoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnLockDoorByRoomNoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UnlockDoorHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.UnlockDoorHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public UnlockDoorHistoryRowChangeEvent(
        TempDataSet.UnlockDoorHistoryRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UnlockDoorHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UploadDataRowChangeEvent : EventArgs
    {
      private TempDataSet.UploadDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public UploadDataRowChangeEvent(TempDataSet.UploadDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.UploadDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class VacantStatus_TempRowChangeEvent : EventArgs
    {
      private TempDataSet.VacantStatus_TempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public VacantStatus_TempRowChangeEvent(
        TempDataSet.VacantStatus_TempRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.VacantStatus_TempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ZoneTempRowChangeEvent : EventArgs
    {
      private TempDataSet.ZoneTempRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public ZoneTempRowChangeEvent(TempDataSet.ZoneTempRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.ZoneTempRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class AccIssuedCardHistoryRowChangeEvent : EventArgs
    {
      private TempDataSet.AccIssuedCardHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      public AccIssuedCardHistoryRowChangeEvent(
        TempDataSet.AccIssuedCardHistoryRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      public TempDataSet.AccIssuedCardHistoryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      public DataRowAction Action => this.eventAction;
    }
  }
}
